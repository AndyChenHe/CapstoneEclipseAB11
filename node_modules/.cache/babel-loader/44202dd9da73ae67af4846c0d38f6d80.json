{"ast":null,"code":"var _jsxFileName = \"/Users/Michelle/Desktop/Capstone/CapstoneEclipseAB11/src/Components/bodyparts/Body.js\";\nimport React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport Link from \"@material-ui/core/Link\";\nimport BodyParts from \"../../img/home/bodyparts.png\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nconst useStyles = makeStyles(theme => ({\n  bodypartList: {\n    position: \"relative\",\n    overflow: \"auto\",\n    maxHeight: 400\n  },\n  conditionList: {\n    position: \"relative\",\n    overflow: \"auto\",\n    maxHeight: 400\n  }\n}));\nexport default function BodyPartsDialog(props) {\n  const classes = useStyles(); //dialog open/close\n\n  const [open, setOpen] = React.useState(false);\n  const [fullWidth] = React.useState(true);\n  const [maxWidth] = React.useState(\"lg\");\n  const [selectedSym, setSelectedSym] = React.useState('');\n  const [selectedCondition, setSelectedCondition] = React.useState('');\n  const [selectedBodyPart, setSelectedBodyPart] = React.useState('');\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSubmit = () => {\n    props.changeConditionLabel(selectedCondition, 'body');\n    setOpen(false);\n  }; //get symptoms' name and user selection\n\n\n  const getSymName = value => {\n    setSelectedSym(value);\n  }; //get condition name and user selection\n\n\n  const getConditionName = condition => {\n    setSelectedCondition(condition);\n    console.log(condition);\n  };\n\n  const getBodyPart = bodyPart => {\n    setSelectedBodyPart(bodyPart);\n    setSelectedSym('');\n  };\n\n  let symList = [];\n\n  if (selectedBodyPart != '') {\n    symList = Object.keys(props.bodyPartsDic[selectedBodyPart].SymptomsConditionDic);\n  }\n\n  let condition = [];\n\n  if (selectedSym != '') {\n    condition = props.bodyPartsDic[selectedBodyPart].SymptomsConditionDic[selectedSym];\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    style: {\n      color: \"white\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, \"Don\\u2019t know your condition name?\", \" \", /*#__PURE__*/React.createElement(Link, {\n    style: {\n      color: \"#ff8686\",\n      textDecoration: \"underline\"\n    },\n    href: \"#\",\n    onClick: handleClickOpen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"Search by body parts\"), \" \"), /*#__PURE__*/React.createElement(Dialog, {\n    fullWidth: fullWidth,\n    maxWidth: maxWidth,\n    open: open,\n    onClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DialogContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    color: \"primary\",\n    style: {\n      marginLeft: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, \"1. Select Body Part\")), /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: BodyParts,\n    usemap: \"#image-map\",\n    alt: \"bodyparts\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"map\", {\n    name: \"image-map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"area\", {\n    target: \"\",\n    alt: \"head\",\n    title: \"Head\",\n    href: \"#\",\n    coords: \"88,8,76,14,71,21,69,33,69,41,71,50,77,60,79,74,57,85,125,84,104,74,104,63,108,55,113,39,112,29,107,16,100,11\",\n    shape: \"poly\",\n    onClick: () => {\n      getBodyPart('head');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"area\", {\n    target: \"\",\n    alt: \"leftarm\",\n    title: \"Arm\",\n    href: \"#\",\n    coords: \"42,92,32,106,33,158,25,191,22,233,8,250,8,258,9,270,15,276,29,267,33,244,33,234,43,209,46,194,53,152,54,86\",\n    shape: \"poly\",\n    onClick: () => {\n      getBodyPart('leftarm');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"area\", {\n    target: \"\",\n    alt: \"rightarm\",\n    title: \"Arm\",\n    href: \"#\",\n    coords: \"129,86,147,101,149,120,148,158,157,192,159,232,172,246,171,265,165,276,151,267,147,233,141,219,135,195,130,164,128,147\",\n    shape: \"poly\",\n    onClick: () => {\n      getBodyPart('rightarm');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"area\", {\n    target: \"\",\n    alt: \"chest\",\n    title: \"Chest\",\n    href: \"#\",\n    coords: \"54,85,128,141\",\n    shape: \"rect\",\n    onClick: () => {\n      getBodyPart('chest');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"area\", {\n    target: \"\",\n    alt: \"abdomen\",\n    title: \"Abdomen\",\n    href: \"#\",\n    coords: \"54,142,54,153,58,169,54,200,126,200,123,167,129,153,129,142\",\n    shape: \"poly\",\n    onClick: () => {\n      getBodyPart('abdomen');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"area\", {\n    target: \"\",\n    alt: \"pelvis\",\n    title: \"Pelvis\",\n    href: \"#\",\n    coords: \"54,200,47,253,135,253,127,201\",\n    shape: \"poly\",\n    onClick: () => {\n      getBodyPart('pelvis');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 19\n    }\n  }), /*#__PURE__*/React.createElement(\"area\", {\n    target: \"\",\n    alt: \"legs\",\n    title: \"legs\",\n    href: \"#\",\n    coords: \"47,272,56,303,58,336,54,354,58,383,65,433,53,449,55,459,70,465,79,444,79,432,78,413,82,379,82,346,84,305,90,266,97,305,99,334,100,352,99,363,102,395,102,416,102,434,101,444,111,463,122,462,130,451,115,433,121,398,127,356,123,334,125,305,132,273,134,253,90,253,47,253\",\n    shape: \"poly\",\n    onClick: () => {\n      getBodyPart('legs');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 19\n    }\n  })))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    color: \"primary\",\n    style: {\n      marginLeft: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 19\n    }\n  }, \"2. Select organ\")), /*#__PURE__*/React.createElement(Box, {\n    style: {\n      border: \"1px solid rgba(237, 235, 237, 1)\"\n    },\n    mt: 5,\n    ml: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    className: classes.bodypartList,\n    id: \"Head\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 17\n    }\n  }, symList.map((text, index) => /*#__PURE__*/React.createElement(ListItem, {\n    id: text,\n    button: true,\n    selected: selectedSym == text,\n    key: text,\n    onClick: getSymName.bind(this, text),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ListItemText, {\n    primary: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 23\n    }\n  })))))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body1\",\n    color: \"primary\",\n    style: {\n      marginLeft: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 17\n    }\n  }, \"3. Select Condition\")), /*#__PURE__*/React.createElement(Box, {\n    style: {\n      border: \"1px solid rgba(237, 235, 237, 1)\"\n    },\n    mt: 2,\n    ml: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    className: classes.conditionList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 17\n    }\n  }, condition.map((text, index) => /*#__PURE__*/React.createElement(ListItem, {\n    button: true,\n    key: text,\n    selected: selectedCondition == text,\n    onClick: getConditionName.bind(this, text),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ListItemText, {\n    primary: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 23\n    }\n  }))))), /*#__PURE__*/React.createElement(DialogActions, {\n    style: {\n      marginTop: 10,\n      marginBottom: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    style: {\n      backgroundColor: \"#ff8686\",\n      textTransform: \"none\"\n    },\n    startIcon: /*#__PURE__*/React.createElement(SearchIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 30\n      }\n    }),\n    onClick: handleSubmit,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 17\n    }\n  }, \"Confirm\")))))));\n} //arms\n\n{}\n/* <List className={classes.bodypartList} id=\"arms\">\n{[\n  \"Blood\",\n  \"Bones and Joints\",\n\"Elbow\",\n\"Finger\",\n\"Hand\",\n\"Hormones\",\n\"Lymph nodes\",\n\"Nerves and Nervous System\",\n\"Shoulder\",\n\"Skin\",\n\"Wrist\",\n].map((text, index) => (\n<ListItem\n  button\n  key={text}\n  selected={selectedBodyPartIndex === index}\n  onClick={(event) =>\n    handleBodyPartListItemClick(event, index)\n  }\n>\n  <ListItemText primary={text} />\n</ListItem>\n))}\n</List> */\n//chest\n\n{}\n/* <List className={classes.bodypartList} id=\"chest\">\n{[\n  \"Back\",\n  \"Blood\",\n  \"Bones and Joints\",\n  \"Breast\"\n\"Heart\",\n\"Hormones\",\n\"Lungs\"\n\"Lymph nodes\",\n\"Nerves and Nervous System\",\n\"Spine\",\n\"Skin\",\n\"Thyroid\",\n].map((text, index) => (\n<ListItem\n  button\n  key={text}\n  selected={selectedBodyPartIndex === index}\n  onClick={(event) =>\n    handleBodyPartListItemClick(event, index)\n  }\n>\n  <ListItemText primary={text} />\n</ListItem>\n))}\n</List> */\n//abdomen\n\n{}\n/* <List className={classes.bodypartList} id=\"abdomen\">\n{[\n  \"Appendix\"\n  \"Blood\",\n  \"Bones and Joints\",\n  \"Colon\"\n\"Gallbladder\",\n\"Hormones\",\n\"Kidney\",\n\"Liver\",\n\"Lymph nodes\",\n\"Nerves and Nervous System\",\n\"Pancreas\",\n\"Rectum\",\n\"Skin\",\n\"Stomach\",\n\"Spleen\",\n].map((text, index) => (\n<ListItem\n  button\n  key={text}\n  selected={selectedBodyPartIndex === index}\n  onClick={(event) =>\n    handleBodyPartListItemClick(event, index)\n  }\n>\n  <ListItemText primary={text} />\n</ListItem>\n))}\n</List> */\n//pelvis\n\n{}\n/* <List className={classes.bodypartList} id=\"pelvis\">\n{[\n  \"Bladder\",\n  \"Blood\",\n  \"Bones and Joints\",\n  \"Groin\",\n  \"Hip\",\n\"Hormones\",\n\"Lymph nodes\",\n\"Nerves and Nervous System\",\n\"Skin\",\n\"Uterus\",\n].map((text, index) => (\n<ListItem\n  button\n  key={text}\n  selected={selectedBodyPartIndex === index}\n  onClick={(event) =>\n    handleBodyPartListItemClick(event, index)\n  }\n>\n  <ListItemText primary={text} />\n</ListItem>\n))}\n</List> */\n//leg\n\n{\n  /* <List className={classes.bodypartList} id=\"leg\">\n  {[\n    \"Ankle\",\n    \"Blood\",\n    \"Bones and Joints\",\n    \"Foot\",\n    \"Heel\",\n    \"Knee\",\n  \"Hormones\",\n  \"Lymph nodes\",\n  \"Nerves and Nervous System\",\n  \"Skin\",\n  ].map((text, index) => (\n  <ListItem\n    button\n    key={text}\n    selected={selectedBodyPartIndex === index}\n    onClick={(event) =>\n      handleBodyPartListItemClick(event, index)\n    }\n  >\n    <ListItemText primary={text} />\n  </ListItem>\n  ))}\n  </List> */\n}","map":{"version":3,"sources":["/Users/Michelle/Desktop/Capstone/CapstoneEclipseAB11/src/Components/bodyparts/Body.js"],"names":["React","makeStyles","Button","Dialog","DialogActions","DialogContent","Link","BodyParts","Grid","Typography","Box","List","ListItem","ListItemText","SearchIcon","useStyles","theme","bodypartList","position","overflow","maxHeight","conditionList","BodyPartsDialog","props","classes","open","setOpen","useState","fullWidth","maxWidth","selectedSym","setSelectedSym","selectedCondition","setSelectedCondition","selectedBodyPart","setSelectedBodyPart","handleClickOpen","handleClose","handleSubmit","changeConditionLabel","getSymName","value","getConditionName","condition","console","log","getBodyPart","bodyPart","symList","Object","keys","bodyPartsDic","SymptomsConditionDic","color","textDecoration","marginLeft","border","map","text","index","bind","marginTop","marginBottom","backgroundColor","textTransform"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport Link from \"@material-ui/core/Link\";\nimport BodyParts from \"../../img/home/bodyparts.png\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Box from \"@material-ui/core/Box\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nconst useStyles = makeStyles((theme) => ({\n  bodypartList: {\n    position: \"relative\",\n    overflow: \"auto\",\n    maxHeight: 400,\n  },\n\n  conditionList: {\n    position: \"relative\",\n    overflow: \"auto\",\n    maxHeight: 400,\n  },\n}));\n\nexport default function BodyPartsDialog(props) {\n  const classes = useStyles();\n\n  //dialog open/close\n  const [open, setOpen] = React.useState(false);\n  const [fullWidth] = React.useState(true);\n  const [maxWidth] = React.useState(\"lg\");\n  const [selectedSym, setSelectedSym] = React.useState('');\n  const [selectedCondition, setSelectedCondition] = React.useState('');\n  const [selectedBodyPart, setSelectedBodyPart] = React.useState('');\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleSubmit = () => {\n    props.changeConditionLabel(selectedCondition, 'body');\n    setOpen(false);\n  };\n\n  //get symptoms' name and user selection\n  const getSymName = (value) => {\n    setSelectedSym(value);\n  }\n\n  //get condition name and user selection\n  const getConditionName = (condition) => {\n    setSelectedCondition(condition);\n    console.log(condition);\n  }\n\n\n\n  const getBodyPart = (bodyPart) => {\n    setSelectedBodyPart(bodyPart);\n    setSelectedSym('');\n\n  }\n\n  let symList = [];\n  if(selectedBodyPart!=''){\n    symList=Object.keys(props.bodyPartsDic[selectedBodyPart].SymptomsConditionDic);\n  }\n\n  let condition = [];\n  if (selectedSym != ''){\n    condition = props.bodyPartsDic[selectedBodyPart].SymptomsConditionDic[selectedSym];\n  }\n\n  return (\n    <React.Fragment>\n      <Typography style={{ color: \"white\" }}>\n        Don’t know your condition name?{\" \"}\n        <Link\n          style={{ color: \"#ff8686\", textDecoration: \"underline\" }}\n          href=\"#\"\n          onClick={handleClickOpen}\n        >\n          Search by body parts\n        </Link>{\" \"}\n      </Typography>\n\n      <Dialog\n        fullWidth={fullWidth}\n        maxWidth={maxWidth}\n        open={open}\n        onClose={handleClose}\n      >\n        <DialogContent>\n          <Grid container spacing={2}>\n            <Grid item xs={12} sm={6} md={4}>\n              <Typography\n                variant=\"body1\"\n                color=\"primary\"\n                style={{ marginLeft: 20 }}\n              >\n                <strong>1. Select Body Part</strong>\n              </Typography>\n\n              <Box display=\"flex\" justifyContent=\"center\">\n                <img src={BodyParts} usemap=\"#image-map\" alt=\"bodyparts\" />\n\n                <map name=\"image-map\">\n                  <area\n                    target=\"\"\n                    alt=\"head\"\n                    title=\"Head\"\n                    href=\"#\"\n                    coords=\"88,8,76,14,71,21,69,33,69,41,71,50,77,60,79,74,57,85,125,84,104,74,104,63,108,55,113,39,112,29,107,16,100,11\"\n                    shape=\"poly\"\n                    onClick={()=>{\n                      getBodyPart('head');\n                    }}\n                  />\n                  <area\n                    target=\"\"\n                    alt=\"leftarm\"\n                    title=\"Arm\"\n                    href=\"#\"\n                    coords=\"42,92,32,106,33,158,25,191,22,233,8,250,8,258,9,270,15,276,29,267,33,244,33,234,43,209,46,194,53,152,54,86\"\n                    shape=\"poly\"\n                    onClick={()=>{\n                      getBodyPart('leftarm');\n                    }}\n                  />\n                  <area\n                    target=\"\"\n                    alt=\"rightarm\"\n                    title=\"Arm\"\n                    href=\"#\"\n                    coords=\"129,86,147,101,149,120,148,158,157,192,159,232,172,246,171,265,165,276,151,267,147,233,141,219,135,195,130,164,128,147\"\n                    shape=\"poly\"\n                    onClick={()=>{\n                      getBodyPart('rightarm');\n                    }}\n                  />\n                  <area\n                    target=\"\"\n                    alt=\"chest\"\n                    title=\"Chest\"\n                    href=\"#\"\n                    coords=\"54,85,128,141\"\n                    shape=\"rect\"\n                    onClick={()=>{\n                      getBodyPart('chest');\n                    }}\n                  />\n                  <area\n                    target=\"\"\n                    alt=\"abdomen\"\n                    title=\"Abdomen\"\n                    href=\"#\"\n                    coords=\"54,142,54,153,58,169,54,200,126,200,123,167,129,153,129,142\"\n                    shape=\"poly\"\n                    onClick={()=>{\n                      getBodyPart('abdomen');\n                    }}\n                  />\n                  <area\n                    target=\"\"\n                    alt=\"pelvis\"\n                    title=\"Pelvis\"\n                    href=\"#\"\n                    coords=\"54,200,47,253,135,253,127,201\"\n                    shape=\"poly\"\n                    onClick={()=>{\n                      getBodyPart('pelvis');\n                    }}\n                  />\n                  <area\n                    target=\"\"\n                    alt=\"legs\"\n                    title=\"legs\"\n                    href=\"#\"\n                    coords=\"47,272,56,303,58,336,54,354,58,383,65,433,53,449,55,459,70,465,79,444,79,432,78,413,82,379,82,346,84,305,90,266,97,305,99,334,100,352,99,363,102,395,102,416,102,434,101,444,111,463,122,462,130,451,115,433,121,398,127,356,123,334,125,305,132,273,134,253,90,253,47,253\"\n                    shape=\"poly\"\n                    onClick={()=>{\n                      getBodyPart('legs');\n                    }}\n                  />\n                </map>\n              </Box>\n            </Grid>\n            <Grid item xs={12} sm={6} md={3}>\n              <Typography\n                  variant=\"body1\"\n                  color=\"primary\"\n                  style={{ marginLeft: 20 }}\n                >\n                  <strong>2. Select organ</strong>\n              </Typography>\n              <Box\n                style={{ border: \"1px solid rgba(237, 235, 237, 1)\" }}\n                mt={5}\n                ml={2}\n              >\n                <List className={classes.bodypartList} id=\"Head\">\n                  {symList.map((text, index) => (\n                    <ListItem\n                      id={text}\n                      button\n                      selected = {selectedSym == text}\n                      key={text}\n                      onClick={getSymName.bind(this, text)}\n                    >\n                      <ListItemText primary={text} />\n                    </ListItem>\n                  ))}\n                </List>\n              </Box>\n            </Grid>\n            <Grid item xs={12} md={5}>\n              <Typography\n                variant=\"body1\"\n                color=\"primary\"\n                style={{ marginLeft: 20 }}\n              >\n                <strong>3. Select Condition</strong>\n              </Typography>\n\n              <Box\n                style={{ border: \"1px solid rgba(237, 235, 237, 1)\" }}\n                mt={2}\n                ml={2}\n              >\n                <List className={classes.conditionList}>\n                  {condition.map((text, index) => (\n                    <ListItem\n                      button\n                      key={text}\n                      selected = {selectedCondition == text}\n                      onClick={getConditionName.bind(this, text)}\n                    >\n                      <ListItemText primary={text} />\n                    </ListItem>\n                  ))}\n                </List>\n              </Box>\n              <DialogActions style={{ marginTop: 10, marginBottom: 10 }}>\n                <Button\n                  variant=\"contained\"\n                  style={{\n                    backgroundColor: \"#ff8686\",\n                    textTransform: \"none\",\n                  }}\n                  startIcon={<SearchIcon />}\n                  onClick={handleSubmit}\n                  color=\"primary\"\n                >\n                  Confirm\n                </Button>\n              </DialogActions>\n            </Grid>\n          </Grid>\n        </DialogContent>\n      </Dialog>\n    </React.Fragment>\n  );\n}\n\n//arms\n{\n  /* <List className={classes.bodypartList} id=\"arms\">\n{[\n    \"Blood\",\n    \"Bones and Joints\",\n  \"Elbow\",\n  \"Finger\",\n  \"Hand\",\n  \"Hormones\",\n  \"Lymph nodes\",\n  \"Nerves and Nervous System\",\n  \"Shoulder\",\n  \"Skin\",\n  \"Wrist\",\n].map((text, index) => (\n  <ListItem\n    button\n    key={text}\n    selected={selectedBodyPartIndex === index}\n    onClick={(event) =>\n      handleBodyPartListItemClick(event, index)\n    }\n  >\n    <ListItemText primary={text} />\n  </ListItem>\n))}\n</List> */\n}\n\n//chest\n{\n  /* <List className={classes.bodypartList} id=\"chest\">\n{[\n    \"Back\",\n    \"Blood\",\n    \"Bones and Joints\",\n    \"Breast\"\n  \"Heart\",\n  \"Hormones\",\n  \"Lungs\"\n  \"Lymph nodes\",\n  \"Nerves and Nervous System\",\n  \"Spine\",\n  \"Skin\",\n  \"Thyroid\",\n].map((text, index) => (\n  <ListItem\n    button\n    key={text}\n    selected={selectedBodyPartIndex === index}\n    onClick={(event) =>\n      handleBodyPartListItemClick(event, index)\n    }\n  >\n    <ListItemText primary={text} />\n  </ListItem>\n))}\n</List> */\n}\n\n//abdomen\n{\n  /* <List className={classes.bodypartList} id=\"abdomen\">\n{[\n    \"Appendix\"\n    \"Blood\",\n    \"Bones and Joints\",\n    \"Colon\"\n  \"Gallbladder\",\n  \"Hormones\",\n  \"Kidney\",\n  \"Liver\",\n  \"Lymph nodes\",\n  \"Nerves and Nervous System\",\n  \"Pancreas\",\n  \"Rectum\",\n  \"Skin\",\n  \"Stomach\",\n  \"Spleen\",\n\n].map((text, index) => (\n  <ListItem\n    button\n    key={text}\n    selected={selectedBodyPartIndex === index}\n    onClick={(event) =>\n      handleBodyPartListItemClick(event, index)\n    }\n  >\n    <ListItemText primary={text} />\n  </ListItem>\n))}\n</List> */\n}\n\n//pelvis\n{\n  /* <List className={classes.bodypartList} id=\"pelvis\">\n{[\n    \"Bladder\",\n    \"Blood\",\n    \"Bones and Joints\",\n    \"Groin\",\n    \"Hip\",\n  \"Hormones\",\n  \"Lymph nodes\",\n  \"Nerves and Nervous System\",\n  \"Skin\",\n  \"Uterus\",\n\n\n].map((text, index) => (\n  <ListItem\n    button\n    key={text}\n    selected={selectedBodyPartIndex === index}\n    onClick={(event) =>\n      handleBodyPartListItemClick(event, index)\n    }\n  >\n    <ListItemText primary={text} />\n  </ListItem>\n))}\n</List> */\n}\n\n//leg\n{\n  /* <List className={classes.bodypartList} id=\"leg\">\n{[\n    \"Ankle\",\n    \"Blood\",\n    \"Bones and Joints\",\n    \"Foot\",\n    \"Heel\",\n    \"Knee\",\n  \"Hormones\",\n  \"Lymph nodes\",\n  \"Nerves and Nervous System\",\n  \"Skin\",\n].map((text, index) => (\n  <ListItem\n    button\n    key={text}\n    selected={selectedBodyPartIndex === index}\n    onClick={(event) =>\n      handleBodyPartListItemClick(event, index)\n    }\n  >\n    <ListItemText primary={text} />\n  </ListItem>\n))}\n</List> */\n}\n"]},"metadata":{},"sourceType":"module"}