{"ast":null,"code":"var _jsxFileName = \"/Users/Michelle/Downloads/may4_eshin/src/Components/profile/HospTags.js\";\nimport React, { Fragment, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Divider from \"@material-ui/core/Divider\";\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\nimport PropTypes from \"prop-types\"; // ～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～\n// ～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～\n// \"hospital\"\n\nconst useStyles = makeStyles(theme => ({\n  editTagDialog: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0\n  },\n  tag: {\n    margin: theme.spacing(0.5)\n  },\n  tagDialog: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0,\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: 10\n    },\n    marginBottom: 20\n  },\n  editTagsButton: {\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: 20\n    }\n  },\n  line: {\n    [theme.breakpoints.down(\"xs\")]: {\n      border: \"5px solid rgba(0, 0, 0, 0.05)\"\n    }\n  },\n  reviewTagsBox: {\n    [theme.breakpoints.down(\"xs\")]: {\n      justifyContent: \"left\",\n      alignItems: \"left\",\n      marginLeft: 20\n    }\n  },\n  divider: {\n    height: 2,\n    width: 115,\n    backgroundColor: \"#FF8686\"\n  }\n})); // Edit Hospital Tags (用在HospInfo.js)\n// 目前hospital所有的tags and edit tags 都是hardcoded， 麻烦你了\n\nfunction HospTags(props) {\n  const classes = useStyles();\n  const authenticated = props.authenticated;\n  const [allTags, setState] = React.useState({\n    currentTags: [],\n    storedUserTags: []\n  });\n  const [renderCount, setRenderCount] = React.useState(0); // only call useEffect if renderCount = 0 (will be updated to 1 if stored data\n  // in firebase is successfully set to state)\n\n  useEffect(() => {\n    if (renderCount == 0) {\n      return displayStoredData();\n    }\n  }, [allTags]);\n\n  const displayStoredData = () => {\n    // call function to get data from returned props from firebase\n    getStoredData().then(res => {\n      // set state\n      let userStored;\n\n      if (!res[1].addedHospitalTags) {\n        userStored = \"\";\n      } else {\n        if (!res[1].addedHospitalTags.PantaiHospitalKualaLumpur) {\n          userStored = \"\";\n        } else {\n          userStored = res[1].addedHospitalTags.PantaiHospitalKualaLumpur;\n        }\n      }\n\n      setState({\n        currentTags: res[0].tags ? res[0].tags : \"\",\n        storedUserTags: userStored\n      }); // update renderCount to 1 to stop react from making any more useEffect call\n\n      setRenderCount(1);\n    }).catch(error => {\n      console.error(error);\n    });\n  }; // wait for returned props from firebase to be ready\n\n\n  let getStoredData = async () => {\n    // making two asynchronous calls: one from searchInfo and one from user credentials info\n    let [storedSearchInfo, userStoredCredentials] = await Promise.all([props.hospSearchInfo, props.storedCredentials]);\n    return [storedSearchInfo, userStoredCredentials];\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = value => {\n    setOpen(false);\n  }; // add or remove doctor review tags: make changes to both the current hospital and user stored tags\n\n\n  const addRemoveTag = tag => {\n    let currentTagsCopy = allTags.currentTags; // if currentTagsCopy doesn't exist (no tags have been selected for this hospital before),\n    // assign index -1 (not found)\n\n    let currentTagIndex = currentTagsCopy ? currentTagsCopy.findIndex(eachTag => eachTag.tagName == tag) : -1;\n    let userStoredTagsCopy = allTags.storedUserTags; // if the userStoredTagsCopy doesn't exist (the user has never selected any tags for this\n    // doctor before), assign index -1\n\n    let userStoredTagIndex = userStoredTagsCopy ? userStoredTagsCopy.indexOf(tag) : -1; // if the tag has been selected by user, which means it should also exist\n    // in the database\n\n    if (userStoredTagIndex !== -1) {\n      // remove from user selected tag list in the modal\n      userStoredTagsCopy.splice(userStoredTagIndex, 1); // decrease this tag's count for this doctor in database; this tag should\n      // have already existed in the database since the user selected it\n\n      currentTagsCopy[currentTagIndex].count--;\n\n      if (currentTagsCopy[currentTagIndex].count == 0) {\n        currentTagsCopy.splice(currentTagIndex, 1);\n      }\n\n      setState({\n        currentTags: currentTagsCopy,\n        storedUserTags: userStoredTagsCopy\n      }); // the tag hasn't been selected by the user\n    } else {\n      // if the tag already exists in the database (other users had selected this\n      //  tag for this doctor)\n      if (currentTagIndex !== -1) {\n        // increase the count for this tag in database by 1\n        currentTagsCopy[currentTagIndex].count++;\n        setState(prevState => ({\n          currentTags: currentTagsCopy,\n          // add the new tag to this user's tag list\n          storedUserTags: [...prevState.storedUserTags, tag]\n        })); // the tag doesn't exist in the database; this is the first time a user\n        // selects this tag\n      } else {\n        setState(prevState => ({\n          // if currentTags exist (doctor had users added tags for him before), add the new tag to the list\n          // otherwise (no one had added tags for the doctor before), use the new tag to start the list\n          currentTags: allTags.currentTags ? [...prevState.currentTags, {\n            tagName: tag,\n            count: 1\n          }] : [{\n            tagName: tag,\n            count: 1\n          }],\n          // if the user has selected tags for this doctor before, add the new tag to the list\n          // otherwise, use the new tag to start a list\n          storedUserTags: allTags.storedUserTags ? [...prevState.storedUserTags, tag] : [tag]\n        }));\n      }\n    }\n  }; // 这是点进去edit tags 会出现的tags选项\n\n\n  const [editTags, displayEditedTags] = React.useState([{\n    key: 0,\n    label: \"Clean\"\n  }, {\n    key: 1,\n    label: \"Customer Service\"\n  }, {\n    key: 2,\n    label: \"Modern\"\n  }, {\n    key: 3,\n    label: \"Organized \"\n  }, {\n    key: 4,\n    label: \"Reliable\"\n  }, {\n    key: 5,\n    label: \"Spacious \"\n  }, {\n    key: 6,\n    label: \"Welcoming\"\n  }, {\n    key: 7,\n    label: \"Well-equipped\"\n  }]); // 这里我想说点了一个tag，就会换色（从outlined 换成default)\n  // 但是我不会写那个logic,所以目前是点了一个tag,所有tag都一起换色了。。麻烦你了\n  // 还有需要弄一个logic是 user再点一次又会换成原来outlined的style,麻烦你了\n\n  const [color, setColor] = React.useState(\"outlined\");\n\n  const handleClick = () => {\n    setColor(\"default\");\n  }; // create a tag list that contains all tags for this hospital\n\n\n  let tagList = [];\n  props.tagInfo.map(tag => {\n    tagList.push( /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      key: tag.TagName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Chip, {\n      label: tag.TagName + ' (' + tag.Number + ')',\n      className: classes.tag,\n      color: \"secondary\",\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }\n    }))));\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Hidden, {\n    smUp: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"hr\", {\n    className: classes.line,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    mt: 2,\n    mb: 2,\n    display: \"flex\",\n    flexDirection: \"column\",\n    className: classes.reviewTagsBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 11\n    }\n  }, \"Review Tags\"), /*#__PURE__*/React.createElement(Divider, {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.tagDialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }\n  }, tagList, \" \", authenticated ? /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    startIcon: /*#__PURE__*/React.createElement(EditOutlinedIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 24\n      }\n    }),\n    onClick: handleClickOpen,\n    style: {\n      textTransform: \"none\"\n    },\n    className: classes.editTagsButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 11\n    }\n  }, \"Edit Tags\") : \"\"), /*#__PURE__*/React.createElement(Dialog, {\n    onClose: handleClose,\n    open: open,\n    maxWidth: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"Body\",\n    style: {\n      margin: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }\n  }, \"Please select tag(s) that best describe this hospital from the list below:\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.editTagDialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }\n  }, editTags.map(tag => {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      key: tag.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Chip, {\n      label: tag.label,\n      className: classes.tag,\n      color: \"secondary\",\n      variant: color,\n      onClick: handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 19\n      }\n    })));\n  })), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleClose,\n    variant: \"outlined\",\n    color: \"primary\",\n    style: {\n      textTransform: \"none\",\n      margin: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 11\n    }\n  }, \"Done\"))));\n}\n\nHospTags.propTypes = {// updateUserStoredDocTags: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  authenticated: state.user.authenticated,\n  storedCredentials: state.user.credentials,\n  hospSearchInfo: state.data.hospSearchInfo\n});\n\nconst mapActionsToProps = {// updateUserStoredDocTags,\n  // updateDoctorTags\n};\nexport default connect(mapStateToProps, mapActionsToProps)(HospTags);","map":{"version":3,"sources":["/Users/Michelle/Downloads/may4_eshin/src/Components/profile/HospTags.js"],"names":["React","Fragment","useEffect","connect","makeStyles","Dialog","Chip","Button","Box","Typography","DialogActions","Hidden","Divider","EditOutlinedIcon","PropTypes","useStyles","theme","editTagDialog","display","justifyContent","flexWrap","listStyle","padding","spacing","margin","tag","tagDialog","breakpoints","down","marginLeft","marginBottom","editTagsButton","line","border","reviewTagsBox","alignItems","divider","height","width","backgroundColor","HospTags","props","classes","authenticated","allTags","setState","useState","currentTags","storedUserTags","renderCount","setRenderCount","displayStoredData","getStoredData","then","res","userStored","addedHospitalTags","PantaiHospitalKualaLumpur","tags","catch","error","console","storedSearchInfo","userStoredCredentials","Promise","all","hospSearchInfo","storedCredentials","open","setOpen","handleClickOpen","handleClose","value","addRemoveTag","currentTagsCopy","currentTagIndex","findIndex","eachTag","tagName","userStoredTagsCopy","userStoredTagIndex","indexOf","splice","count","prevState","editTags","displayEditedTags","key","label","color","setColor","handleClick","tagList","tagInfo","map","push","TagName","Number","textTransform","propTypes","mapStateToProps","state","user","credentials","data","mapActionsToProps"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Divider from \"@material-ui/core/Divider\";\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\n\nimport PropTypes from \"prop-types\";\n\n\n// ～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～\n// ～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～～\n// \"hospital\"\n\nconst useStyles = makeStyles((theme) => ({\n  editTagDialog: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0,\n  },\n\n  tag: {\n    margin: theme.spacing(0.5),\n  },\n\n  tagDialog: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0,\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: 10,\n    },\n    marginBottom: 20,\n  },\n\n  editTagsButton: {\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: 20,\n    },\n  },\n\n  line: {\n    [theme.breakpoints.down(\"xs\")]: {\n      border: \"5px solid rgba(0, 0, 0, 0.05)\",\n    },\n  },\n\n  reviewTagsBox: {\n    [theme.breakpoints.down(\"xs\")]: {\n      justifyContent: \"left\",\n      alignItems: \"left\",\n      marginLeft: 20,\n    },\n  },\n\n  divider: {\n    height: 2,\n    width: 115,\n    backgroundColor: \"#FF8686\",\n  },\n}));\n\n// Edit Hospital Tags (用在HospInfo.js)\n// 目前hospital所有的tags and edit tags 都是hardcoded， 麻烦你了\nfunction HospTags(props) {\n  const classes = useStyles();\n  const authenticated = props.authenticated;\n\n  const [allTags, setState] = React.useState({\n    currentTags: [],\n    storedUserTags: []\n  })\n\n  const [renderCount, setRenderCount] = React.useState(0);\n\n  // only call useEffect if renderCount = 0 (will be updated to 1 if stored data\n  // in firebase is successfully set to state)\n  useEffect(() => {\n    if (renderCount == 0) {\n      return displayStoredData();\n    }\n  }, [allTags]);\n\n  const displayStoredData = () => {\n    // call function to get data from returned props from firebase\n    getStoredData()\n      .then((res) => {\n        // set state\n        let userStored;\n        if (!res[1].addedHospitalTags) {\n          userStored = \"\";\n        } else {\n          if (!res[1].addedHospitalTags.PantaiHospitalKualaLumpur) {\n            userStored = \"\";\n          } else {\n            userStored = res[1].addedHospitalTags.PantaiHospitalKualaLumpur;\n          }\n        }\n        setState({\n          currentTags: res[0].tags ? res[0].tags : \"\",\n          storedUserTags: userStored\n        })\n        // update renderCount to 1 to stop react from making any more useEffect call\n        setRenderCount(1);\n      }).catch((error) => {\n        console.error(error);\n      })\n  }\n\n  // wait for returned props from firebase to be ready\n  let getStoredData = async () => {\n    // making two asynchronous calls: one from searchInfo and one from user credentials info\n    let [storedSearchInfo, userStoredCredentials] =\n      await Promise.all([props.hospSearchInfo, props.storedCredentials]);\n    return [storedSearchInfo, userStoredCredentials];\n  }\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (value) => {\n    setOpen(false);\n  };\n\n  // add or remove doctor review tags: make changes to both the current hospital and user stored tags\n  const addRemoveTag = (tag) => {\n    let currentTagsCopy = allTags.currentTags;\n    // if currentTagsCopy doesn't exist (no tags have been selected for this hospital before),\n    // assign index -1 (not found)\n    let currentTagIndex = currentTagsCopy ? currentTagsCopy.findIndex(eachTag => eachTag.tagName == tag) : -1;\n\n    let userStoredTagsCopy = allTags.storedUserTags;\n    // if the userStoredTagsCopy doesn't exist (the user has never selected any tags for this\n    // doctor before), assign index -1\n    let userStoredTagIndex = userStoredTagsCopy ? userStoredTagsCopy.indexOf(tag) : -1;\n\n    // if the tag has been selected by user, which means it should also exist\n    // in the database\n    if (userStoredTagIndex !== -1) {\n      // remove from user selected tag list in the modal\n      userStoredTagsCopy.splice(userStoredTagIndex, 1);\n      // decrease this tag's count for this doctor in database; this tag should\n      // have already existed in the database since the user selected it\n      currentTagsCopy[currentTagIndex].count--;\n      if (currentTagsCopy[currentTagIndex].count == 0) {\n        currentTagsCopy.splice(currentTagIndex, 1);\n      }\n      setState({\n        currentTags: currentTagsCopy,\n        storedUserTags: userStoredTagsCopy\n      })\n      // the tag hasn't been selected by the user\n    } else {\n      // if the tag already exists in the database (other users had selected this\n      //  tag for this doctor)\n      if (currentTagIndex !== -1) {\n        // increase the count for this tag in database by 1\n        currentTagsCopy[currentTagIndex].count++;\n\n        setState(prevState => ({\n          currentTags: currentTagsCopy,\n          // add the new tag to this user's tag list\n          storedUserTags: [\n            ...prevState.storedUserTags, tag\n          ]\n        }))\n        // the tag doesn't exist in the database; this is the first time a user\n        // selects this tag\n      } else {\n        setState(prevState => ({\n          // if currentTags exist (doctor had users added tags for him before), add the new tag to the list\n          // otherwise (no one had added tags for the doctor before), use the new tag to start the list\n          currentTags: allTags.currentTags ? [\n            ...prevState.currentTags, { tagName: tag, count: 1 }\n          ] : [ { tagName: tag, count: 1 } ],\n          // if the user has selected tags for this doctor before, add the new tag to the list\n          // otherwise, use the new tag to start a list\n          storedUserTags: allTags.storedUserTags ? [\n            ...prevState.storedUserTags, tag\n          ] : [ tag ]\n        }))\n      }\n    }\n  }\n\n\n\n  // 这是点进去edit tags 会出现的tags选项\n  const [editTags, displayEditedTags] = React.useState([\n    { key: 0, label: \"Clean\" },\n    { key: 1, label: \"Customer Service\" },\n    { key: 2, label: \"Modern\" },\n    { key: 3, label: \"Organized \" },\n    { key: 4, label: \"Reliable\" },\n    { key: 5, label: \"Spacious \" },\n    { key: 6, label: \"Welcoming\" },\n    { key: 7, label: \"Well-equipped\" },\n  ]);\n\n\n\n  // 这里我想说点了一个tag，就会换色（从outlined 换成default)\n  // 但是我不会写那个logic,所以目前是点了一个tag,所有tag都一起换色了。。麻烦你了\n  // 还有需要弄一个logic是 user再点一次又会换成原来outlined的style,麻烦你了\n  const [color, setColor] = React.useState(\"outlined\");\n  const handleClick = () => {\n    setColor(\"default\");\n  };\n\n  // create a tag list that contains all tags for this hospital\n  let tagList = [];\n  props.tagInfo.map((tag) => {\n    tagList.push((\n      <Fragment>\n        <li key={tag.TagName}>\n          <Chip\n            label={tag.TagName + ' (' + tag.Number + ')'}\n            className={classes.tag}\n            color=\"secondary\"\n            size=\"small\"\n          />\n        </li>\n      </Fragment>\n    ));\n  })\n\n  return (\n    <div>\n      <Hidden smUp>\n        <hr className={classes.line}></hr>\n        <Box\n          mt={2}\n          mb={2}\n          display=\"flex\"\n          flexDirection=\"column\"\n          className={classes.reviewTagsBox}\n        >\n          <Typography variant=\"h6\" color=\"primary\">\n            Review Tags\n          </Typography>\n          <Divider className={classes.divider} />\n        </Box>\n      </Hidden>\n      {/* 显示这个hospital现在有的tags, 目前是hardcoded的， 麻烦你了 */}\n      <div className={classes.tagDialog}>\n        {tagList}{\" \"}\n        {/* 如果登入了，edit tags的button会出现，否则不会出现 */}\n        {authenticated ? (\n          <Button\n            color=\"primary\"\n            startIcon={<EditOutlinedIcon />}\n            onClick={handleClickOpen}\n            style={{ textTransform: \"none\" }}\n            className={classes.editTagsButton}\n          >\n            Edit Tags\n          </Button>\n        ) : (\n          \"\"\n        )}\n      </div>\n\n      <Dialog onClose={handleClose} open={open} maxWidth=\"xs\">\n        <Typography variant=\"Body\" style={{ margin: 20 }}>\n          Please select tag(s) that best describe this hospital from the list\n          below:\n        </Typography>\n        {/* 弹窗出现所有tags选项 */}\n        <div className={classes.editTagDialog}>\n          {editTags.map((tag) => {\n            return (\n              <Fragment>\n                <li key={tag.key}>\n                  <Chip\n                    label={tag.label}\n                    className={classes.tag}\n                    color=\"secondary\"\n                    variant={color}\n                    onClick={handleClick}\n                  />\n                </li>\n              </Fragment>\n            );\n          })}\n        </div>\n\n        {/* Done button， 目前是点了就关掉窗口，没有save user点了什么 */}\n        <DialogActions>\n          <Button\n            onClick={handleClose}\n            variant=\"outlined\"\n            color=\"primary\"\n            style={{ textTransform: \"none\", margin: 10 }}\n          >\n            Done\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\n\nHospTags.propTypes = {\n  // updateUserStoredDocTags: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  authenticated: state.user.authenticated,\n  storedCredentials: state.user.credentials,\n  hospSearchInfo: state.data.hospSearchInfo\n});\n\nconst mapActionsToProps = {\n  // updateUserStoredDocTags,\n  // updateDoctorTags\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(HospTags);"]},"metadata":{},"sourceType":"module"}