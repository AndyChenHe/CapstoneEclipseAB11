{"ast":null,"code":"var _jsxFileName = \"/Users/Michelle/Downloads/may10_michelle/src/Components/docAccount/DocSideNav.js\";\nimport React, { Fragment, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport Chip from \"@material-ui/core/Chip\";\nimport FavoriteOutlinedIcon from \"@material-ui/icons/FavoriteBorderOutlined\";\nimport PersonIcon from \"@material-ui/icons/PersonOutlined\";\nimport BookmarkIcon from \"@material-ui/icons/BookmarkBorderOutlined\";\nimport VerifiedUserIcon from \"@material-ui/icons/VerifiedUserOutlined\";\nimport SettingsIcon from \"@material-ui/icons/SettingsOutlined\";\nimport ErrorOutlineOutlinedIcon from \"@material-ui/icons/ErrorOutlineOutlined\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Badge from \"@material-ui/core/Badge\";\nimport AddAPhotoIcon from \"@material-ui/icons/AddAPhoto\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport { changeProfilePic } from \"../../redux/actions/userActions\";\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n    minHeight: \"100vh\",\n    [theme.breakpoints.down(\"sm\")]: {\n      \"& .MuiListItem-root\": {\n        borderBottom: \"10px solid rgba(237, 235, 237, 0.4)\",\n        backgroundColor: \"rgba(255, 255, 255, 100)\"\n      },\n      backgroundColor: \"rgba(237, 235, 237, 0.4)\"\n    },\n    [theme.breakpoints.up(\"md\")]: {\n      borderRight: \"1px solid rgba(237, 235, 237, 1)\"\n    }\n  },\n  img: {\n    width: theme.spacing(12),\n    height: theme.spacing(12),\n    objectFit: \"contain\"\n  },\n  likeBox: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  tag: {\n    margin: theme.spacing(0.4)\n  },\n  tagBox: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: 10\n    },\n    marginBottom: 20\n  }\n})); //Doctor Account 左边的navigation\n\nfunction DocSideNav(props) {\n  const classes = useStyles(); // determine if useEffect will be called: don't call if renderCount = 1\n\n  const [renderCount, setRenderCount] = React.useState(0);\n  const [userInfo, setState] = React.useState({\n    userType: \"\",\n    profilePic: \"\",\n    tags: [],\n    username: \"\",\n    likes: 0\n  }); // initial render: only gets called once\n\n  useEffect(() => {\n    if (renderCount == 0) {\n      return displayStoredData();\n    }\n  }); // to store fetched data\n\n  let returnedInfo = [];\n\n  const displayStoredData = () => {\n    fetchData().then(res => {\n      // if res exists (if the second async function did run), add res to returnedInfo\n      if (res) {\n        returnedInfo.push(res);\n      }\n\n      console.log(returnedInfo); // let credentials = returnedInfo[0].data.credentials;\n\n      let username = returnedInfo[0].username;\n      let storedTags;\n      let likes; // if we did not go into search data --> no specialty exists\n\n      if (returnedInfo.length == 1) {\n        storedTags = \"\";\n        likes = 0;\n      } else {\n        let specialty = returnedInfo[0].profile.specialty;\n        let hospital = returnedInfo[0].profile.hospital.replace(/\\s+/g, \"\");\n        console.log(specialty);\n        let doctorInfo = returnedInfo[1].data[specialty].hospitals[hospital].doctors[username];\n        storedTags = doctorInfo.tags ? doctorInfo.tags : \"\";\n        likes = doctorInfo.likes ? doctorInfo.likes : 0;\n      }\n\n      setState({\n        userType: returnedInfo[0].userType,\n        profilePic: returnedInfo[0].imgSrc,\n        tags: storedTags,\n        username: username,\n        likes: likes\n      }); // if (username) {\n\n      setRenderCount(1); // }\n    }).catch(error => {\n      console.error(error);\n    });\n  }; // overall fetching function\n\n\n  let fetchData = async () => {\n    // wait for the first async function to finish before peoceeding\n    return await getStoredCredentials().then(res => {\n      // add result from the first async function to returnedInfo\n      const credentials = res.data.credentials;\n      returnedInfo.push(credentials); // check to see if a field returned from the first async function exists\n\n      if (credentials.userType == \"doctor\" && credentials.profile.specialty) {\n        // if yes, use it to proceed the second async function\n        return getSpecialtyData(credentials.profile.specialty);\n      } // }\n\n    });\n  };\n\n  let getStoredCredentials = async () => {\n    // let userStoredCredentials = await props.storedCredentials;\n    let userStoredCredentials = await axios.get(proxyurl + axios.defaults.baseURL + \"user\");\n    return userStoredCredentials;\n  };\n\n  let getSpecialtyData = async searchSpecialty => {\n    let specialtyData = await getAllSearchData;\n    await axios.get(proxyurl + axios.defaults.baseURL + \"getallsearchdata\", {\n      params: {\n        specialty: searchSpecialty\n      }\n    });\n    return specialtyData;\n  }; // reads new image and sets state\n\n\n  const uploadProfilePicture = event => {\n    let reader = new FileReader();\n    let uploaded = event.target.files[0];\n\n    if (uploaded) {\n      reader.readAsDataURL(uploaded);\n    }\n\n    reader.onload = () => {\n      setState({ ...userInfo,\n        profilePic: reader.result\n      });\n    };\n  }; // wait for the newly uploaded image to be updated to state and post to firebase\n\n\n  useEffect(() => {\n    if (renderCount == 1) {\n      return postProfilePic();\n    }\n  }, [userInfo.profilePic]);\n\n  const postProfilePic = () => {\n    waitProfileUpdate().then(imgSrc => {\n      const imgSrcVar = {\n        imgSrc: imgSrc\n      };\n      props.changeProfilePic(imgSrcVar);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  let waitProfileUpdate = async () => {\n    let newProfilePic = await userInfo.profilePic;\n    return newProfilePic;\n  }; // create a tag list that contains all tags for this doctor\n\n\n  let tagList = userInfo.tags ? userInfo.tags.map(tag => {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: tag.tagName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      key: tag.tagName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Chip, {\n      label: tag.tagName + ' (' + tag.count + ')',\n      className: classes.tag,\n      color: \"secondary\",\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }\n    })));\n  }) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 8\n    }\n  }, \"No review tags yet\"); //选\blist item (profile, saved, like history, acc verification, acc settings)\n\n  const [selectedIndex, setSelectedIndex] = React.useState();\n\n  const handleListItemClick = (event, index) => {\n    setSelectedIndex(index);\n  }; //tooltip first time user instruction\n\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleTooltipClose = () => {\n    setOpen(false);\n  };\n\n  const handleTooltipOpen = () => {\n    setOpen(true);\n  };\n\n  if (!userInfo.username) {\n    // loading spinner if prop data is not yet available\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CircularProgress, {\n      color: \"secondary\",\n      style: {\n        marginLeft: '45%',\n        marginTop: '5%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.root,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(List, {\n      component: \"nav\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      mt: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.uploadImg,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      accept: \"image/*\",\n      style: {\n        display: \"none\"\n      },\n      id: \"contained-button-profile-pic\",\n      multiple: true,\n      type: \"file\",\n      onChange: uploadProfilePicture,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"contained-button-profile-pic\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Badge, {\n      style: {\n        cursor: \"pointer\"\n      },\n      overlap: \"circle\",\n      anchorOrigin: {\n        vertical: \"bottom\",\n        horizontal: \"right\"\n      },\n      badgeContent: /*#__PURE__*/React.createElement(AddAPhotoIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 35\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Avatar, {\n      className: classes.img,\n      alt: \"doctor profile picture\",\n      src: userInfo.profilePic,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 21\n      }\n    })))), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h6\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 15\n      }\n    }, \"Hi, \", userInfo.username, \"!\"), userInfo.userType == \"doctor\" ? /*#__PURE__*/React.createElement(Box, {\n      className: classes.likeBox,\n      mt: 2,\n      mb: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FavoriteIcon, {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body2\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 19\n      }\n    }, \"\\xA0\", userInfo.likes)) : /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 19\n      }\n    }), userInfo.userType == \"doctor\" ? /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.tagBox,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 15\n      }\n    }, tagList) : /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 19\n      }\n    })), userInfo.userType == \"doctor\" ? /*#__PURE__*/React.createElement(ListItem, {\n      button: true,\n      selected: selectedIndex === 0,\n      onClick: event => handleListItemClick(event, 0),\n      component: \"a\",\n      href: \"/profile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(ListItemIcon, {\n      style: {\n        marginLeft: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(PersonIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(ListItemText, {\n      primary: \"Profile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      disableFocusListener: true,\n      placement: \"right\",\n      title: /*#__PURE__*/React.createElement(\"h2\", {\n        style: {\n          fontWeight: \"normal\",\n          lineHeight: 1.5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 21\n        }\n      }, \"2. Set up your profile \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 46\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 23\n        }\n      }), \"Add your personal, work, and expertise information.\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ErrorOutlineOutlinedIcon, {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 19\n      }\n    }))) : \"\", /*#__PURE__*/React.createElement(ListItem, {\n      button: true,\n      selected: selectedIndex === 1,\n      onClick: event => handleListItemClick(event, 1),\n      component: \"a\",\n      href: \"/saved\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ListItemIcon, {\n      style: {\n        marginLeft: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(BookmarkIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(ListItemText, {\n      primary: \"Saved\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(ListItem, {\n      button: true,\n      selected: selectedIndex === 2,\n      onClick: event => handleListItemClick(event, 2),\n      component: \"a\",\n      href: \"/likehistory\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ListItemIcon, {\n      style: {\n        marginLeft: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(FavoriteOutlinedIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(ListItemText, {\n      primary: \"Like History\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 15\n      }\n    })), userInfo.userType == \"doctor\" ? /*#__PURE__*/React.createElement(ListItem, {\n      button: true,\n      selected: selectedIndex === 3,\n      onClick: event => handleListItemClick(event, 3),\n      style: {\n        position: \"relative\"\n      },\n      component: \"a\",\n      href: \"/accountverification\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ListItemIcon, {\n      style: {\n        marginLeft: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(VerifiedUserIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(ListItemText, {\n      primary: \"Account Verification\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Tooltip, {\n      disableFocusListener: true,\n      placement: \"right\",\n      title: /*#__PURE__*/React.createElement(\"h2\", {\n        style: {\n          fontWeight: \"normal\",\n          lineHeight: 1.5\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 19\n        }\n      }, \"Welcome Alex! Before you start: \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 53\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 21\n        }\n      }), \"1. Verify your account \", /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 44\n        }\n      }), /*#__PURE__*/React.createElement(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 21\n        }\n      }), \"Once you verified your account, you will be able to publish your profile.\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(ErrorOutlineOutlinedIcon, {\n      style: {\n        color: \"red\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 17\n      }\n    }))) : \"\", /*#__PURE__*/React.createElement(ListItem, {\n      button: true,\n      selected: selectedIndex === 4,\n      onClick: event => handleListItemClick(event, 4),\n      component: \"a\",\n      href: \"/accountsettings\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ListItemIcon, {\n      style: {\n        marginLeft: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(SettingsIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(ListItemText, {\n      primary: \"Account Settings\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 15\n      }\n    })))));\n  }\n}\n\nDocSideNav.propTypes = {\n  changeProfilePic: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  user: state.user,\n  storedCredentials: state.user.credentials,\n  searchUserInfo: state.data.doctorUserInfo\n});\n\nconst mapActionsToProps = {\n  changeProfilePic\n};\nexport default connect(mapStateToProps, mapActionsToProps)(DocSideNav);","map":{"version":3,"sources":["/Users/Michelle/Downloads/may10_michelle/src/Components/docAccount/DocSideNav.js"],"names":["React","Fragment","useEffect","makeStyles","List","ListItem","ListItemIcon","ListItemText","Avatar","Box","Typography","FavoriteIcon","Chip","FavoriteOutlinedIcon","PersonIcon","BookmarkIcon","VerifiedUserIcon","SettingsIcon","ErrorOutlineOutlinedIcon","Tooltip","Badge","AddAPhotoIcon","CircularProgress","connect","PropTypes","axios","changeProfilePic","proxyurl","useStyles","theme","root","width","height","minHeight","breakpoints","down","borderBottom","backgroundColor","up","borderRight","img","spacing","objectFit","likeBox","display","flexDirection","justifyContent","alignItems","tag","margin","tagBox","flexWrap","listStyle","padding","marginLeft","marginBottom","DocSideNav","props","classes","renderCount","setRenderCount","useState","userInfo","setState","userType","profilePic","tags","username","likes","displayStoredData","returnedInfo","fetchData","then","res","push","console","log","storedTags","length","specialty","profile","hospital","replace","doctorInfo","data","hospitals","doctors","imgSrc","catch","error","getStoredCredentials","credentials","getSpecialtyData","userStoredCredentials","get","defaults","baseURL","searchSpecialty","specialtyData","getAllSearchData","params","uploadProfilePicture","event","reader","FileReader","uploaded","target","files","readAsDataURL","onload","result","postProfilePic","waitProfileUpdate","imgSrcVar","newProfilePic","tagList","map","tagName","count","selectedIndex","setSelectedIndex","handleListItemClick","index","open","setOpen","handleTooltipClose","handleTooltipOpen","marginTop","uploadImg","cursor","vertical","horizontal","color","fontWeight","lineHeight","position","propTypes","func","isRequired","mapStateToProps","state","user","storedCredentials","searchUserInfo","doctorUserInfo","mapActionsToProps"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport Chip from \"@material-ui/core/Chip\";\nimport FavoriteOutlinedIcon from \"@material-ui/icons/FavoriteBorderOutlined\";\nimport PersonIcon from \"@material-ui/icons/PersonOutlined\";\nimport BookmarkIcon from \"@material-ui/icons/BookmarkBorderOutlined\";\nimport VerifiedUserIcon from \"@material-ui/icons/VerifiedUserOutlined\";\nimport SettingsIcon from \"@material-ui/icons/SettingsOutlined\";\nimport ErrorOutlineOutlinedIcon from \"@material-ui/icons/ErrorOutlineOutlined\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Badge from \"@material-ui/core/Badge\";\nimport AddAPhotoIcon from \"@material-ui/icons/AddAPhoto\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\n\n\nimport { changeProfilePic } from \"../../redux/actions/userActions\";\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n    minHeight: \"100vh\",\n    [theme.breakpoints.down(\"sm\")]: {\n      \"& .MuiListItem-root\": {\n        borderBottom: \"10px solid rgba(237, 235, 237, 0.4)\",\n        backgroundColor: \"rgba(255, 255, 255, 100)\",\n      },\n      backgroundColor: \"rgba(237, 235, 237, 0.4)\",\n    },\n\n    [theme.breakpoints.up(\"md\")]: {\n      borderRight: \"1px solid rgba(237, 235, 237, 1)\",\n    },\n  },\n\n  img: {\n    width: theme.spacing(12),\n    height: theme.spacing(12),\n    objectFit: \"contain\",\n  },\n\n  likeBox: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n\n  tag: {\n    margin: theme.spacing(0.4),\n  },\n\n  tagBox: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: 10,\n    },\n    marginBottom: 20,\n  },\n}));\n\n//Doctor Account 左边的navigation\nfunction DocSideNav(props) {\n  const classes = useStyles();\n\n\n  // determine if useEffect will be called: don't call if renderCount = 1\n  const [renderCount, setRenderCount] = React.useState(0);\n\n\n  const [userInfo, setState] = React.useState({\n    userType: \"\",\n    profilePic: \"\",\n    tags: [],\n    username: \"\",\n    likes: 0\n  })\n\n\n\n  // initial render: only gets called once\n  useEffect(() => {\n    if (renderCount == 0) {\n      return displayStoredData();\n    }\n  });\n\n  // to store fetched data\n  let returnedInfo = [];\n\n  const displayStoredData = () => {\n    fetchData()\n      .then((res) => {\n        // if res exists (if the second async function did run), add res to returnedInfo\n        if (res) {\n          returnedInfo.push(res);\n        }\n        console.log(returnedInfo)\n\n        // let credentials = returnedInfo[0].data.credentials;\n        let username = returnedInfo[0].username;\n\n        let storedTags;\n        let likes;\n\n        // if we did not go into search data --> no specialty exists\n        if (returnedInfo.length == 1) {\n          storedTags = \"\";\n          likes = 0;\n        } else {\n          let specialty = returnedInfo[0].profile.specialty;\n          let hospital = returnedInfo[0].profile.hospital.replace(/\\s+/g, \"\");\n          console.log(specialty)\n\n          let doctorInfo = returnedInfo[1].data[specialty].hospitals[hospital].doctors[username];\n          storedTags = doctorInfo.tags ? doctorInfo.tags : \"\";\n          likes = doctorInfo.likes ? doctorInfo.likes : 0;\n        }\n\n\n        setState({\n          userType: returnedInfo[0].userType,\n          profilePic: returnedInfo[0].imgSrc,\n          tags: storedTags,\n          username: username,\n          likes: likes\n        })\n\n\n        // if (username) {\n          setRenderCount(1);\n        // }\n      }).catch((error) => {\n        console.error(error);\n      })\n  }\n\n\n  // overall fetching function\n  let fetchData = async () => {\n    // wait for the first async function to finish before peoceeding\n    return await getStoredCredentials()\n      .then((res) => {\n        // add result from the first async function to returnedInfo\n        const credentials = res.data.credentials;\n        returnedInfo.push(credentials);\n        // check to see if a field returned from the first async function exists\n        if (credentials.userType == \"doctor\" && credentials.profile.specialty) {\n          // if yes, use it to proceed the second async function\n          return getSpecialtyData(credentials.profile.specialty);\n        }\n        // }\n      });\n  }\n\n\n  let getStoredCredentials = async () => {\n    // let userStoredCredentials = await props.storedCredentials;\n    let userStoredCredentials = await axios.get(proxyurl + axios.defaults.baseURL + \"user\");\n    return userStoredCredentials;\n  }\n\n\n  let getSpecialtyData = async (searchSpecialty) => {\n    let specialtyData = await getAllSearchData\n      await axios.get(proxyurl + axios.defaults.baseURL + \"getallsearchdata\",\n        {\n          params: {\n            specialty: searchSpecialty\n          }\n        });\n    return specialtyData;\n  }\n\n\n\n\n  // reads new image and sets state\n  const uploadProfilePicture = (event) => {\n    let reader = new FileReader();\n    let uploaded = event.target.files[0];\n    if (uploaded) {\n      reader.readAsDataURL(uploaded);\n    }\n    reader.onload = () => {\n      setState({\n        ...userInfo,\n        profilePic: reader.result\n      })\n    };\n  };\n\n\n\n  // wait for the newly uploaded image to be updated to state and post to firebase\n  useEffect(() => {\n    if (renderCount == 1) {\n      return postProfilePic();\n    }\n  }, [userInfo.profilePic]);\n\n  const postProfilePic = () => {\n    waitProfileUpdate()\n      .then((imgSrc) => {\n        const imgSrcVar = {\n          imgSrc: imgSrc\n        }\n        props.changeProfilePic(imgSrcVar);\n      }).catch((error) => {\n        console.error(error);\n      });\n  }\n\n  let waitProfileUpdate = async () => {\n    let newProfilePic = await userInfo.profilePic;\n    return newProfilePic;\n  }\n\n  // create a tag list that contains all tags for this doctor\n  let tagList = (userInfo.tags) ? userInfo.tags.map(tag => {\n    return (\n      <Fragment key={tag.tagName}>\n        <li key={tag.tagName}>\n          <Chip\n            label={tag.tagName + ' (' + tag.count + ')'}\n            className={classes.tag}\n            color=\"secondary\"\n            size=\"small\"\n          />\n        </li>\n      </Fragment>\n    )\n  }) : <p>No review tags yet</p>;\n\n\n\n\n\n\n\n  //选\blist item (profile, saved, like history, acc verification, acc settings)\n  const [selectedIndex, setSelectedIndex] = React.useState();\n\n  const handleListItemClick = (event, index) => {\n    setSelectedIndex(index);\n  };\n\n  //tooltip first time user instruction\n  const [open, setOpen] = React.useState(false);\n  const handleTooltipClose = () => {\n    setOpen(false);\n  };\n  const handleTooltipOpen = () => {\n    setOpen(true);\n  };\n\n\n  if (!userInfo.username) {\n    // loading spinner if prop data is not yet available\n    return (\n      <div>\n        <CircularProgress color=\"secondary\" style={{ marginLeft: '45%', marginTop: '5%' }} />\n      </div>\n    );\n\n  } else {\n\n\n    return (\n      <Fragment>\n        <div className={classes.root}>\n          <List component=\"nav\">\n            <Box\n              display=\"flex\"\n              flexDirection=\"column\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n              mt={3}\n            >\n              {/* User profile image */}\n              <div className={classes.uploadImg}>\n                <input\n                  accept=\"image/*\"\n                  style={{ display: \"none\" }}\n                  id=\"contained-button-profile-pic\"\n                  multiple\n                  type=\"file\"\n                  onChange={uploadProfilePicture}\n                />\n                <label htmlFor=\"contained-button-profile-pic\">\n                  <Badge\n                    style={{ cursor: \"pointer\" }}\n                    overlap=\"circle\"\n                    anchorOrigin={{\n                      vertical: \"bottom\",\n                      horizontal: \"right\",\n                    }}\n                    badgeContent={<AddAPhotoIcon />}\n                  >\n                    <Avatar\n                      className={classes.img}\n                      alt=\"doctor profile picture\"\n                      src={userInfo.profilePic}\n                    />\n                  </Badge>\n                </label>\n              </div>\n\n              <Typography variant=\"h6\" color=\"primary\">\n                Hi, {userInfo.username}!\n            </Typography>\n\n              {userInfo.userType == \"doctor\" ? (\n                <Box className={classes.likeBox} mt={2} mb={2}>\n                  {/* Likes */}\n                  <FavoriteIcon style={{ color: \"red\" }} />\n                  <Typography variant=\"body2\" color=\"primary\">\n                    &nbsp;{userInfo.likes}\n                  </Typography>\n                </Box>\n              ) : <br></br>}\n\n              {userInfo.userType == \"doctor\" ? (\n              <div className={classes.tagBox}>\n                  { tagList }\n              </div>\n              ) : <br/>}\n\n            </Box>\n\n            {/* Profile */}\n\n            {userInfo.userType == \"doctor\" ? (\n              <ListItem\n                button\n                selected={selectedIndex === 0}\n                onClick={(event) => handleListItemClick(event, 0)}\n                component=\"a\"\n                href=\"/profile\"\n              >\n                <ListItemIcon style={{ marginLeft: 20 }}>\n                  <PersonIcon />\n                </ListItemIcon>\n                <ListItemText primary=\"Profile\" />\n                {/* 第一次user要显示这个tooltip */}\n                <Tooltip\n                  disableFocusListener\n                  placement=\"right\"\n                  title={\n                    <h2 style={{ fontWeight: \"normal\", lineHeight: 1.5 }}>\n                      2. Set up your profile <br></br>\n                      <br></br>\n                      Add your personal, work, and expertise information.\n                </h2>\n                  }\n                >\n                  <ErrorOutlineOutlinedIcon style={{ color: \"red\" }} />\n                </Tooltip>\n              </ListItem>\n            ) : \"\"}\n\n            {/* Saved  */}\n            <ListItem\n              button\n              selected={selectedIndex === 1}\n              onClick={(event) => handleListItemClick(event, 1)}\n              component=\"a\"\n              href=\"/saved\"\n            >\n              <ListItemIcon style={{ marginLeft: 20 }}>\n                <BookmarkIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Saved\" />\n            </ListItem>\n\n            {/* Like History */}\n            <ListItem\n              button\n              selected={selectedIndex === 2}\n              onClick={(event) => handleListItemClick(event, 2)}\n              component=\"a\"\n              href=\"/likehistory\"\n            >\n              <ListItemIcon style={{ marginLeft: 20 }}>\n                <FavoriteOutlinedIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Like History\" />\n            </ListItem>\n\n            {/* Account verification */}\n            {userInfo.userType == \"doctor\" ? (\n            <ListItem\n              button\n              selected={selectedIndex === 3}\n              onClick={(event) => handleListItemClick(event, 3)}\n              style={{ position: \"relative\" }}\n              component=\"a\"\n              href=\"/accountverification\"\n            >\n              <ListItemIcon style={{ marginLeft: 20 }}>\n                <VerifiedUserIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Account Verification\" />\n              {/* 第一次user要显示这个tooltip */}\n\n              <Tooltip\n                disableFocusListener\n                placement=\"right\"\n                title={\n                  <h2 style={{ fontWeight: \"normal\", lineHeight: 1.5 }}>\n                    Welcome Alex! Before you start: <br></br>\n                    <br></br>\n                    1. Verify your account <br></br>\n                    <br></br>\n                    Once you verified your account, you will be able to publish\n                    your profile.\n                </h2>\n                }\n              >\n                <ErrorOutlineOutlinedIcon style={{ color: \"red\" }} />\n              </Tooltip>\n            </ListItem>\n            ) : \"\" }\n\n            {/* Account settings */}\n            <ListItem\n              button\n              selected={selectedIndex === 4}\n              onClick={(event) => handleListItemClick(event, 4)}\n              component=\"a\"\n              href=\"/accountsettings\"\n            >\n              <ListItemIcon style={{ marginLeft: 20 }}>\n                <SettingsIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Account Settings\" />\n            </ListItem>\n          </List>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nDocSideNav.propTypes = {\n  changeProfilePic: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  user: state.user,\n  storedCredentials: state.user.credentials,\n  searchUserInfo: state.data.doctorUserInfo\n});\n\nconst mapActionsToProps = {\n  changeProfilePic,\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(DocSideNav);\n"]},"metadata":{},"sourceType":"module"}