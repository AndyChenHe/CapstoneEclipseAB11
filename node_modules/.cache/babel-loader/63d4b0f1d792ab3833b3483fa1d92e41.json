{"ast":null,"code":"var _jsxFileName = \"/Users/Michelle/Downloads/may10_michelle/src/Components/docAccount/LikeHistory.js\";\nimport React, { Fragment, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport DocCard from \"../../Components/results/DocCard\";\nimport HospCard from \"../../Components/results/HospitalCard\"; // import { getAllSearchData } from \"../../redux/actions/dataActions\";\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst useStyles = makeStyles(theme => ({ ...theme.account\n}));\n\nfunction LikeHistory(props) {\n  const classes = useStyles();\n  const [display, setDisplay] = React.useState(\"doctor\"); //display by doctor as default\n\n  const handleDisplay = (event, newDisplay) => {\n    if (newDisplay != null) {\n      setDisplay(newDisplay);\n    }\n  };\n\n  const [renderCount, setRenderCount] = React.useState(0);\n  const [likeHistory, setLikeHistory] = React.useState({\n    doctors: [],\n    hospitals: []\n  });\n  useEffect(() => {\n    return displayStoredCredentials();\n  }, []);\n\n  const displayStoredCredentials = () => {\n    getStoredCredentials().then(res => {\n      let storedLikeHistory = res.data.credentials.likeHistory;\n      let likedDoctors;\n      let likedHospitals; // if the user has not never liked any doctors or hospitals\n\n      if (!storedLikeHistory) {\n        likedDoctors = [];\n        likedHospitals = [];\n      } else {\n        likedDoctors = storedLikeHistory.doctors ? storedLikeHistory.doctors : [];\n        likedHospitals = storedLikeHistory.hospitals ? storedLikeHistory.hospitals : [];\n      }\n\n      setLikeHistory({\n        doctors: likedDoctors,\n        hospitals: likedHospitals\n      }); // setRenderCount(1);\n    }).catch(error => {\n      console.error(error);\n    });\n  }; // wait for returned props from firebase to be ready\n\n\n  let getStoredCredentials = async () => {\n    let userStoredCredentials = await axios.get(proxyurl + axios.defaults.baseURL + \"user\"); // console.log(userStoredCredentials)\n\n    return userStoredCredentials;\n  }; // only run after liked history doctors and hospitals have been set\n  // useEffect(() => {\n  //   if (renderCount == 1 && (likeHistory.doctors.length > 0 || likeHistory.hospitals.length > 0)) {\n  //     return displayStoredData();\n  //   }\n  // }, []);\n  // const displayStoredData = () => {\n  //   getStoredData()\n  //     .then((res) => {\n  //       let storedLikeHistory = res.data.credentials.likeHistory;\n  //       let likedDoctors;\n  //       let likedHospitals;\n  //       // if the user has not never liked any doctors or hospitals\n  //       if (!storedLikeHistory) {\n  //         likedDoctors = [];\n  //         likedHospitals = [];\n  //       } else {\n  //         likedDoctors = storedLikeHistory.doctors ? storedLikeHistory.doctors : [];\n  //         likedHospitals = storedLikeHistory.hospitals ? storedLikeHistory.hospitals : [];\n  //       }\n  //       setLikeHistory({\n  //         doctors: likedDoctors,\n  //         hospitals: likedHospitals\n  //       });\n  //       // setRenderCount(1);\n  //     }).catch((error) => {\n  //       console.error(error);\n  //     })\n  // }\n  // let getStoredData = async () => {\n  //   let searchData =\n  //     await axios.get(proxyurl + axios.defaults.baseURL + \"getallsearchdata\", {\n  //       params: {\n  //         specialtyList: \n  //       }\n  //     }\n  //   );\n  //   return searchData;\n  // }\n  //   axios.get(proxyurl+axios.defaults.baseURL+\"getallsearchdata\", {\n  //     params:{\n  //       specialtyList:[\"Gastroenterology\"]\n  //     }\n  //   }).then((res)=>{\n  //     console.log(res);\n  //   })\n  // console.log.hospitals(renderCount)\n  // if (renderCount == 0) {\n  //   // loading spinner if prop data is not yet available\n  //   return (\n  //     <div>\n  //       <CircularProgress color=\"secondary\" style={{ marginLeft: '45%', marginTop: '10%' }} />\n  //     </div>\n  //   );\n  // } else {\n\n\n  return /*#__PURE__*/React.createElement(\"a\", {\n    id: \"likehistory\",\n    className: classes.anchor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 10,\n    md: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    mt: 4,\n    mb: 3,\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    flexGrow: 1,\n    flexDirection: \"row\",\n    mb: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Hidden, {\n    mdUp: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"docaccount\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ArrowBackIosIcon, {\n    className: classes.backIcon,\n    fontSize: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 21\n    }\n  }))), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 17\n    }\n  }, \"Like History\"))), /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n    value: display,\n    exclusive: true,\n    onChange: handleDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"doctor\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    color: \"primary\",\n    style: {\n      textTransform: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 19\n    }\n  }, \"Doctor\")), /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"hospital\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    color: \"primary\",\n    style: {\n      textTransform: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 19\n    }\n  }, \"Hospital\")))), \" \"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 11\n    }\n  }), display === \"doctor\" ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 13\n    }\n  }, \"doccard\") : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 15\n    }\n  }, \"hospcard\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 1,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 9\n    }\n  })));\n} // }\n\n\nLikeHistory.propTypes = {// updateVerification: PropTypes.func.isRequired,\n  // getAllSearchData: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  storedCredentials: state.user.credentials // searchData: state.data.searchData\n\n});\n\nconst mapActionsToProps = {// updateVerification,\n  // getAllSearchData\n};\nexport default connect(mapStateToProps, mapActionsToProps)(LikeHistory);","map":{"version":3,"sources":["/Users/Michelle/Downloads/may10_michelle/src/Components/docAccount/LikeHistory.js"],"names":["React","Fragment","useEffect","makeStyles","Box","Typography","Grid","Hidden","ArrowBackIosIcon","ToggleButton","ToggleButtonGroup","CircularProgress","Link","connect","PropTypes","axios","DocCard","HospCard","proxyurl","useStyles","theme","account","LikeHistory","props","classes","display","setDisplay","useState","handleDisplay","event","newDisplay","renderCount","setRenderCount","likeHistory","setLikeHistory","doctors","hospitals","displayStoredCredentials","getStoredCredentials","then","res","storedLikeHistory","data","credentials","likedDoctors","likedHospitals","catch","error","console","userStoredCredentials","get","defaults","baseURL","anchor","backIcon","textTransform","propTypes","mapStateToProps","state","storedCredentials","user","mapActionsToProps"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Link } from \"react-router-dom\";\n\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\n\nimport DocCard from \"../../Components/results/DocCard\";\nimport HospCard from \"../../Components/results/HospitalCard\";\n\n// import { getAllSearchData } from \"../../redux/actions/dataActions\";\n\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n\nconst useStyles = makeStyles((theme) => ({\n  ...theme.account,\n}));\n\nfunction LikeHistory(props) {\n  const classes = useStyles();\n\n  const [display, setDisplay] = React.useState(\"doctor\"); //display by doctor as default\n  const handleDisplay = (event, newDisplay) => {\n    if (newDisplay != null) {\n      setDisplay(newDisplay);\n    }\n  };\n\n  const [renderCount, setRenderCount] = React.useState(0);\n\n  const [likeHistory, setLikeHistory] = React.useState({\n    doctors: [],\n    hospitals: []\n  })\n\n\n  useEffect(() => {\n    return displayStoredCredentials();\n  }, []);\n\n\n  const displayStoredCredentials = () => {\n    getStoredCredentials()\n      .then((res) => {\n        let storedLikeHistory = res.data.credentials.likeHistory;\n        let likedDoctors;\n        let likedHospitals;\n\n        // if the user has not never liked any doctors or hospitals\n        if (!storedLikeHistory) {\n          likedDoctors = [];\n          likedHospitals = [];\n        } else {\n          likedDoctors = storedLikeHistory.doctors ? storedLikeHistory.doctors : [];\n          likedHospitals = storedLikeHistory.hospitals ? storedLikeHistory.hospitals : [];\n        }\n\n        setLikeHistory({\n          doctors: likedDoctors,\n          hospitals: likedHospitals\n        });\n\n        // setRenderCount(1);\n      }).catch((error) => {\n        console.error(error);\n      })\n  }\n\n  // wait for returned props from firebase to be ready\n  let getStoredCredentials = async () => {\n    let userStoredCredentials = await axios.get(proxyurl + axios.defaults.baseURL + \"user\");\n    // console.log(userStoredCredentials)\n    return userStoredCredentials;\n  }\n\n  \n\n\n\n\n\n\n  // only run after liked history doctors and hospitals have been set\n  // useEffect(() => {\n  //   if (renderCount == 1 && (likeHistory.doctors.length > 0 || likeHistory.hospitals.length > 0)) {\n  //     return displayStoredData();\n  //   }\n  // }, []);\n\n\n  // const displayStoredData = () => {\n  //   getStoredData()\n  //     .then((res) => {\n  //       let storedLikeHistory = res.data.credentials.likeHistory;\n  //       let likedDoctors;\n  //       let likedHospitals;\n\n  //       // if the user has not never liked any doctors or hospitals\n  //       if (!storedLikeHistory) {\n  //         likedDoctors = [];\n  //         likedHospitals = [];\n  //       } else {\n  //         likedDoctors = storedLikeHistory.doctors ? storedLikeHistory.doctors : [];\n  //         likedHospitals = storedLikeHistory.hospitals ? storedLikeHistory.hospitals : [];\n  //       }\n\n  //       setLikeHistory({\n  //         doctors: likedDoctors,\n  //         hospitals: likedHospitals\n  //       });\n\n  //       // setRenderCount(1);\n  //     }).catch((error) => {\n  //       console.error(error);\n  //     })\n  // }\n\n\n  // let getStoredData = async () => {\n  //   let searchData =\n  //     await axios.get(proxyurl + axios.defaults.baseURL + \"getallsearchdata\", {\n  //       params: {\n  //         specialtyList: \n  //       }\n  //     }\n  //   );\n  //   return searchData;\n  // }\n\n\n\n\n  //   axios.get(proxyurl+axios.defaults.baseURL+\"getallsearchdata\", {\n  //     params:{\n  //       specialtyList:[\"Gastroenterology\"]\n  //     }\n  //   }).then((res)=>{\n  //     console.log(res);\n\n  //   })\n\n\n\n\n\n\n\n\n  // console.log.hospitals(renderCount)\n\n  // if (renderCount == 0) {\n  //   // loading spinner if prop data is not yet available\n  //   return (\n  //     <div>\n  //       <CircularProgress color=\"secondary\" style={{ marginLeft: '45%', marginTop: '10%' }} />\n  //     </div>\n  //   );\n\n  // } else {\n\n\n\n  return (\n    <a id=\"likehistory\" className={classes.anchor}>\n      <Grid container spacing={0}>\n        <Grid item xs={1}></Grid>\n        <Grid item xs={10} md={8}>\n          <Box display=\"flex\" mt={4} mb={3} flexWrap=\"wrap\" alignItems=\"center\">\n            <Box flexGrow={1} flexDirection=\"row\" mb={1}>\n              <Typography variant=\"h5\" color=\"primary\">\n                {/* Back button, 手机屏幕才会出现 */}\n                <Hidden mdUp>\n                  {/* <IconButton> */}\n                  <Link to=\"docaccount\">\n                    <ArrowBackIosIcon\n                      className={classes.backIcon}\n                      fontSize=\"small\"\n                    />\n                  </Link>\n                  {/* </IconButton> */}\n                </Hidden>\n                <strong>Like History</strong>\n              </Typography>\n            </Box>\n            {/* Display by Doctor/Hospital buttons */}\n            <Box>\n              <ToggleButtonGroup\n                value={display}\n                exclusive\n                onChange={handleDisplay}\n              >\n                <ToggleButton value=\"doctor\" color=\"primary\">\n                  <Typography color=\"primary\" style={{ textTransform: \"none\" }}>\n                    Doctor\n                  </Typography>\n                </ToggleButton>\n                <ToggleButton value=\"hospital\">\n                  <Typography color=\"primary\" style={{ textTransform: \"none\" }}>\n                    Hospital\n                  </Typography>\n                </ToggleButton>\n              </ToggleButtonGroup>\n            </Box>{\" \"}\n          </Box>\n\n          <br></br>\n          <br></br>\n\n          {/* if user clicks on display by 'doctor', then render doctor cards */}\n          {display === \"doctor\" ? (\n            <Fragment>doccard</Fragment>\n          ) : (\n              <Fragment>hospcard</Fragment>\n            )}\n        </Grid>\n        <Grid item xs={1} md={3}></Grid>\n      </Grid>\n    </a>\n  );\n}\n// }\n\n\n\n\n\n\n\n\nLikeHistory.propTypes = {\n  // updateVerification: PropTypes.func.isRequired,\n  // getAllSearchData: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  storedCredentials: state.user.credentials,\n  // searchData: state.data.searchData\n});\n\nconst mapActionsToProps = {\n  // updateVerification,\n  // getAllSearchData\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(LikeHistory);"]},"metadata":{},"sourceType":"module"}