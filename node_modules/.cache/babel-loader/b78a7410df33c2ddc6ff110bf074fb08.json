{"ast":null,"code":"import { SET_USER, SET_AUTHENTICATED, SET_UNAUTHENTICATED, LOADING_USER } from \"../types\"; // initial state; when user is not logged in!\n\nconst initialState = {\n  authenticated: false,\n  loading: false,\n  credentials: {}\n}; //depending on the action type we receive, we will do something\n\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    /*catch action type */\n\n    /* if we get set_authenticated (call from App.js) spread the state we already have, make authenticated: true*/\n    case SET_AUTHENTICATED:\n      return { ...state,\n        authenticated: true\n      };\n\n    /*when we logout, return to initial state*/\n\n    case SET_UNAUTHENTICATED:\n      return initialState;\n\n    case SET_USER:\n      return {\n        authenticated: true,\n        loading: false,\n        ...action.payload\n      };\n\n    case LOADING_USER:\n      return { ...state,\n        loading: true\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/Michelle/Downloads/may10_michelle/src/redux/reducers/userReducer.js"],"names":["SET_USER","SET_AUTHENTICATED","SET_UNAUTHENTICATED","LOADING_USER","initialState","authenticated","loading","credentials","state","action","type","payload"],"mappings":"AAAA,SACEA,QADF,EAEEC,iBAFF,EAGEC,mBAHF,EAIEC,YAJF,QAKO,UALP,C,CAOA;;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE,KADI;AAEnBC,EAAAA,OAAO,EAAE,KAFU;AAGnBC,EAAAA,WAAW,EAAE;AAHM,CAArB,C,CAMA;;AACA,eAAe,UAAUC,KAAK,GAAGJ,YAAlB,EAAgCK,MAAhC,EAAwC;AACrD,UAAQA,MAAM,CAACC,IAAf;AACE;;AACA;AACA,SAAKT,iBAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELH,QAAAA,aAAa,EAAE;AAFV,OAAP;;AAIF;;AACA,SAAKH,mBAAL;AACE,aAAOE,YAAP;;AAEF,SAAKJ,QAAL;AACE,aAAO;AACLK,QAAAA,aAAa,EAAE,IADV;AAELC,QAAAA,OAAO,EAAE,KAFJ;AAGL,WAAGG,MAAM,CAACE;AAHL,OAAP;;AAKF,SAAKR,YAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELF,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAIF;AACE,aAAOE,KAAP;AAxBJ;AA0BD","sourcesContent":["import {\n  SET_USER,\n  SET_AUTHENTICATED,\n  SET_UNAUTHENTICATED,\n  LOADING_USER\n} from \"../types\";\n\n// initial state; when user is not logged in!\nconst initialState = {\n  authenticated: false,\n  loading: false,\n  credentials: {},\n};\n\n//depending on the action type we receive, we will do something\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    /*catch action type */\n    /* if we get set_authenticated (call from App.js) spread the state we already have, make authenticated: true*/\n    case SET_AUTHENTICATED:\n      return {\n        ...state,\n        authenticated: true,\n      };\n    /*when we logout, return to initial state*/\n    case SET_UNAUTHENTICATED:\n      return initialState;\n\n    case SET_USER:\n      return {\n        authenticated: true,\n        loading: false,\n        ...action.payload,\n      };\n    case LOADING_USER:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}