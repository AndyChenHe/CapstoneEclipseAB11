{"ast":null,"code":"var _jsxFileName = \"/Users/andychenhe/Desktop/may10_michelle 2/src/Components/docAccount/DocEditProfile.js\";\n// -------------------- ------------------------- //\n// 你需要去app.js, userReducer, userAction, type, 加入其他东西\nimport React, { useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Select from \"@material-ui/core/Select\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport RemoveIcon from \"@material-ui/icons/RemoveCircleOutlineSharp\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { // to \"specialties\" collection\nsendProfileToSpec // to \"users\" collection\n, sendAccountProfile // to \"inputList\" collection\n, sendSpecList, sendCondList // disable original account if doctor has changed hospital/specialty in \"specialties\" collection\n, deleteProfileInSpec, publish } from \"../../redux/actions/userActions\";\nconst useStyles = makeStyles(theme => ({\n  anchor: {\n    display: \"block\",\n    paddingTop: 100,\n    marginTop: -100\n  },\n  chip: {\n    marginTop: \"0.3rem\",\n    marginRight: \"0.3rem\"\n  }\n})); // doctor edit profile\n\nfunction DocEditProfile(props) {\n  const classes = useStyles(); // --------------------------- initialize states --------------------------- //\n  // putting most inputs in one state, initialize states\n\n  const [allState, setAllState] = React.useState({\n    // personal\n    firstName: \"\",\n    lastName: \"\",\n    gender: \"\",\n    yearsOfPractice: \"\",\n    // work\n    hospital: \"\",\n    // check if hospital has changed\n    removedHospital: \"\",\n    type: \"\",\n    phone: \"\",\n    buildingInfo: \"\",\n    street: \"\",\n    city: \"\",\n    state: \"\",\n    postalCode: \"\",\n    // appt\n    call: false,\n    online: false,\n    email: false,\n    onsite: true,\n    callNumber: \"\",\n    onlineLink: \"\",\n    emailAddress: \"\",\n    // expertise\n    specialty: \"\",\n    // check if specialty has changed\n    removedSpecialty: \"\",\n    qualifications: \"\",\n    procedures: [],\n    // to store one procedure entered\n    newProc: \"\",\n    conditions: [],\n    // check if conditions have changed\n    removedConditions: [],\n    // to store one condition entered\n    newCond: \"\",\n    languages: [],\n    // to enable publish if there is spec/hosp info in database (user already filled out and submitted the profile)\n    specOrNot: \"\",\n    hospOrNot: \"\"\n  }); // submit success alert\n\n  const [open, setOpen] = React.useState(false); // to stop fetching data after the first round\n\n  const [renderCount, setRenderCount] = React.useState(0); // to store inputList (specialty & conditions) data returned from database so I can compare and send new lists to replace the ones in database\n\n  const [list, setList] = React.useState({\n    specialtyList: {},\n    conditionsList: {}\n  }); //publish switch\n\n  const [publish, setPublish] = React.useState(false); // -------------------------------------------------------------------- //\n  // get data\n  // only call useEffect if renderCount = 0 (will be updated to 1 if stored data\n\n  useEffect(() => {\n    console.log('mission start');\n\n    if (renderCount == 0) {\n      console.log('in the mission');\n      displayStoredData();\n    }\n  }); // wait for data to get here and set state\n\n  const displayStoredData = () => {\n    getStoredData().then(res => {\n      // if the doctor had filled out the profile previously\n      console.log('resData'); // console.log(Object.keys(res[0]).length > 0);\n\n      if (res[0] && res[1] && res[2] && res[3] && Object.keys(res[0]).length > 0 && Object.keys(res[1]).length > 0 && Object.keys(res[2]).length > 0) {\n        window.scrollTo(0, 0); // data -> from doctor account\n\n        const userInfo = res[0].profile; // data -> from specialty data\n\n        const searchInfo = res[1];\n        const apptThings = res[1].appointment; // set state\n\n        setAllState({ ...allState,\n          // personal\n          firstName: userInfo.firstName,\n          lastName: userInfo.lastName,\n          gender: userInfo.gender,\n          yearsOfPractice: searchInfo.yearsOfPractice,\n          // work\n          hospital: searchInfo.hospital,\n          removedHospital: searchInfo.hospital,\n          type: searchInfo.type,\n          phone: searchInfo.phone,\n          buildingInfo: userInfo.buildingInfo,\n          street: userInfo.street,\n          city: userInfo.city,\n          state: userInfo.state,\n          postalCode: userInfo.postalCode,\n          // appt\n          call: apptThings.call.status,\n          online: apptThings.online.status,\n          email: apptThings.email.status,\n          onsite: apptThings.onsite.status,\n          callNumber: apptThings.call.content,\n          onlineLink: apptThings.online.content,\n          emailAddress: apptThings.email.content,\n          // expertise\n          specialty: searchInfo.specialty,\n          removedSpecialty: searchInfo.specialty,\n          qualifications: searchInfo.qualifications,\n          procedures: searchInfo.procedures,\n          conditions: searchInfo.conditions,\n          removedConditions: searchInfo.conditions,\n          languages: searchInfo.languages,\n          specOrNot: userInfo.specialty,\n          hospOrNot: userInfo.hospital\n        });\n        setList({\n          specialtyList: res[2],\n          conditionsList: res[3]\n        });\n        setPublish(searchInfo.publish);\n        setRenderCount(1);\n      }\n    }).catch(error => {\n      console.error(error);\n    });\n  }; // wait for returned props from firebase to be ready\n\n\n  let getStoredData = async () => {\n    console.log('get data'); // data from specialty and doctor account profile\n    // let [\n    // //   // doctors's personal data in \"users\" collection\n    //   userInfo,\n    // //   // doctor account info in \"specialties\" collection (search data)\n    //   storedSearchInfo,\n    // //   // data from \"inputList\" collection\n    //   specialtyList,\n    //   conditionsList,\n    // ] = await Promise.all([\n    //   props.credentials,\n    //   props.doctorData,\n    //   props.specialtyList,\n    //   props.conditionsList,\n    // ]);\n\n    let userInfo = props.credentials;\n    let storedSearchInfo = props.doctorData;\n    let specialtyList = props.specialtyList;\n    let conditionsList = props.conditionsList;\n    return [userInfo, storedSearchInfo, specialtyList, conditionsList];\n  }; // submit success snackbar\n  // const [open, setOpen] = React.useState(false);\n  // const openSuccessMsg = () => {\n  //   setOpen(true);\n  // };\n  // const closeSuccessMsg = (event, reason) => {\n  //   if (reason === \"clickaway\") {\n  //     return;\n  //   }\n  //   setOpen(false);\n  // };\n  // -------------------- functions to change state ------------------------- //\n  // change publish status\n\n\n  const handlePublishChange = event => {\n    let data;\n    setPublish(event.target.checked);\n    data = {\n      specialty: allState.specialty,\n      hospital: allState.hospital,\n      publish: event.target.checked\n    };\n    props.publish(data);\n  }; // personal\n  //first name\n\n\n  const handleFirstNameChange = event => {\n    setAllState({ ...allState,\n      firstName: event.target.value\n    });\n  }; //last name\n\n\n  const handleLastNameChange = event => {\n    setAllState({ ...allState,\n      lastName: event.target.value\n    });\n  }; //gender\n\n\n  const handleGenderChange = event => {\n    setAllState({ ...allState,\n      gender: event.target.value\n    });\n  }; // years of practice\n\n\n  const handleYearsOfPracticeChange = event => {\n    setAllState({ ...allState,\n      yearsOfPractice: event.target.value\n    });\n  }; // -------------------------------------------------------------------- //\n  // work\n  // hospital name\n\n\n  const handleHospitalChange = event => {\n    setAllState({ ...allState,\n      hospital: event.target.textContent\n    });\n  }; //hospital type\n\n\n  const handleHospTypeChange = event => {\n    setAllState({ ...allState,\n      type: event.target.value\n    });\n  }; //phone\n\n\n  const handlePhoneChange = event => {\n    setAllState({ ...allState,\n      phone: event.target.value\n    });\n  }; //unit number\n\n\n  const handleBuildingInfoChange = event => {\n    setAllState({ ...allState,\n      buildingInfo: event.target.value\n    });\n  }; //street name\n\n\n  const handleStreetChange = event => {\n    setAllState({ ...allState,\n      street: event.target.value\n    });\n  }; //unit number\n\n\n  const handleCityChange = event => {\n    setAllState({ ...allState,\n      city: event.target.value\n    });\n  }; //state\n\n\n  const handleStateChange = event => {\n    setAllState({ ...allState,\n      state: event.target.textContent\n    });\n  }; //postal code\n\n\n  const handlePostalCodeChange = event => {\n    setAllState({ ...allState,\n      postalCode: event.target.value\n    });\n  }; // -------------------------------------------------------------------- //\n  // appt status\n\n\n  const handleAppointmentChange = event => {\n    setAllState({ ...allState,\n      [event.target.name]: event.target.checked\n    });\n  }; //call number\n\n\n  const handleCallNumberChange = event => {\n    setAllState({ ...allState,\n      callNumber: event.target.value\n    });\n  }; //online link\n\n\n  const handleOnlineLinkChange = event => {\n    setAllState({ ...allState,\n      onlineLink: event.target.value\n    });\n  }; //email address\n\n\n  const handleEmailAddressChange = event => {\n    setAllState({ ...allState,\n      emailAddress: event.target.value\n    });\n  }; // -------------------------------------------------------------------- //\n  // expertise\n  //specialty\n\n\n  const handleSpecialtyChange = event => {\n    setAllState({ ...allState,\n      specialty: event.target.textContent\n    });\n  }; //qualifications\n\n\n  const handleQualificationsChange = event => {\n    setAllState({ ...allState,\n      qualifications: event.target.value\n    });\n  }; // procedure\n  // list to generate one chip for each procedure\n\n\n  let procList;\n\n  if (allState.procedures) {\n    procList = allState.procedures.map(oneProc => {\n      return /*#__PURE__*/React.createElement(Chip, {\n        className: classes.chip,\n        size: \"small\",\n        label: oneProc,\n        key: oneProc // delete one chip\n        ,\n        onDelete: () => {\n          const procFilter = allState.procedures.filter(entry => entry != oneProc);\n          setAllState({ ...allState,\n            procedures: procFilter\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 9\n        }\n      });\n    });\n  } // store one procedure entered by the user to be used below\n\n\n  const handleProcedureChange = event => {\n    const newProcValue = event.target.value;\n    setAllState({ ...allState,\n      newProc: newProcValue\n    });\n  }; // after pressing \"enter\", the new value stored will be pushed to the array generating procedure chips\n\n\n  const handleAddProcButtonChange = event => {\n    event.preventDefault();\n\n    if (!allState.procedures) {\n      const newList = [];\n      newList.push(allState.newProc);\n      setAllState({ ...allState,\n        procedures: newList\n      });\n    } else if ( // because user can enter two words for one procedure (ex: \"XX XX\"), so I cannot disable user from\n    // entering empty spaces otherwise space in between words won't be allowed. I have disabled several\n    // empty space cases here and hopefully users will not enter more than 3 empty spaces. We can fix this later.\n    !allState.procedures.includes(allState.newProc) && allState.newProc != \"\" && allState.newProc != \" \" && allState.newProc != \"  \" && allState.newProc != \"   \" && allState.newProc != \"    \") {\n      setAllState({ ...allState,\n        procedures: [...allState.procedures, allState.newProc],\n        newProc: \"\"\n      });\n    } // clear the text field after one procedure chip is generated and listed under the textfield\n\n\n    document.getElementById(\"procedure\").value = \"\";\n  }; // condition\n  // generate one chip for each condition\n\n\n  let condList;\n\n  if (allState.conditions) {\n    condList = allState.conditions.map(oneCond => {\n      return /*#__PURE__*/React.createElement(Chip, {\n        className: classes.chip,\n        size: \"small\",\n        label: oneCond,\n        key: oneCond // delete one chip\n        ,\n        onDelete: () => {\n          const condFilter = allState.conditions.filter(entry => entry != oneCond);\n          setAllState({ ...allState,\n            conditions: condFilter\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 9\n        }\n      });\n    });\n  } // store one procedure entered by the user to be used below\n\n\n  const handleConditionChange = event => {\n    const newCondValue = event.target.value;\n    setAllState({ ...allState,\n      newCond: newCondValue\n    });\n  }; // after pressing \"enter\", the new value entered & stored will be pushed to the array generating procedure chips\n\n\n  const handleAddCondButtonChange = event => {\n    event.preventDefault();\n\n    if (!allState.conditions) {\n      const newList = [];\n      newList.push(allState.newCond);\n      setAllState({ ...allState,\n        conditions: newList\n      });\n    } else if (!allState.conditions.includes(allState.newCond) && allState.newCond != \"\" && allState.newCond != \" \" && allState.newCond != \"  \" && allState.newCond != \"   \" && allState.newCond != \"    \") {\n      setAllState({ ...allState,\n        conditions: [...allState.conditions, allState.newCond],\n        newCond: \"\"\n      });\n    } // clear the text field\n\n\n    document.getElementById(\"condition\").value = \"\";\n  }; // languages\n  // generate one chip for each language\n\n\n  let langList;\n\n  if (allState.languages) {\n    langList = allState.languages.map(oneLang => {\n      return /*#__PURE__*/React.createElement(Chip, {\n        className: classes.chip,\n        size: \"small\",\n        label: oneLang,\n        key: oneLang // delete one chip\n        ,\n        onDelete: () => {\n          const langFilter = allState.languages.filter(entry => entry != oneLang);\n          setAllState({ ...allState,\n            languages: langFilter\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 575,\n          columnNumber: 9\n        }\n      });\n    });\n  } // add one language to the array generating chips\n\n\n  const handleLanguageChange = event => {\n    event.preventDefault();\n    const newLang = event.target.textContent;\n\n    if (!allState.languages) {\n      const newList = [];\n      newList.push(newLang);\n      setAllState({ ...allState,\n        languages: newList\n      });\n    } else if (!allState.languages.includes(newLang) && newLang != \"\") {\n      setAllState({ ...allState,\n        languages: [...allState.languages, newLang]\n      });\n    }\n\n    document.getElementById(\"language-option\").value = \"\";\n  }; // ------------------  after pressing submit button -------------------------- //\n  // reload window after submission，and display \"successfuly submitted\" message\n\n\n  window.onload = function () {\n    var reloading = sessionStorage.getItem(\"reloading\");\n\n    if (reloading) {\n      sessionStorage.removeItem(\"reloading\"); // display \"successfully submitted\" message\n\n      setOpen(true);\n    }\n  }; // send profile info to firebase after pressing \"submit\" button\n\n\n  const sendProfile = event => {\n    // calculation for new \"specialty list\" send to \"inputList\" collection\n    const currentSpec = allState.specialty;\n    const removedSpec = allState.removedSpecialty;\n    const specialtyList = list.specialtyList; // if current != removed (doctor changed the specialty), make changes to the specialty list\n    // -- for new spec:\n    //    -- if the current selected spec already exists in the list, +1 for the spec, if not, add it to the list and give it a count of 0\n    // -- for removed spec:\n    //    -- if the count for the removed spec is > 1, -1 for that spec in the list, otherwise set it to 0\n\n    if (currentSpec.localeCompare(removedSpec)) {\n      if (Object.keys(specialtyList).includes(currentSpec)) {\n        specialtyList[currentSpec]++;\n      } else {\n        specialtyList[currentSpec] = 1;\n      }\n\n      if (specialtyList[removedSpec] > 1) {\n        specialtyList[removedSpec]--;\n      } else {\n        specialtyList[removedSpec] = 0;\n      }\n    } // calculation for new \"condition list\" send to \"inputList\" collection\n\n\n    let currentCond = allState.conditions;\n    let removedCond = allState.removedConditions;\n    let conditionsList = list.conditionsList; // check the difference (added and removed) between 2 lists\n\n    let added = currentCond.filter(x => !removedCond.includes(x));\n    let removed = removedCond.filter(x => !currentCond.includes(x)); // if new conditions are added by the doctor, add them to the condition list\n    // if any conditions are removed, -1 or set to 0 similar to what I did to specialty list above\n\n    if (added.length > 0) {\n      added.forEach(one => {\n        one = one[0].toUpperCase() + one.slice(1);\n\n        if (Object.keys(conditionsList).includes(one)) {\n          conditionsList[one]++;\n        } else {\n          conditionsList[one] = 1;\n        }\n      });\n    }\n\n    if (removed.length > 0) {\n      removed.forEach(one => {\n        one = one[0].toUpperCase() + one.slice(1);\n\n        if (conditionsList[one] > 1) {\n          conditionsList[one]--;\n        } else {\n          conditionsList[one] = 0;\n        }\n      });\n    } // calculation for disabling original doctor profile in \"specialties\" collection if the doctor has changed hospital/specialty\n\n\n    const removedHospital = allState.removedHospital;\n    const currentHospital = allState.hospital;\n\n    if (removedHospital.localeCompare(currentHospital) || currentSpec.localeCompare(removedSpec)) {\n      const deleteInfo = {\n        hospital: removedHospital,\n        specialty: removedSpec\n      };\n      props.deleteProfileInSpec(deleteInfo);\n    } // ------------------  data to send  -------------------------- //\n    // send to account profile \"users\" collection\n\n\n    const accountData = {\n      // personal\n      firstName: allState.firstName ? allState.firstName : \"\",\n      lastName: allState.lastName ? allState.lastName : \"\",\n      gender: allState.gender ? allState.gender : \"\",\n      // work\n      hospital: allState.hospital ? allState.hospital : \"\",\n      buildingInfo: allState.buildingInfo ? allState.buildingInfo : \"\",\n      street: allState.street ? allState.street : \"\",\n      city: allState.city ? allState.city : \"\",\n      state: allState.state ? allState.state : \"\",\n      postalCode: allState.postalCode ? allState.postalCode : \"\",\n      // expertise\n      specialty: allState.specialty ? allState.specialty : \"\"\n    }; // send to account in \"specialties\" collection\n\n    const specData = {\n      // personal\n      name: accountData.firstName + \" \" + accountData.lastName,\n      yearsOfPractice: allState.yearsOfPractice ? allState.yearsOfPractice : \"\",\n      // work\n      hospital: allState.hospital ? allState.hospital : \"\",\n      type: allState.type ? allState.type : \"\",\n      phone: allState.phone ? allState.phone : \"\",\n      address: accountData.buildingInfo + \", \" + accountData.street + \", \" + accountData.city + \" \" + accountData.postalCode + \" \" + accountData.state,\n      // appt\n      appointment: {\n        call: {\n          content: allState.callNumber ? allState.callNumber : \"\",\n          status: allState.call ? allState.call : false\n        },\n        email: {\n          content: allState.emailAddress ? allState.emailAddress : \"\",\n          status: allState.email ? allState.email : false\n        },\n        online: {\n          content: allState.onlineLink ? allState.onlineLink : \"\",\n          status: allState.online ? allState.online : false\n        },\n        onsite: {\n          status: allState.onsite ? allState.onsite : false\n        }\n      },\n      // expertise\n      specialty: allState.specialty ? allState.specialty : \"\",\n      qualifications: allState.qualifications ? allState.qualifications : \"\",\n      procedures: allState.procedures ? allState.procedures : [],\n      conditions: allState.conditions ? allState.conditions : [],\n      languages: allState.languages ? allState.languages : [],\n      // false by default\n      deleted: false,\n      // publish\n      publish: publish ? publish : false\n    }; // list send to \"inputList\" collection\n\n    const specListData = {\n      specialtyList: specialtyList\n    }; // list send to \"inputList\" collection\n\n    const condListData = {\n      conditionsList: conditionsList\n    }; // to user account\n\n    props.sendAccountProfile(accountData); // to account in specialty\n\n    props.sendProfileToSpec(specData); // send specialty\n\n    props.sendSpecList(specListData); // send condition list\n\n    props.sendCondList(condListData); // wait for data sent to firebase before reloading the window\n\n    const delay = ms => new Promise(res => setTimeout(res, ms)); // open submit success message\n    // openSuccessMsg();\n\n\n    const reload = async () => {\n      await delay(3000);\n      window.location.reload();\n    };\n\n    sessionStorage.setItem(\"reloading\", \"true\");\n    reload();\n  }; // -------------------------  errors --------------------------------- //\n  // errors (if errors, submit button is disabled)\n\n\n  let personalError;\n  let workError;\n  let apptError;\n  let expertiseError;\n  const firstNameError = !allState.firstName;\n  const lastNameError = !allState.lastName;\n  const yearsOfPracticeError = !allState.yearsOfPractice;\n  personalError = firstNameError || lastNameError || yearsOfPracticeError;\n  const hospitalError = !allState.hospital;\n  const typeError = !allState.type;\n  const phoneError = !allState.phone;\n  const streetError = !allState.street;\n  const cityError = !allState.city;\n  const stateError = !allState.state;\n  const postalCodeError = !allState.postalCode;\n  workError = hospitalError || typeError || phoneError || streetError || cityError || stateError || postalCodeError;\n  const callNumError = allState.call && !allState.callNumber;\n  const onlineLinkError = allState.online && !allState.onlineLink;\n  const emailAddressError = allState.email && !allState.emailAddress;\n  apptError = callNumError || onlineLinkError || emailAddressError;\n  let letterRegex = /^\\S+(?: \\S+)*$/ && /^([^0-9]*)$/; // only alphabetical letters are allowed for procedures\n\n  let procNotLetter = false;\n\n  if (allState.procedures) {\n    const procedureList = allState.procedures;\n    procedureList.forEach(one => {\n      if (!one.match(letterRegex)) procNotLetter = true;\n    });\n  } // only alphabetical letters are allowed for conditions\n\n\n  let condNotLetter = false;\n\n  if (allState.conditions) {\n    const conditionList = allState.conditions;\n    conditionList.forEach(one => {\n      if (!one.match(letterRegex)) condNotLetter = true;\n    });\n  }\n\n  const specialtyError = !allState.specialty;\n  const qualificationsError = !allState.qualifications;\n  const proceduresError = allState.procedures == \"\" || procNotLetter;\n  const conditionsError = allState.conditions == \"\" || condNotLetter;\n  const languageError = allState.languages == \"\";\n  expertiseError = specialtyError || qualificationsError || proceduresError || conditionsError || languageError;\n  const submitError = personalError || workError || apptError || expertiseError; // -------------------------------------------------------------------- //\n\n  if (renderCount == 0) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 893,\n        columnNumber: 7\n      }\n    }, \"\\xA0\\xA0\", /*#__PURE__*/React.createElement(CircularProgress, {\n      color: \"secondary\",\n      style: {\n        marginLeft: \"45%\",\n        marginTop: \"10%\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 895,\n        columnNumber: 9\n      }\n    }), \"\\xA0\\xA0\\xA0\\xA0\");\n  } else {\n    return /*#__PURE__*/React.createElement(\"a\", {\n      id: \"profile\",\n      className: classes.anchor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 904,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 905,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 906,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 907,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      mt: 4,\n      mb: 3,\n      flexWrap: \"wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 908,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      flexGrow: 1,\n      flexDirection: \"row\",\n      mb: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 909,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h5\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 910,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Hidden, {\n      mdUp: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 935,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"docaccount\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 937,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ArrowBackIosIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 938,\n        columnNumber: 23\n      }\n    }))), /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 942,\n        columnNumber: 19\n      }\n    }, \"Profile\"))), /*#__PURE__*/React.createElement(Box, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 946,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Switch, {\n      disabled: !allState.specOrNot || !allState.hospOrNot,\n      checked: publish,\n      onChange: handlePublishChange,\n      name: \"checked\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 947,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 953,\n        columnNumber: 17\n      }\n    }, \"Publish your profile\"))), open ? /*#__PURE__*/React.createElement(Alert, {\n      style: {\n        marginTop: \"1rem\",\n        marginBottom: \"1rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 958,\n        columnNumber: 15\n      }\n    }, \"Successfully submitted!\") : \"\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 964,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Typography, {\n      variant: \"body1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 965,\n        columnNumber: 13\n      }\n    }, \"Please fill out the profile to the best of your ability. The more complete your profile is, the more easily users will be able to find you.\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 968,\n        columnNumber: 24\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 969,\n        columnNumber: 15\n      }\n    }), \" * Required\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 971,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 972,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      mt: 2,\n      mb: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 973,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h6\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 974,\n        columnNumber: 15\n      }\n    }, \"Personal Information\")), /*#__PURE__*/React.createElement(TextField, {\n      fullWidth: true,\n      error: firstNameError,\n      helperText: firstNameError ? \"*Required\" : \"\",\n      required: true,\n      label: \"First Name\",\n      variant: \"outlined\",\n      onChange: handleFirstNameChange,\n      defaultValue: allState.firstName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 979,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 989,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 990,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      fullWidth: true,\n      error: lastNameError,\n      helperText: lastNameError ? \"*Required\" : \"\",\n      required: true,\n      label: \"Last Name\",\n      variant: \"outlined\",\n      onChange: handleLastNameChange,\n      defaultValue: allState.lastName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 992,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1002,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1003,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(FormControl, {\n      variant: \"outlined\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1005,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(InputLabel, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1006,\n        columnNumber: 15\n      }\n    }, \"Gender\"), /*#__PURE__*/React.createElement(Select, {\n      value: allState.gender,\n      onChange: handleGenderChange,\n      label: \"Gender\",\n      defaultValue: allState.gender,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1007,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(MenuItem, {\n      value: \"Male\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1013,\n        columnNumber: 17\n      }\n    }, \"Male\"), /*#__PURE__*/React.createElement(MenuItem, {\n      value: \"Female\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1014,\n        columnNumber: 17\n      }\n    }, \"Female\"))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1017,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1018,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      fullWidth: true,\n      required: true,\n      error: yearsOfPracticeError,\n      helperText: yearsOfPracticeError ? \"*Required\" : \"\",\n      label: \"Years of Practice\",\n      variant: \"outlined\",\n      onChange: handleYearsOfPracticeChange,\n      defaultValue: allState.yearsOfPractice,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1020,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1030,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1031,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1032,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1033,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1034,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      mb: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1035,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h6\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1036,\n        columnNumber: 15\n      }\n    }, \"Work Information\")), /*#__PURE__*/React.createElement(Autocomplete, {\n      options: hospitals,\n      getOptionLabel: option => option,\n      fullWidth: true,\n      required: true,\n      onChange: handleHospitalChange,\n      value: allState.hospital,\n      renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({\n        required: true\n      }, params, {\n        label: \"Hospital Name\",\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1049,\n          columnNumber: 17\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1041,\n        columnNumber: 13\n      }\n    }), hospitalError ? /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"red\",\n        marginBottom: \"-1.3rem\",\n        marginLeft: \"0.8rem\",\n        fontSize: \"0.75rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1058,\n        columnNumber: 15\n      }\n    }, \"*Required\") : \"\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1071,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1072,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(FormControl, {\n      component: \"fieldset\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1074,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      component: \"legend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1075,\n        columnNumber: 15\n      }\n    }, \"Hospital Type\"), /*#__PURE__*/React.createElement(RadioGroup, {\n      name: \"type\",\n      value: allState.type,\n      onChange: handleHospTypeChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1076,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1081,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormControlLabel, {\n      value: \"Public\",\n      control: /*#__PURE__*/React.createElement(Radio, {\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1084,\n          columnNumber: 30\n        }\n      }),\n      label: \"Public\",\n      style: {\n        marginRight: 100\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1082,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(FormControlLabel, {\n      value: \"Private\",\n      control: /*#__PURE__*/React.createElement(Radio, {\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1090,\n          columnNumber: 30\n        }\n      }),\n      label: \"Private\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1088,\n        columnNumber: 19\n      }\n    })))), typeError ? /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"red\",\n        marginTop: \"-0.1rem\",\n        marginBottom: \"-1rem\",\n        marginLeft: \"0.8rem\",\n        fontSize: \"0.75rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1097,\n        columnNumber: 15\n      }\n    }, \"*Required\") : \"\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1111,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1112,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(FormControl, {\n      component: \"fieldset\",\n      fullWidth: true,\n      style: {\n        marginBottom: 30\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1114,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      component: \"legend\",\n      style: {\n        marginBottom: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1119,\n        columnNumber: 15\n      }\n    }, \"Work Phone Number\"), /*#__PURE__*/React.createElement(TextField, {\n      required: true,\n      fullWidth: true,\n      error: phoneError,\n      helperText: phoneError ? \"*Required\" : \"\",\n      label: \"Phone Number\",\n      variant: \"outlined\",\n      onChange: handlePhoneChange,\n      defaultValue: allState.phone,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1122,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1133,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(FormControl, {\n      component: \"fieldset\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1135,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(FormLabel, {\n      component: \"legend\",\n      style: {\n        marginBottom: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1136,\n        columnNumber: 15\n      }\n    }, \"Work Address\"), /*#__PURE__*/React.createElement(TextField, {\n      fullWidth: true,\n      label: \"Building Unit/ Floor/ Block\",\n      variant: \"outlined\",\n      onChange: handleBuildingInfoChange,\n      defaultValue: allState.buildingInfo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1139,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1147,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1148,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      required: true,\n      fullWidth: true,\n      error: streetError,\n      helperText: streetError ? \"*Required\" : \"\",\n      label: \"Street Name\",\n      variant: \"outlined\",\n      onChange: handleStreetChange,\n      defaultValue: allState.street,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1149,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1159,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1160,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      required: true,\n      fullWidth: true,\n      error: cityError,\n      helperText: cityError ? \"*Required\" : \"\",\n      label: \"City\",\n      variant: \"outlined\",\n      onChange: handleCityChange,\n      defaultValue: allState.city,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1161,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1171,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1172,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Autocomplete, {\n      fullWidth: true,\n      options: states,\n      getOptionLabel: option => option,\n      onChange: handleStateChange,\n      value: allState.state,\n      renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({\n        required: true\n      }, params, {\n        label: \"State\",\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1180,\n          columnNumber: 17\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1173,\n        columnNumber: 13\n      }\n    }), stateError ? /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"red\",\n        marginTop: \"0.3rem\",\n        marginBottom: \"-0.4rem\",\n        marginLeft: \"0.8rem\",\n        fontSize: \"0.75rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1189,\n        columnNumber: 15\n      }\n    }, \"*Required\") : \"\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1203,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      required: true,\n      fullWidth: true,\n      error: postalCodeError,\n      helperText: postalCodeError ? \"*Required\" : \"\",\n      label: \"Postcode\",\n      variant: \"outlined\",\n      onChange: handlePostalCodeChange,\n      defaultValue: allState.postalCode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1204,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1214,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1215,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1216,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1217,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1218,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      mt: 2,\n      mb: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1220,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h6\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1221,\n        columnNumber: 15\n      }\n    }, \"Ways to Make Appointment\")), /*#__PURE__*/React.createElement(FormControl, {\n      component: \"fieldset\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1225,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1226,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      mr: 2,\n      mt: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1228,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormControlLabel, {\n      control: /*#__PURE__*/React.createElement(Checkbox, {\n        checked: allState.call,\n        onChange: handleAppointmentChange,\n        name: \"call\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1231,\n          columnNumber: 23\n        }\n      }),\n      label: \"Call\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1229,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Box, {\n      flexGrow: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1240,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      disabled: !allState.call,\n      error: callNumError,\n      helperText: callNumError ? \"*Required\" : \"\",\n      fullWidth: true,\n      required: true,\n      size: \"small\",\n      label: \"Phone Number\",\n      variant: \"outlined\",\n      onChange: handleCallNumberChange,\n      defaultValue: allState.callNumber,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1241,\n        columnNumber: 19\n      }\n    }))), /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1256,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      mt: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1257,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormControlLabel, {\n      control: /*#__PURE__*/React.createElement(Checkbox, {\n        checked: allState.online,\n        onChange: handleAppointmentChange,\n        name: \"online\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1260,\n          columnNumber: 23\n        }\n      }),\n      label: \"Online\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1258,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(Box, {\n      flexGrow: 1,\n      mt: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1269,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      disabled: !allState.online,\n      error: onlineLinkError,\n      helperText: onlineLinkError ? \"*Required\" : \"\",\n      fullWidth: true,\n      required: true,\n      size: \"small\",\n      label: \"Link\",\n      variant: \"outlined\",\n      onChange: handleOnlineLinkChange,\n      defaultValue: allState.onlineLink,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1270,\n        columnNumber: 19\n      }\n    }))), /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1285,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      mr: 1,\n      mt: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1286,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(FormControlLabel, {\n      control: /*#__PURE__*/React.createElement(Checkbox, {\n        checked: allState.email,\n        onChange: handleAppointmentChange,\n        name: \"email\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1289,\n          columnNumber: 23\n        }\n      }),\n      label: \"Email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1287,\n        columnNumber: 19\n      }\n    }), \" \"), /*#__PURE__*/React.createElement(Box, {\n      flexGrow: 1,\n      mt: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1298,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      disabled: !allState.email,\n      error: emailAddressError,\n      helperText: emailAddressError ? \"*Required\" : \"\",\n      fullWidth: true,\n      required: true,\n      size: \"small\",\n      label: \"Email Address\",\n      variant: \"outlined\",\n      onChange: handleEmailAddressChange,\n      defaultValue: allState.emailAddress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1299,\n        columnNumber: 19\n      }\n    }))), /*#__PURE__*/React.createElement(Box, {\n      mt: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1314,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(FormControlLabel, {\n      control: /*#__PURE__*/React.createElement(Checkbox, {\n        checked: allState.onsite,\n        onChange: handleAppointmentChange,\n        name: \"onsite\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1317,\n          columnNumber: 21\n        }\n      }),\n      label: \"On site\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1315,\n        columnNumber: 17\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1327,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1328,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1329,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1330,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1331,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      mt: 2,\n      mb: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1332,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h6\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1333,\n        columnNumber: 15\n      }\n    }, \"Expertise\")), /*#__PURE__*/React.createElement(Autocomplete, {\n      fullWidth: true,\n      required: true,\n      options: specialties,\n      onChange: handleSpecialtyChange,\n      value: allState.specialty,\n      getOptionLabel: option => option,\n      renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({\n        required: true\n      }, params, {\n        label: \"Specialty\",\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1346,\n          columnNumber: 17\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1338,\n        columnNumber: 13\n      }\n    }), specialtyError ? /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"red\",\n        marginTop: \"0.3rem\",\n        marginBottom: \"-0.4rem\",\n        marginLeft: \"0.8rem\",\n        fontSize: \"0.75rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1355,\n        columnNumber: 15\n      }\n    }, \"*Required\") : \"\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1369,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(TextField, {\n      fullWidth: true,\n      required: true,\n      error: qualificationsError,\n      helperText: qualificationsError ? \"*Required\" : \"\",\n      label: \"Qualifications\",\n      variant: \"outlined\",\n      onChange: handleQualificationsChange,\n      defaultValue: allState.qualifications,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1371,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1381,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1382,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"form\", {\n      noValidate: true,\n      autoComplete: \"off\",\n      onSubmit: handleAddProcButtonChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1384,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      fullWidth: true,\n      id: \"procedure\",\n      label: \"Procedures\",\n      variant: \"outlined\",\n      required: true,\n      onChange: handleProcedureChange,\n      helperText: \"Press 'enter' key to add one procedure\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1389,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"procTags\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1400,\n        columnNumber: 13\n      }\n    }, procList), proceduresError ? /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"red\",\n        marginTop: \"0.3rem\",\n        marginBottom: \"-0.5rem\",\n        marginLeft: \"0.8rem\",\n        fontSize: \"0.75rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1402,\n        columnNumber: 15\n      }\n    }, \"*Required & alphabetical letters only\") : \"\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1416,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"form\", {\n      noValidate: true,\n      autoComplete: \"off\",\n      onSubmit: handleAddCondButtonChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1419,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      fullWidth: true,\n      id: \"condition\",\n      label: \"Conditions\",\n      variant: \"outlined\",\n      required: true,\n      onChange: handleConditionChange,\n      helperText: \"Press 'enter' key to add one condition\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1424,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"procTags\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1434,\n        columnNumber: 13\n      }\n    }, condList), conditionsError ? /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"red\",\n        marginTop: \"0.3rem\",\n        marginBottom: \"-0.5rem\",\n        marginLeft: \"0.8rem\",\n        fontSize: \"0.75rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1436,\n        columnNumber: 15\n      }\n    }, \"*Required & alphabetical letters only\") : \"\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1450,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Autocomplete, {\n      required: true,\n      value: allState.languages,\n      onChange: handleLanguageChange,\n      id: \"language-option\",\n      options: languageList,\n      getOptionLabel: option => option,\n      renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n        label: \"Languages *\",\n        variant: \"outlined\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1460,\n          columnNumber: 17\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1452,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"procTags\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1464,\n        columnNumber: 13\n      }\n    }, langList), languageError ? /*#__PURE__*/React.createElement(\"p\", {\n      style: {\n        color: \"red\",\n        marginTop: \"0.2rem\",\n        marginBottom: \"-0.5rem\",\n        marginLeft: \"0.8rem\",\n        fontSize: \"0.75rem\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1466,\n        columnNumber: 15\n      }\n    }, \"*Required\") : \"\", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1480,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1481,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1482,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(Button, {\n      disabled: submitError,\n      variant: \"contained\",\n      color: \"primary\",\n      style: {\n        textTransform: \"none\",\n        float: \"right\"\n      },\n      size: \"large\",\n      onClick: sendProfile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1483,\n        columnNumber: 13\n      }\n    }, \"Submit\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1493,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1494,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1495,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1496,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 1,\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1498,\n        columnNumber: 11\n      }\n    })));\n  }\n}\n\nconst mapStateToProps = state => ({\n  credentials: state.user.credentials,\n  doctorData: state.user.doctorData,\n  specialtyList: state.user.specialtyList,\n  conditionsList: state.user.conditionsList\n});\n\nconst mapActionsToProps = {\n  sendProfileToSpec,\n  deleteProfileInSpec,\n  sendAccountProfile,\n  sendSpecList,\n  sendCondList,\n  publish\n};\nexport default connect(mapStateToProps, mapActionsToProps)(DocEditProfile); // ---------------  autocomplete lists (need to add more later) ---------------- //\n\nconst hospitals = [\"Pantai Hospital Kuala Lumpur\", \"Sunway Medical Centre\"];\nconst states = [\"Kuala Lumpur\", \"Selangor\", \"Johor\", \"Melaka\", \"Negeri Sembilan\", \"Penang\", \"Perak\", \"Kelantan\", \"Terengganu\", \"Kedah\", \"Pulau Pinang\", \"Perlis\", \"Sabah\", \"Sarawak\", \"Labuan\", \"Putrajaya\"];\nconst specialties = [\"Allergy and Immunology\", \"Anesthesiology\", \"Arthroplasty\", \"Gastroenterology\"];\nconst languageList = [\"English\", \"Malay\", \"Mandarin\", \"Tamil\"];","map":{"version":3,"sources":["/Users/andychenhe/Desktop/may10_michelle 2/src/Components/docAccount/DocEditProfile.js"],"names":["React","useEffect","makeStyles","Box","Typography","Button","Switch","Grid","TextField","Select","InputLabel","MenuItem","FormControl","Autocomplete","RemoveIcon","Snackbar","MuiAlert","Radio","RadioGroup","FormControlLabel","FormLabel","Checkbox","Chip","Hidden","IconButton","ArrowBackIosIcon","CircularProgress","Link","connect","Alert","sendProfileToSpec","sendAccountProfile","sendSpecList","sendCondList","deleteProfileInSpec","publish","useStyles","theme","anchor","display","paddingTop","marginTop","chip","marginRight","DocEditProfile","props","classes","allState","setAllState","useState","firstName","lastName","gender","yearsOfPractice","hospital","removedHospital","type","phone","buildingInfo","street","city","state","postalCode","call","online","email","onsite","callNumber","onlineLink","emailAddress","specialty","removedSpecialty","qualifications","procedures","newProc","conditions","removedConditions","newCond","languages","specOrNot","hospOrNot","open","setOpen","renderCount","setRenderCount","list","setList","specialtyList","conditionsList","setPublish","console","log","displayStoredData","getStoredData","then","res","Object","keys","length","window","scrollTo","userInfo","profile","searchInfo","apptThings","appointment","status","content","catch","error","credentials","storedSearchInfo","doctorData","handlePublishChange","event","data","target","checked","handleFirstNameChange","value","handleLastNameChange","handleGenderChange","handleYearsOfPracticeChange","handleHospitalChange","textContent","handleHospTypeChange","handlePhoneChange","handleBuildingInfoChange","handleStreetChange","handleCityChange","handleStateChange","handlePostalCodeChange","handleAppointmentChange","name","handleCallNumberChange","handleOnlineLinkChange","handleEmailAddressChange","handleSpecialtyChange","handleQualificationsChange","procList","map","oneProc","procFilter","filter","entry","handleProcedureChange","newProcValue","handleAddProcButtonChange","preventDefault","newList","push","includes","document","getElementById","condList","oneCond","condFilter","handleConditionChange","newCondValue","handleAddCondButtonChange","langList","oneLang","langFilter","handleLanguageChange","newLang","onload","reloading","sessionStorage","getItem","removeItem","sendProfile","currentSpec","removedSpec","localeCompare","currentCond","removedCond","added","x","removed","forEach","one","toUpperCase","slice","currentHospital","deleteInfo","accountData","specData","address","deleted","specListData","condListData","delay","ms","Promise","setTimeout","reload","location","setItem","personalError","workError","apptError","expertiseError","firstNameError","lastNameError","yearsOfPracticeError","hospitalError","typeError","phoneError","streetError","cityError","stateError","postalCodeError","callNumError","onlineLinkError","emailAddressError","letterRegex","procNotLetter","procedureList","match","condNotLetter","conditionList","specialtyError","qualificationsError","proceduresError","conditionsError","languageError","submitError","marginLeft","marginBottom","hospitals","option","params","color","fontSize","states","specialties","languageList","textTransform","float","mapStateToProps","user","mapActionsToProps"],"mappings":"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","sourcesContent":["// -------------------- ------------------------- //\n// 你需要去app.js, userReducer, userAction, type, 加入其他东西\n\nimport React, { useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\nimport Switch from \"@material-ui/core/Switch\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Select from \"@material-ui/core/Select\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport RemoveIcon from \"@material-ui/icons/RemoveCircleOutlineSharp\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormLabel from \"@material-ui/core/FormLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nimport {\n  // to \"specialties\" collection\n  sendProfileToSpec,\n\n  // to \"users\" collection\n  sendAccountProfile,\n\n  // to \"inputList\" collection\n  sendSpecList,\n  sendCondList,\n\n  // disable original account if doctor has changed hospital/specialty in \"specialties\" collection\n  deleteProfileInSpec,\n  publish,\n} from \"../../redux/actions/userActions\";\n\nconst useStyles = makeStyles((theme) => ({\n  anchor: {\n    display: \"block\",\n    paddingTop: 100,\n    marginTop: -100,\n  },\n  chip: {\n    marginTop: \"0.3rem\",\n    marginRight: \"0.3rem\",\n  },\n}));\n\n// doctor edit profile\nfunction DocEditProfile(props) {\n  const classes = useStyles();\n\n  // --------------------------- initialize states --------------------------- //\n\n  // putting most inputs in one state, initialize states\n  const [allState, setAllState] = React.useState({\n    // personal\n    firstName: \"\",\n    lastName: \"\",\n    gender: \"\",\n    yearsOfPractice: \"\",\n\n    // work\n    hospital: \"\",\n\n    // check if hospital has changed\n    removedHospital: \"\",\n    type: \"\",\n    phone: \"\",\n    buildingInfo: \"\",\n    street: \"\",\n    city: \"\",\n    state: \"\",\n    postalCode: \"\",\n\n    // appt\n    call: false,\n    online: false,\n    email: false,\n    onsite: true,\n\n    callNumber: \"\",\n    onlineLink: \"\",\n    emailAddress: \"\",\n\n    // expertise\n    specialty: \"\",\n\n    // check if specialty has changed\n    removedSpecialty: \"\",\n    qualifications: \"\",\n    procedures: [],\n\n    // to store one procedure entered\n    newProc: \"\",\n    conditions: [],\n\n    // check if conditions have changed\n    removedConditions: [],\n\n    // to store one condition entered\n    newCond: \"\",\n    languages: [],\n\n    // to enable publish if there is spec/hosp info in database (user already filled out and submitted the profile)\n    specOrNot: \"\",\n    hospOrNot: \"\",\n  });\n\n    // submit success alert\n    const [open, setOpen] = React.useState(false);\n\n  // to stop fetching data after the first round\n  const [renderCount, setRenderCount] = React.useState(0);\n\n  // to store inputList (specialty & conditions) data returned from database so I can compare and send new lists to replace the ones in database\n  const [list, setList] = React.useState({\n    specialtyList: {},\n    conditionsList: {},\n  });\n\n  //publish switch\n  const [publish, setPublish] = React.useState(false);\n\n  // -------------------------------------------------------------------- //\n\n  // get data\n  // only call useEffect if renderCount = 0 (will be updated to 1 if stored data\n  useEffect(() => {\n    console.log('mission start');\n    if (renderCount == 0) {\n      console.log('in the mission');\n      displayStoredData();\n    }\n  });\n\n  // wait for data to get here and set state\n  const displayStoredData = () => {\n    getStoredData()\n      .then((res) => {\n        // if the doctor had filled out the profile previously\n        console.log('resData');\n        // console.log(Object.keys(res[0]).length > 0);\n        if (res[0] && res[1] && res[2] && res[3] && Object.keys(res[0]).length > 0 && Object.keys(res[1]).length > 0 && Object.keys(res[2]).length > 0) {\n          window.scrollTo(0, 0);\n\n          // data -> from doctor account\n          const userInfo = res[0].profile;\n          // data -> from specialty data\n          const searchInfo = res[1];\n\n          const apptThings = res[1].appointment;\n\n          // set state\n          setAllState({\n            ...allState,\n            // personal\n            firstName: userInfo.firstName,\n            lastName: userInfo.lastName,\n            gender: userInfo.gender,\n            yearsOfPractice: searchInfo.yearsOfPractice,\n\n            // work\n            hospital: searchInfo.hospital,\n            removedHospital: searchInfo.hospital,\n            type: searchInfo.type,\n            phone: searchInfo.phone,\n            buildingInfo: userInfo.buildingInfo,\n            street: userInfo.street,\n            city: userInfo.city,\n            state: userInfo.state,\n            postalCode: userInfo.postalCode,\n\n            // appt\n            call: apptThings.call.status,\n            online: apptThings.online.status,\n            email: apptThings.email.status,\n            onsite: apptThings.onsite.status,\n\n            callNumber: apptThings.call.content,\n            onlineLink: apptThings.online.content,\n            emailAddress: apptThings.email.content,\n\n            // expertise\n            specialty: searchInfo.specialty,\n            removedSpecialty: searchInfo.specialty,\n            qualifications: searchInfo.qualifications,\n            procedures: searchInfo.procedures,\n            conditions: searchInfo.conditions,\n            removedConditions: searchInfo.conditions,\n            languages: searchInfo.languages,\n\n            specOrNot: userInfo.specialty,\n            hospOrNot: userInfo.hospital,\n          });\n\n          setList({\n            specialtyList: res[2],\n            conditionsList: res[3],\n          });\n\n          setPublish(searchInfo.publish);\n\n          setRenderCount(1);\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  // wait for returned props from firebase to be ready\n  let getStoredData = async () => {\n    console.log('get data');\n    // data from specialty and doctor account profile\n    // let [\n    // //   // doctors's personal data in \"users\" collection\n    //   userInfo,\n\n    // //   // doctor account info in \"specialties\" collection (search data)\n    //   storedSearchInfo,\n\n    // //   // data from \"inputList\" collection\n    //   specialtyList,\n    //   conditionsList,\n    // ] = await Promise.all([\n    //   props.credentials,\n    //   props.doctorData,\n    //   props.specialtyList,\n    //   props.conditionsList,\n    // ]);\n\n    let userInfo = props.credentials;\n    let storedSearchInfo = props.doctorData;\n    let specialtyList = props.specialtyList;\n    let conditionsList = props.conditionsList;\n    return [userInfo, storedSearchInfo, specialtyList, conditionsList];\n  };\n\n  // submit success snackbar\n  // const [open, setOpen] = React.useState(false);\n\n  // const openSuccessMsg = () => {\n  //   setOpen(true);\n  // };\n\n  // const closeSuccessMsg = (event, reason) => {\n  //   if (reason === \"clickaway\") {\n  //     return;\n  //   }\n  //   setOpen(false);\n  // };\n\n  // -------------------- functions to change state ------------------------- //\n\n  // change publish status\n  const handlePublishChange = (event) => {\n    let data;\n    setPublish(event.target.checked);\n    data = {\n      specialty: allState.specialty,\n      hospital: allState.hospital,\n      publish: event.target.checked,\n    };\n    props.publish(data);\n  };\n\n  // personal\n  //first name\n  const handleFirstNameChange = (event) => {\n    setAllState({\n      ...allState,\n      firstName: event.target.value,\n    });\n  };\n\n  //last name\n  const handleLastNameChange = (event) => {\n    setAllState({\n      ...allState,\n      lastName: event.target.value,\n    });\n  };\n\n  //gender\n  const handleGenderChange = (event) => {\n    setAllState({\n      ...allState,\n      gender: event.target.value,\n    });\n  };\n\n  // years of practice\n  const handleYearsOfPracticeChange = (event) => {\n    setAllState({\n      ...allState,\n      yearsOfPractice: event.target.value,\n    });\n  };\n\n  // -------------------------------------------------------------------- //\n\n  // work\n  // hospital name\n  const handleHospitalChange = (event) => {\n    setAllState({\n      ...allState,\n      hospital: event.target.textContent,\n    });\n  };\n\n  //hospital type\n  const handleHospTypeChange = (event) => {\n    setAllState({\n      ...allState,\n      type: event.target.value,\n    });\n  };\n\n  //phone\n  const handlePhoneChange = (event) => {\n    setAllState({\n      ...allState,\n      phone: event.target.value,\n    });\n  };\n\n  //unit number\n  const handleBuildingInfoChange = (event) => {\n    setAllState({\n      ...allState,\n      buildingInfo: event.target.value,\n    });\n  };\n\n  //street name\n  const handleStreetChange = (event) => {\n    setAllState({\n      ...allState,\n      street: event.target.value,\n    });\n  };\n\n  //unit number\n  const handleCityChange = (event) => {\n    setAllState({\n      ...allState,\n      city: event.target.value,\n    });\n  };\n\n  //state\n  const handleStateChange = (event) => {\n    setAllState({\n      ...allState,\n      state: event.target.textContent,\n    });\n  };\n\n  //postal code\n  const handlePostalCodeChange = (event) => {\n    setAllState({\n      ...allState,\n      postalCode: event.target.value,\n    });\n  };\n\n  // -------------------------------------------------------------------- //\n\n  // appt status\n  const handleAppointmentChange = (event) => {\n    setAllState({\n      ...allState,\n      [event.target.name]: event.target.checked,\n    });\n  };\n\n  //call number\n  const handleCallNumberChange = (event) => {\n    setAllState({\n      ...allState,\n      callNumber: event.target.value,\n    });\n  };\n\n  //online link\n  const handleOnlineLinkChange = (event) => {\n    setAllState({\n      ...allState,\n      onlineLink: event.target.value,\n    });\n  };\n\n  //email address\n  const handleEmailAddressChange = (event) => {\n    setAllState({\n      ...allState,\n      emailAddress: event.target.value,\n    });\n  };\n\n  // -------------------------------------------------------------------- //\n\n  // expertise\n  //specialty\n  const handleSpecialtyChange = (event) => {\n    setAllState({\n      ...allState,\n      specialty: event.target.textContent,\n    });\n  };\n\n  //qualifications\n  const handleQualificationsChange = (event) => {\n    setAllState({\n      ...allState,\n      qualifications: event.target.value,\n    });\n  };\n\n  // procedure\n  // list to generate one chip for each procedure\n  let procList;\n\n  if (allState.procedures) {\n    procList = allState.procedures.map((oneProc) => {\n      return (\n        <Chip\n          className={classes.chip}\n          size=\"small\"\n          label={oneProc}\n          key={oneProc}\n          // delete one chip\n          onDelete={() => {\n            const procFilter = allState.procedures.filter(\n              (entry) => entry != oneProc\n            );\n            setAllState({\n              ...allState,\n              procedures: procFilter,\n            });\n          }}\n        />\n      );\n    });\n  }\n\n  // store one procedure entered by the user to be used below\n  const handleProcedureChange = (event) => {\n    const newProcValue = event.target.value;\n    setAllState({\n      ...allState,\n      newProc: newProcValue,\n    });\n  };\n\n  // after pressing \"enter\", the new value stored will be pushed to the array generating procedure chips\n  const handleAddProcButtonChange = (event) => {\n    event.preventDefault();\n    if (!allState.procedures) {\n      const newList = [];\n      newList.push(allState.newProc);\n      setAllState({\n        ...allState,\n        procedures: newList,\n      });\n    } else if (\n      // because user can enter two words for one procedure (ex: \"XX XX\"), so I cannot disable user from\n      // entering empty spaces otherwise space in between words won't be allowed. I have disabled several\n      // empty space cases here and hopefully users will not enter more than 3 empty spaces. We can fix this later.\n\n      !allState.procedures.includes(allState.newProc) &&\n      allState.newProc != \"\" &&\n      allState.newProc != \" \" &&\n      allState.newProc != \"  \" &&\n      allState.newProc != \"   \" &&\n      allState.newProc != \"    \"\n    ) {\n      setAllState({\n        ...allState,\n        procedures: [...allState.procedures, allState.newProc],\n        newProc: \"\",\n      });\n    }\n    // clear the text field after one procedure chip is generated and listed under the textfield\n    document.getElementById(\"procedure\").value = \"\";\n  };\n\n  // condition\n  // generate one chip for each condition\n  let condList;\n\n  if (allState.conditions) {\n    condList = allState.conditions.map((oneCond) => {\n      return (\n        <Chip\n          className={classes.chip}\n          size=\"small\"\n          label={oneCond}\n          key={oneCond}\n          // delete one chip\n          onDelete={() => {\n            const condFilter = allState.conditions.filter(\n              (entry) => entry != oneCond\n            );\n            setAllState({\n              ...allState,\n              conditions: condFilter,\n            });\n          }}\n        />\n      );\n    });\n  }\n\n  // store one procedure entered by the user to be used below\n  const handleConditionChange = (event) => {\n    const newCondValue = event.target.value;\n    setAllState({\n      ...allState,\n      newCond: newCondValue,\n    });\n  };\n\n  // after pressing \"enter\", the new value entered & stored will be pushed to the array generating procedure chips\n  const handleAddCondButtonChange = (event) => {\n    event.preventDefault();\n    if (!allState.conditions) {\n      const newList = [];\n      newList.push(allState.newCond);\n      setAllState({\n        ...allState,\n        conditions: newList,\n      });\n    } else if (\n      !allState.conditions.includes(allState.newCond) &&\n      allState.newCond != \"\" &&\n      allState.newCond != \" \" &&\n      allState.newCond != \"  \" &&\n      allState.newCond != \"   \" &&\n      allState.newCond != \"    \"\n    ) {\n      setAllState({\n        ...allState,\n        conditions: [...allState.conditions, allState.newCond],\n        newCond: \"\",\n      });\n    }\n    // clear the text field\n    document.getElementById(\"condition\").value = \"\";\n  };\n\n  // languages\n  // generate one chip for each language\n  let langList;\n\n  if (allState.languages) {\n    langList = allState.languages.map((oneLang) => {\n      return (\n        <Chip\n          className={classes.chip}\n          size=\"small\"\n          label={oneLang}\n          key={oneLang}\n          // delete one chip\n          onDelete={() => {\n            const langFilter = allState.languages.filter(\n              (entry) => entry != oneLang\n            );\n            setAllState({\n              ...allState,\n              languages: langFilter,\n            });\n          }}\n        />\n      );\n    });\n  }\n\n  // add one language to the array generating chips\n  const handleLanguageChange = (event) => {\n    event.preventDefault();\n    const newLang = event.target.textContent;\n    if (!allState.languages) {\n      const newList = [];\n      newList.push(newLang);\n      setAllState({\n        ...allState,\n        languages: newList,\n      });\n    } else if (!allState.languages.includes(newLang) && newLang != \"\") {\n      setAllState({\n        ...allState,\n        languages: [...allState.languages, newLang],\n      });\n    }\n    document.getElementById(\"language-option\").value = \"\";\n  };\n\n  // ------------------  after pressing submit button -------------------------- //\n\n  // reload window after submission，and display \"successfuly submitted\" message\n  window.onload = function () {\n    var reloading = sessionStorage.getItem(\"reloading\");\n    if (reloading) {\n      sessionStorage.removeItem(\"reloading\");\n      // display \"successfully submitted\" message\n      setOpen(true);\n    }\n  };\n\n\n\n\n  // send profile info to firebase after pressing \"submit\" button\n\n  const sendProfile = (event) => {\n    // calculation for new \"specialty list\" send to \"inputList\" collection\n    const currentSpec = allState.specialty;\n    const removedSpec = allState.removedSpecialty;\n    const specialtyList = list.specialtyList;\n\n    // if current != removed (doctor changed the specialty), make changes to the specialty list\n    // -- for new spec:\n    //    -- if the current selected spec already exists in the list, +1 for the spec, if not, add it to the list and give it a count of 0\n    // -- for removed spec:\n    //    -- if the count for the removed spec is > 1, -1 for that spec in the list, otherwise set it to 0\n\n    if (currentSpec.localeCompare(removedSpec)) {\n      if (Object.keys(specialtyList).includes(currentSpec)) {\n        specialtyList[currentSpec]++;\n      } else {\n        specialtyList[currentSpec] = 1;\n      }\n      if (specialtyList[removedSpec] > 1) {\n        specialtyList[removedSpec]--;\n      } else {\n        specialtyList[removedSpec] = 0;\n      }\n    }\n\n    // calculation for new \"condition list\" send to \"inputList\" collection\n    let currentCond = allState.conditions;\n    let removedCond = allState.removedConditions;\n    let conditionsList = list.conditionsList;\n\n    // check the difference (added and removed) between 2 lists\n    let added = currentCond.filter((x) => !removedCond.includes(x));\n    let removed = removedCond.filter((x) => !currentCond.includes(x));\n\n    // if new conditions are added by the doctor, add them to the condition list\n    // if any conditions are removed, -1 or set to 0 similar to what I did to specialty list above\n    if (added.length > 0) {\n      added.forEach((one) => {\n        one = one[0].toUpperCase() + one.slice(1);\n        if (Object.keys(conditionsList).includes(one)) {\n          conditionsList[one]++;\n        } else {\n          conditionsList[one] = 1;\n        }\n      });\n    }\n    if (removed.length > 0) {\n      removed.forEach((one) => {\n        one = one[0].toUpperCase() + one.slice(1);\n        if (conditionsList[one] > 1) {\n          conditionsList[one]--;\n        } else {\n          conditionsList[one] = 0;\n        }\n      });\n    }\n\n    // calculation for disabling original doctor profile in \"specialties\" collection if the doctor has changed hospital/specialty\n    const removedHospital = allState.removedHospital;\n    const currentHospital = allState.hospital;\n    if (\n      removedHospital.localeCompare(currentHospital) ||\n      currentSpec.localeCompare(removedSpec)\n    ) {\n      const deleteInfo = {\n        hospital: removedHospital,\n        specialty: removedSpec,\n      };\n      props.deleteProfileInSpec(deleteInfo);\n    }\n\n    // ------------------  data to send  -------------------------- //\n\n    // send to account profile \"users\" collection\n    const accountData = {\n      // personal\n      firstName: allState.firstName ? allState.firstName : \"\",\n      lastName: allState.lastName ? allState.lastName : \"\",\n      gender: allState.gender ? allState.gender : \"\",\n\n      // work\n      hospital: allState.hospital ? allState.hospital : \"\",\n      buildingInfo: allState.buildingInfo ? allState.buildingInfo : \"\",\n      street: allState.street ? allState.street : \"\",\n      city: allState.city ? allState.city : \"\",\n      state: allState.state ? allState.state : \"\",\n      postalCode: allState.postalCode ? allState.postalCode : \"\",\n\n      // expertise\n      specialty: allState.specialty ? allState.specialty : \"\",\n    };\n\n    // send to account in \"specialties\" collection\n    const specData = {\n      // personal\n      name: accountData.firstName + \" \" + accountData.lastName,\n      yearsOfPractice: allState.yearsOfPractice ? allState.yearsOfPractice : \"\",\n\n      // work\n      hospital: allState.hospital ? allState.hospital : \"\",\n      type: allState.type ? allState.type : \"\",\n      phone: allState.phone ? allState.phone : \"\",\n      address:\n        accountData.buildingInfo +\n        \", \" +\n        accountData.street +\n        \", \" +\n        accountData.city +\n        \" \" +\n        accountData.postalCode +\n        \" \" +\n        accountData.state,\n\n      // appt\n      appointment: {\n        call: {\n          content: allState.callNumber ? allState.callNumber : \"\",\n          status: allState.call ? allState.call : false,\n        },\n        email: {\n          content: allState.emailAddress ? allState.emailAddress : \"\",\n          status: allState.email ? allState.email : false,\n        },\n        online: {\n          content: allState.onlineLink ? allState.onlineLink : \"\",\n          status: allState.online ? allState.online : false,\n        },\n        onsite: {\n          status: allState.onsite ? allState.onsite : false,\n        },\n      },\n\n      // expertise\n      specialty: allState.specialty ? allState.specialty : \"\",\n      qualifications: allState.qualifications ? allState.qualifications : \"\",\n      procedures: allState.procedures ? allState.procedures : [],\n      conditions: allState.conditions ? allState.conditions : [],\n      languages: allState.languages ? allState.languages : [],\n\n      // false by default\n      deleted: false,\n\n      // publish\n      publish: publish ? publish : false,\n    };\n\n    // list send to \"inputList\" collection\n    const specListData = {\n      specialtyList: specialtyList,\n    };\n\n    // list send to \"inputList\" collection\n    const condListData = {\n      conditionsList: conditionsList,\n    };\n\n    // to user account\n    props.sendAccountProfile(accountData);\n\n    // to account in specialty\n    props.sendProfileToSpec(specData);\n\n    // send specialty\n    props.sendSpecList(specListData);\n\n    // send condition list\n    props.sendCondList(condListData);\n\n    // wait for data sent to firebase before reloading the window\n    const delay = (ms) => new Promise((res) => setTimeout(res, ms));\n\n    // open submit success message\n    // openSuccessMsg();\n\n    const reload = async () => {\n      await delay(3000);\n      window.location.reload();\n    };\n    sessionStorage.setItem(\"reloading\", \"true\");\n    reload();\n  };\n\n\n\n\n\n\n\n\n\n  // -------------------------  errors --------------------------------- //\n\n  // errors (if errors, submit button is disabled)\n  let personalError;\n  let workError;\n  let apptError;\n  let expertiseError;\n\n  const firstNameError = !allState.firstName;\n  const lastNameError = !allState.lastName;\n  const yearsOfPracticeError = !allState.yearsOfPractice;\n  personalError = firstNameError || lastNameError || yearsOfPracticeError;\n\n  const hospitalError = !allState.hospital;\n  const typeError = !allState.type;\n  const phoneError = !allState.phone;\n  const streetError = !allState.street;\n  const cityError = !allState.city;\n  const stateError = !allState.state;\n  const postalCodeError = !allState.postalCode;\n  workError =\n    hospitalError ||\n    typeError ||\n    phoneError ||\n    streetError ||\n    cityError ||\n    stateError ||\n    postalCodeError;\n\n  const callNumError = allState.call && !allState.callNumber;\n  const onlineLinkError = allState.online && !allState.onlineLink;\n  const emailAddressError = allState.email && !allState.emailAddress;\n  apptError = callNumError || onlineLinkError || emailAddressError;\n\n  let letterRegex = /^\\S+(?: \\S+)*$/ && /^([^0-9]*)$/;\n\n  // only alphabetical letters are allowed for procedures\n  let procNotLetter = false;\n  if (allState.procedures) {\n    const procedureList = allState.procedures;\n    procedureList.forEach((one) => {\n      if (!one.match(letterRegex)) procNotLetter = true;\n    });\n  }\n\n  // only alphabetical letters are allowed for conditions\n  let condNotLetter = false;\n  if (allState.conditions) {\n    const conditionList = allState.conditions;\n    conditionList.forEach((one) => {\n      if (!one.match(letterRegex)) condNotLetter = true;\n    });\n  }\n\n  const specialtyError = !allState.specialty;\n  const qualificationsError = !allState.qualifications;\n  const proceduresError = allState.procedures == \"\" || procNotLetter;\n  const conditionsError = allState.conditions == \"\" || condNotLetter;\n  const languageError = allState.languages == \"\";\n  expertiseError =\n    specialtyError ||\n    qualificationsError ||\n    proceduresError ||\n    conditionsError ||\n    languageError;\n  const submitError = personalError || workError || apptError || expertiseError;\n\n  // -------------------------------------------------------------------- //\n\n  if (renderCount == 0) {\n    return (\n      <div>\n          \n        <CircularProgress\n          color=\"secondary\"\n          style={{ marginLeft: \"45%\", marginTop: \"10%\" }}\n        />\n            \n      </div>\n    );\n  } else {\n    return (\n      <a id=\"profile\" className={classes.anchor}>\n        <Grid container spacing={0}>\n          <Grid item xs={1}></Grid>\n          <Grid item xs={10} md={8}>\n            <Box display=\"flex\" mt={4} mb={3} flexWrap=\"wrap\">\n              <Box flexGrow={1} flexDirection=\"row\" mb={1}>\n                <Typography variant=\"h5\" color=\"primary\">\n                  {/* <Snackbar\n                    open={open}\n                    onClose={closeSuccessMsg}\n                    // autoHideDuration={6000}\n                  >\n                                    \n                    <MuiAlert\n                      elevation={1}\n                      variant=\"filled\"\n                      severity=\"success\"\n                      onClose={closeSuccessMsg}\n                      style={{\n                        background: \"#FF8686\",\n                        marginLeft: \"auto\",\n                        marginRight: \"auto\",\n                        marginTop: \"10%\",\n                      }}\n                    >\n                                        Documents successfully submitted!\n                                      \n                    </MuiAlert>\n                                  \n                  </Snackbar> */}\n                  {/* Back button, 手机屏幕才会出现 */}\n                  <Hidden mdUp>\n                    {/* <IconButton> */}\n                    <Link to=\"docaccount\">\n                      <ArrowBackIosIcon />\n                    </Link>\n                    {/* </IconButton> */}\n                  </Hidden>\n                  <strong>Profile</strong>\n                </Typography>\n              </Box>\n              {/* Publish/not publish switch */}\n              <Box>\n                <Switch\n                  disabled={!allState.specOrNot || !allState.hospOrNot}\n                  checked={publish}\n                  onChange={handlePublishChange}\n                  name=\"checked\"\n                />\n                <span>Publish your profile</span>\n              </Box>\n            </Box>\n             {/* success message after done submitting */}\n             {open ? (\n              <Alert style={{ marginTop: \"1rem\", marginBottom: \"1rem\" }}>\n                Successfully submitted!\n              </Alert>\n            ) : (\n              \"\"\n            )}\n            <br></br>\n            <Typography variant=\"body1\">\n              Please fill out the profile to the best of your ability. The more\n              complete your profile is, the more easily users will be able to\n              find you.<br></br>\n              <br></br> * Required\n            </Typography>\n            <br></br>\n            <br></br>\n            <Box display=\"flex\" mt={2} mb={3}>\n              <Typography variant=\"h6\" color=\"primary\">\n                Personal Information\n              </Typography>\n            </Box>\n            {/* First name */}\n            <TextField\n              fullWidth\n              error={firstNameError}\n              helperText={firstNameError ? \"*Required\" : \"\"}\n              required\n              label=\"First Name\"\n              variant=\"outlined\"\n              onChange={handleFirstNameChange}\n              defaultValue={allState.firstName}\n            />\n            <br></br>\n            <br></br>\n            {/* Last name */}\n            <TextField\n              fullWidth\n              error={lastNameError}\n              helperText={lastNameError ? \"*Required\" : \"\"}\n              required\n              label=\"Last Name\"\n              variant=\"outlined\"\n              onChange={handleLastNameChange}\n              defaultValue={allState.lastName}\n            />\n            <br></br>\n            <br></br>\n            {/* Gender */}\n            <FormControl variant=\"outlined\" fullWidth>\n              <InputLabel>Gender</InputLabel>\n              <Select\n                value={allState.gender}\n                onChange={handleGenderChange}\n                label=\"Gender\"\n                defaultValue={allState.gender}\n              >\n                <MenuItem value={\"Male\"}>Male</MenuItem>\n                <MenuItem value={\"Female\"}>Female</MenuItem>\n              </Select>\n            </FormControl>\n            <br></br>\n            <br></br>\n            {/* Years of prac */}\n            <TextField\n              fullWidth\n              required\n              error={yearsOfPracticeError}\n              helperText={yearsOfPracticeError ? \"*Required\" : \"\"}\n              label=\"Years of Practice\"\n              variant=\"outlined\"\n              onChange={handleYearsOfPracticeChange}\n              defaultValue={allState.yearsOfPractice}\n            />\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <Box display=\"flex\" mb={3}>\n              <Typography variant=\"h6\" color=\"primary\">\n                Work Information\n              </Typography>\n            </Box>\n            {/* Hospital name */}\n            <Autocomplete\n              options={hospitals}\n              getOptionLabel={(option) => option}\n              fullWidth\n              required\n              onChange={handleHospitalChange}\n              value={allState.hospital}\n              renderInput={(params) => (\n                <TextField\n                  required\n                  {...params}\n                  label=\"Hospital Name\"\n                  variant=\"outlined\"\n                />\n              )}\n            />\n            {hospitalError ? (\n              <p\n                style={{\n                  color: \"red\",\n                  marginBottom: \"-1.3rem\",\n                  marginLeft: \"0.8rem\",\n                  fontSize: \"0.75rem\",\n                }}\n              >\n                *Required\n              </p>\n            ) : (\n              \"\"\n            )}\n            <br></br>\n            <br></br>\n            {/* Hospital type */}\n            <FormControl component=\"fieldset\" required>\n              <FormLabel component=\"legend\">Hospital Type</FormLabel>\n              <RadioGroup\n                name=\"type\"\n                value={allState.type}\n                onChange={handleHospTypeChange}\n              >\n                <Box>\n                  <FormControlLabel\n                    value=\"Public\"\n                    control={<Radio required />}\n                    label=\"Public\"\n                    style={{ marginRight: 100 }}\n                  />\n                  <FormControlLabel\n                    value=\"Private\"\n                    control={<Radio required />}\n                    label=\"Private\"\n                  />\n                </Box>\n              </RadioGroup>\n            </FormControl>\n            {typeError ? (\n              <p\n                style={{\n                  color: \"red\",\n                  marginTop: \"-0.1rem\",\n                  marginBottom: \"-1rem\",\n                  marginLeft: \"0.8rem\",\n                  fontSize: \"0.75rem\",\n                }}\n              >\n                *Required\n              </p>\n            ) : (\n              \"\"\n            )}\n            <br></br>\n            <br></br>\n            {/* Work phone number */}\n            <FormControl\n              component=\"fieldset\"\n              fullWidth\n              style={{ marginBottom: 30 }}\n            >\n              <FormLabel component=\"legend\" style={{ marginBottom: 20 }}>\n                Work Phone Number\n              </FormLabel>\n              <TextField\n                required\n                fullWidth\n                error={phoneError}\n                helperText={phoneError ? \"*Required\" : \"\"}\n                label=\"Phone Number\"\n                variant=\"outlined\"\n                onChange={handlePhoneChange}\n                defaultValue={allState.phone}\n              />\n            </FormControl>\n            <br></br>\n            {/* Work address */}\n            <FormControl component=\"fieldset\" fullWidth>\n              <FormLabel component=\"legend\" style={{ marginBottom: 20 }}>\n                Work Address\n              </FormLabel>\n              <TextField\n                fullWidth\n                label=\"Building Unit/ Floor/ Block\"\n                variant=\"outlined\"\n                onChange={handleBuildingInfoChange}\n                defaultValue={allState.buildingInfo}\n              />\n            </FormControl>\n            <br></br>\n            <br></br>\n            <TextField\n              required\n              fullWidth\n              error={streetError}\n              helperText={streetError ? \"*Required\" : \"\"}\n              label=\"Street Name\"\n              variant=\"outlined\"\n              onChange={handleStreetChange}\n              defaultValue={allState.street}\n            />\n            <br></br>\n            <br></br>\n            <TextField\n              required\n              fullWidth\n              error={cityError}\n              helperText={cityError ? \"*Required\" : \"\"}\n              label=\"City\"\n              variant=\"outlined\"\n              onChange={handleCityChange}\n              defaultValue={allState.city}\n            />\n            <br></br>\n            <br></br>\n            <Autocomplete\n              fullWidth\n              options={states}\n              getOptionLabel={(option) => option}\n              onChange={handleStateChange}\n              value={allState.state}\n              renderInput={(params) => (\n                <TextField\n                  required\n                  {...params}\n                  label=\"State\"\n                  variant=\"outlined\"\n                />\n              )}\n            />\n            {stateError ? (\n              <p\n                style={{\n                  color: \"red\",\n                  marginTop: \"0.3rem\",\n                  marginBottom: \"-0.4rem\",\n                  marginLeft: \"0.8rem\",\n                  fontSize: \"0.75rem\",\n                }}\n              >\n                *Required\n              </p>\n            ) : (\n              \"\"\n            )}\n            <br></br>\n            <TextField\n              required\n              fullWidth\n              error={postalCodeError}\n              helperText={postalCodeError ? \"*Required\" : \"\"}\n              label=\"Postcode\"\n              variant=\"outlined\"\n              onChange={handlePostalCodeChange}\n              defaultValue={allState.postalCode}\n            />\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            {/* Ways to make appointment */}\n            <Box display=\"flex\" mt={2} mb={3}>\n              <Typography variant=\"h6\" color=\"primary\">\n                Ways to Make Appointment\n              </Typography>\n            </Box>\n            <FormControl component=\"fieldset\" fullWidth>\n              <Box display=\"flex\" alignItems=\"center\">\n                {/* Call */}\n                <Box mr={2} mt={1}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={allState.call}\n                        onChange={handleAppointmentChange}\n                        name=\"call\"\n                      />\n                    }\n                    label=\"Call\"\n                  />\n                </Box>\n                <Box flexGrow={1}>\n                  <TextField\n                    disabled={!allState.call}\n                    error={callNumError}\n                    helperText={callNumError ? \"*Required\" : \"\"}\n                    fullWidth\n                    required\n                    size=\"small\"\n                    label=\"Phone Number\"\n                    variant=\"outlined\"\n                    onChange={handleCallNumberChange}\n                    defaultValue={allState.callNumber}\n                  />\n                </Box>\n              </Box>\n              {/* Online */}\n              <Box display=\"flex\" alignItems=\"center\">\n                <Box mt={2}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={allState.online}\n                        onChange={handleAppointmentChange}\n                        name=\"online\"\n                      />\n                    }\n                    label=\"Online\"\n                  />\n                </Box>\n                <Box flexGrow={1} mt={2}>\n                  <TextField\n                    disabled={!allState.online}\n                    error={onlineLinkError}\n                    helperText={onlineLinkError ? \"*Required\" : \"\"}\n                    fullWidth\n                    required\n                    size=\"small\"\n                    label=\"Link\"\n                    variant=\"outlined\"\n                    onChange={handleOnlineLinkChange}\n                    defaultValue={allState.onlineLink}\n                  />\n                </Box>\n              </Box>\n              {/* Email */}\n              <Box display=\"flex\" alignItems=\"center\">\n                <Box mr={1} mt={2}>\n                  <FormControlLabel\n                    control={\n                      <Checkbox\n                        checked={allState.email}\n                        onChange={handleAppointmentChange}\n                        name=\"email\"\n                      />\n                    }\n                    label=\"Email\"\n                  />{\" \"}\n                </Box>\n                <Box flexGrow={1} mt={2}>\n                  <TextField\n                    disabled={!allState.email}\n                    error={emailAddressError}\n                    helperText={emailAddressError ? \"*Required\" : \"\"}\n                    fullWidth\n                    required\n                    size=\"small\"\n                    label=\"Email Address\"\n                    variant=\"outlined\"\n                    onChange={handleEmailAddressChange}\n                    defaultValue={allState.emailAddress}\n                  />\n                </Box>\n              </Box>\n              {/* On site */}\n              <Box mt={2}>\n                <FormControlLabel\n                  control={\n                    <Checkbox\n                      checked={allState.onsite}\n                      onChange={handleAppointmentChange}\n                      name=\"onsite\"\n                    />\n                  }\n                  label=\"On site\"\n                />\n              </Box>\n            </FormControl>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n            <Box display=\"flex\" mt={2} mb={3}>\n              <Typography variant=\"h6\" color=\"primary\">\n                Expertise\n              </Typography>\n            </Box>\n            {/* Specialty */}\n            <Autocomplete\n              fullWidth\n              required\n              options={specialties}\n              onChange={handleSpecialtyChange}\n              value={allState.specialty}\n              getOptionLabel={(option) => option}\n              renderInput={(params) => (\n                <TextField\n                  required\n                  {...params}\n                  label=\"Specialty\"\n                  variant=\"outlined\"\n                />\n              )}\n            />\n            {specialtyError ? (\n              <p\n                style={{\n                  color: \"red\",\n                  marginTop: \"0.3rem\",\n                  marginBottom: \"-0.4rem\",\n                  marginLeft: \"0.8rem\",\n                  fontSize: \"0.75rem\",\n                }}\n              >\n                *Required\n              </p>\n            ) : (\n              \"\"\n            )}\n            <br></br>\n            {/* Qualifications */}\n            <TextField\n              fullWidth\n              required\n              error={qualificationsError}\n              helperText={qualificationsError ? \"*Required\" : \"\"}\n              label=\"Qualifications\"\n              variant=\"outlined\"\n              onChange={handleQualificationsChange}\n              defaultValue={allState.qualifications}\n            />\n            <br></br>\n            <br></br>\n            {/* Add procedure */}\n            <form\n              noValidate\n              autoComplete=\"off\"\n              onSubmit={handleAddProcButtonChange}\n            >\n              <TextField\n                fullWidth\n                id=\"procedure\"\n                label=\"Procedures\"\n                variant=\"outlined\"\n                required\n                onChange={handleProcedureChange}\n                helperText={\"Press 'enter' key to add one procedure\"}\n              />\n            </form>\n\n            <div id=\"procTags\">{procList}</div>\n            {proceduresError ? (\n              <p\n                style={{\n                  color: \"red\",\n                  marginTop: \"0.3rem\",\n                  marginBottom: \"-0.5rem\",\n                  marginLeft: \"0.8rem\",\n                  fontSize: \"0.75rem\",\n                }}\n              >\n                *Required & alphabetical letters only\n              </p>\n            ) : (\n              \"\"\n            )}\n            <br></br>\n            {/* Add condition */}\n\n            <form\n              noValidate\n              autoComplete=\"off\"\n              onSubmit={handleAddCondButtonChange}\n            >\n              <TextField\n                fullWidth\n                id=\"condition\"\n                label=\"Conditions\"\n                variant=\"outlined\"\n                required\n                onChange={handleConditionChange}\n                helperText={\"Press 'enter' key to add one condition\"}\n              />\n            </form>\n            <div id=\"procTags\">{condList}</div>\n            {conditionsError ? (\n              <p\n                style={{\n                  color: \"red\",\n                  marginTop: \"0.3rem\",\n                  marginBottom: \"-0.5rem\",\n                  marginLeft: \"0.8rem\",\n                  fontSize: \"0.75rem\",\n                }}\n              >\n                *Required & alphabetical letters only\n              </p>\n            ) : (\n              \"\"\n            )}\n            <br></br>\n            {/* Languages */}\n            <Autocomplete\n              required\n              value={allState.languages}\n              onChange={handleLanguageChange}\n              id=\"language-option\"\n              options={languageList}\n              getOptionLabel={(option) => option}\n              renderInput={(params) => (\n                <TextField {...params} label=\"Languages *\" variant=\"outlined\" />\n              )}\n            />\n\n            <div id=\"procTags\">{langList}</div>\n            {languageError ? (\n              <p\n                style={{\n                  color: \"red\",\n                  marginTop: \"0.2rem\",\n                  marginBottom: \"-0.5rem\",\n                  marginLeft: \"0.8rem\",\n                  fontSize: \"0.75rem\",\n                }}\n              >\n                *Required\n              </p>\n            ) : (\n              \"\"\n            )}\n            <br></br>\n            <br></br>\n            <br></br>\n            <Button\n              disabled={submitError}\n              variant=\"contained\"\n              color=\"primary\"\n              style={{ textTransform: \"none\", float: \"right\" }}\n              size=\"large\"\n              onClick={sendProfile}\n            >\n              Submit\n            </Button>\n            <br></br>\n            <br></br>\n            <br></br>\n            <br></br>\n          </Grid>\n          <Grid item xs={1} md={3}></Grid>\n        </Grid>\n      </a>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  credentials: state.user.credentials,\n  doctorData: state.user.doctorData,\n  specialtyList: state.user.specialtyList,\n  conditionsList: state.user.conditionsList,\n});\n\nconst mapActionsToProps = {\n  sendProfileToSpec,\n  deleteProfileInSpec,\n  sendAccountProfile,\n  sendSpecList,\n  sendCondList,\n  publish,\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(DocEditProfile);\n\n// ---------------  autocomplete lists (need to add more later) ---------------- //\n\nconst hospitals = [\"Pantai Hospital Kuala Lumpur\", \"Sunway Medical Centre\"];\n\nconst states = [\n  \"Kuala Lumpur\",\n  \"Selangor\",\n  \"Johor\",\n  \"Melaka\",\n  \"Negeri Sembilan\",\n  \"Penang\",\n  \"Perak\",\n  \"Kelantan\",\n  \"Terengganu\",\n  \"Kedah\",\n  \"Pulau Pinang\",\n  \"Perlis\",\n  \"Sabah\",\n  \"Sarawak\",\n  \"Labuan\",\n  \"Putrajaya\",\n];\n\nconst specialties = [\n  \"Allergy and Immunology\",\n  \"Anesthesiology\",\n  \"Arthroplasty\",\n  \"Gastroenterology\",\n];\n\nconst languageList = [\"English\", \"Malay\", \"Mandarin\", \"Tamil\"];"]},"metadata":{},"sourceType":"module"}