{"ast":null,"code":"var _jsxFileName = \"/Users/andychenhe/Desktop/may10_michelle 2/src/Components/profile/DocTags.js\";\nimport React, { Fragment, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Divider from \"@material-ui/core/Divider\";\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { updateUserStoredDocTags } from \"../../redux/actions/userActions\";\nimport { updateDoctorTags } from \"../../redux/actions/dataActions\";\nconst useStyles = makeStyles(theme => ({\n  editTagDialog: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0\n  },\n  tag: {\n    margin: theme.spacing(0.5)\n  },\n  tagDialog: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0,\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: 10\n    },\n    marginBottom: 20\n  },\n  editTagsButton: {\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: 20\n    }\n  },\n  line: {\n    [theme.breakpoints.down(\"xs\")]: {\n      border: \"5px solid rgba(0, 0, 0, 0.05)\"\n    }\n  },\n  reviewTagsBox: {\n    [theme.breakpoints.down(\"xs\")]: {\n      justifyContent: \"left\",\n      alignItems: \"left\",\n      marginLeft: 20\n    }\n  },\n  divider: {\n    height: 2,\n    width: 115,\n    backgroundColor: \"#FF8686\"\n  }\n})); // Edit Tags (用在DocInfo.js)\n// 目前doctor所有的tags and edit tags 都是hardcoded， 麻烦你了\n\nfunction Tags(props) {\n  const classes = useStyles(); // load user authenticate\n\n  const authenticated = props.authenticated;\n  const [allTags, setState] = React.useState({\n    currentTags: [],\n    storedUserTags: []\n  });\n  const [renderCount, setRenderCount] = React.useState(0); // only call useEffect if renderCount = 0 (will be updated to 1 if stored data\n  // in firebase is successfully set to state)\n\n  useEffect(() => {\n    if (renderCount == 0) {\n      return displayStoredData();\n    }\n  }, [allTags]);\n\n  const displayStoredData = () => {\n    // call function to get data from returned props from firebase\n    getStoredData().then(res => {\n      // set state\n      console.log(res);\n      let userStored;\n\n      if (!res[1].addedDoctorTags) {\n        userStored = \"\";\n      } else {\n        console.log();\n\n        if (!res[1].addedDoctorTags[props.targetDoc.userName]) {\n          userStored = \"\";\n        } else {\n          userStored = res[1].addedDoctorTags[props.targetDoc.userName];\n        }\n      }\n\n      setState({\n        currentTags: res[0].tags ? res[0].tags : \"\",\n        storedUserTags: userStored\n      }); // update renderCount to 1 to stop react from making any more useEffect call\n\n      setRenderCount(1);\n    }).catch(error => {\n      console.error(error);\n    });\n  }; // wait for returned props from firebase to be ready\n\n\n  let getStoredData = async () => {\n    // making two asynchronous calls: one from searchInfo and one from user credentials info\n    let [storedSearchInfo, userStoredCredentials] = await Promise.all([props.searchInfo, props.storedCredentials]);\n    return [storedSearchInfo, userStoredCredentials];\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = value => {\n    setOpen(false);\n  }; // add or remove doctor review tags: make changes to both the current doctor and user stored tags\n\n\n  const addRemoveTag = tag => {\n    let currentTagsCopy = allTags.currentTags; // if currentTagsCopy doesn't exist (no tags have been selected for this doctor before),\n    // assign index -1 (not found)\n\n    let currentTagIndex = currentTagsCopy ? currentTagsCopy.findIndex(eachTag => eachTag.tagName == tag) : -1;\n    let userStoredTagsCopy = allTags.storedUserTags; // if the userStoredTagsCopy doesn't exist (the user has never selected any tags for this\n    // doctor before), assign index -1\n\n    let userStoredTagIndex = userStoredTagsCopy ? userStoredTagsCopy.indexOf(tag) : -1; // if the tag has been selected by user, which means it should also exist\n    // in the database\n\n    if (userStoredTagIndex !== -1) {\n      // remove from user selected tag list in the modal\n      userStoredTagsCopy.splice(userStoredTagIndex, 1); // decrease this tag's count for this doctor in database; this tag should\n      // have already existed in the database since the user selected it\n\n      currentTagsCopy[currentTagIndex].count--;\n\n      if (currentTagsCopy[currentTagIndex].count == 0) {\n        currentTagsCopy.splice(currentTagIndex, 1);\n      }\n\n      setState({\n        currentTags: currentTagsCopy,\n        storedUserTags: userStoredTagsCopy\n      }); // the tag hasn't been selected by the user\n    } else {\n      // if the tag already exists in the database (other users had selected this\n      //  tag for this doctor)\n      if (currentTagIndex !== -1) {\n        // increase the count for this tag in database by 1\n        currentTagsCopy[currentTagIndex].count++;\n        setState(prevState => ({\n          currentTags: currentTagsCopy,\n          // add the new tag to this user's tag list\n          storedUserTags: [...prevState.storedUserTags, tag]\n        })); // the tag doesn't exist in the database; this is the first time a user\n        // selects this tag\n      } else {\n        setState(prevState => ({\n          // if currentTags exist (doctor had users added tags for him before), add the new tag to the list\n          // otherwise (no one had added tags for the doctor before), use the new tag to start the list\n          currentTags: allTags.currentTags ? [...prevState.currentTags, {\n            tagName: tag,\n            count: 1\n          }] : [{\n            tagName: tag,\n            count: 1\n          }],\n          // if the user has selected tags for this doctor before, add the new tag to the list\n          // otherwise, use the new tag to start a list\n          storedUserTags: allTags.storedUserTags ? [...prevState.storedUserTags, tag] : [tag]\n        }));\n      }\n    }\n  }; // create a tag list that contains all tags for this doctor\n\n\n  let tagList = allTags[\"currentTags\"] ? allTags[\"currentTags\"].map(tag => {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: tag.tagName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      key: tag.tagName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Chip, {\n      label: tag.tagName + ' (' + tag.count + ')',\n      className: classes.tag,\n      color: \"secondary\",\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }\n    })));\n  }) : \"\"; // predefined tags in edit tags diagolue\n\n  const predefinedTags = [\"Attentive\", \"Bedside Manner\", \"Empathetic\", \"Enthusiastic\", \"Friendly\", \"Honest\", \"Knowledgeable\", \"Passionate\", \"Patient\", \"Respectful\", \"Responsible\", \"Trustworthy\"];\n  let predefinedTagList = predefinedTags.map(tag => {\n    let selected; // if the user has selected any tags for this doctor before\n\n    if (allTags.storedUserTags) {\n      // if the tag exists in the user selected tag list\n      if (allTags.storedUserTags.includes(tag)) {\n        selected = true;\n      } else {\n        selected = false;\n      } // all tags have never been selected before by the user\n\n    } else {\n      selected = false;\n    }\n\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: tag,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PreDefinedTag, {\n      key: tag,\n      label: tag,\n      selected: selected,\n      addRemoveTag: addRemoveTag,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }\n    }));\n  });\n\n  const updateSelectedTags = () => {\n    const doctorNewTags = {\n      username: props.targetDoc.userName,\n      tags: allTags[\"storedUserTags\"]\n    };\n    props.updateUserStoredDocTags(doctorNewTags);\n    console.log(props.targetDoc);\n    const updateInfo = {\n      specialty: props.targetDoc.Specialty,\n      hospital: props.targetDoc.Hospital,\n      username: props.targetDoc.userName,\n      tags: allTags[\"currentTags\"]\n    };\n    props.updateDoctorTags(updateInfo);\n    setOpen(false);\n  };\n\n  if (renderCount == 0) {\n    // loading spinner if prop data is not yet available\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CircularProgress, {\n      color: \"secondary\",\n      style: {\n        marginLeft: '45%',\n        marginTop: '5%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Hidden, {\n      smUp: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"hr\", {\n      className: classes.line,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Box, {\n      mt: 2,\n      mb: 2,\n      display: \"flex\",\n      flexDirection: \"column\",\n      className: classes.reviewTagsBox,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h6\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 13\n      }\n    }, \"Review Tags\"), /*#__PURE__*/React.createElement(Divider, {\n      className: classes.divider,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.tagDialog,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }\n    }, tagList, \" \", authenticated ? /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      startIcon: /*#__PURE__*/React.createElement(EditOutlinedIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 26\n        }\n      }),\n      onClick: handleClickOpen,\n      style: {\n        textTransform: \"none\"\n      },\n      className: classes.editTagsButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 13\n      }\n    }, \"Edit Tags\") :\n    /*#__PURE__*/\n    // michelle 5/16: 这边原来是“”  现在用下面的button替换掉\n    React.createElement(Button, {\n      color: \"primary\",\n      startIcon: /*#__PURE__*/React.createElement(EditOutlinedIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 26\n        }\n      }),\n      onClick: () => props.handleLoginOpen(\"Tag\"),\n      style: {\n        textTransform: \"none\"\n      },\n      className: classes.editTagsButton,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 15\n      }\n    }, \"Edit Tags\")), /*#__PURE__*/React.createElement(Dialog, {\n      onClose: handleClose,\n      open: open,\n      maxWidth: \"xs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"Body\",\n      style: {\n        margin: 20\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 11\n      }\n    }, \"Please select tag(s) that best describe this doctor from the list below:\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.editTagDialog,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 11\n      }\n    }, predefinedTagList), /*#__PURE__*/React.createElement(DialogActions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: updateSelectedTags,\n      variant: \"outlined\",\n      color: \"primary\",\n      style: {\n        textTransform: \"none\",\n        margin: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 13\n      }\n    }, \"Done\"))));\n  }\n}\n\nfunction PreDefinedTag(props) {\n  const classes = useStyles();\n  const [selected, selectUnselectTag] = React.useState(props.selected);\n\n  const handleClick = () => {\n    selectUnselectTag(!selected);\n    props.addRemoveTag(props.label);\n  };\n\n  return /*#__PURE__*/React.createElement(\"li\", {\n    key: props.key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Chip, {\n    label: props.label,\n    className: classes.tag,\n    color: \"secondary\",\n    variant: selected ? \"default\" : \"secondary\",\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 377,\n      columnNumber: 7\n    }\n  }));\n}\n\nTags.propTypes = {\n  updateUserStoredDocTags: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  authenticated: state.user.authenticated,\n  storedCredentials: state.user.credentials,\n  searchInfo: state.data.searchInfo\n});\n\nconst mapActionsToProps = {\n  updateUserStoredDocTags,\n  updateDoctorTags\n};\nexport default connect(mapStateToProps, mapActionsToProps)(Tags);","map":{"version":3,"sources":["/Users/andychenhe/Desktop/may10_michelle 2/src/Components/profile/DocTags.js"],"names":["React","Fragment","useEffect","makeStyles","Dialog","Chip","Button","Box","Typography","DialogActions","Hidden","Divider","EditOutlinedIcon","CircularProgress","connect","PropTypes","updateUserStoredDocTags","updateDoctorTags","useStyles","theme","editTagDialog","display","justifyContent","flexWrap","listStyle","padding","spacing","margin","tag","tagDialog","breakpoints","down","marginLeft","marginBottom","editTagsButton","line","border","reviewTagsBox","alignItems","divider","height","width","backgroundColor","Tags","props","classes","authenticated","allTags","setState","useState","currentTags","storedUserTags","renderCount","setRenderCount","displayStoredData","getStoredData","then","res","console","log","userStored","addedDoctorTags","targetDoc","userName","tags","catch","error","storedSearchInfo","userStoredCredentials","Promise","all","searchInfo","storedCredentials","open","setOpen","handleClickOpen","handleClose","value","addRemoveTag","currentTagsCopy","currentTagIndex","findIndex","eachTag","tagName","userStoredTagsCopy","userStoredTagIndex","indexOf","splice","count","prevState","tagList","map","predefinedTags","predefinedTagList","selected","includes","updateSelectedTags","doctorNewTags","username","updateInfo","specialty","Specialty","hospital","Hospital","marginTop","textTransform","handleLoginOpen","PreDefinedTag","selectUnselectTag","handleClick","label","key","propTypes","func","isRequired","mapStateToProps","state","user","credentials","data","mapActionsToProps"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Divider from \"@material-ui/core/Divider\";\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport { updateUserStoredDocTags } from \"../../redux/actions/userActions\";\n\nimport { updateDoctorTags } from \"../../redux/actions/dataActions\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  editTagDialog: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0,\n  },\n  tag: {\n    margin: theme.spacing(0.5),\n  },\n\n  tagDialog: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0,\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: 10,\n    },\n    marginBottom: 20,\n  },\n\n  editTagsButton: {\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: 20,\n    },\n  },\n\n  line: {\n    [theme.breakpoints.down(\"xs\")]: {\n      border: \"5px solid rgba(0, 0, 0, 0.05)\",\n    },\n  },\n  reviewTagsBox: {\n    [theme.breakpoints.down(\"xs\")]: {\n      justifyContent: \"left\",\n      alignItems: \"left\",\n      marginLeft: 20,\n    },\n  },\n  divider: {\n    height: 2,\n    width: 115,\n    backgroundColor: \"#FF8686\",\n  },\n}));\n\n\n\n\n// Edit Tags (用在DocInfo.js)\n// 目前doctor所有的tags and edit tags 都是hardcoded， 麻烦你了\nfunction Tags(props) {\n\n  const classes = useStyles();\n  // load user authenticate\n  const authenticated = props.authenticated;\n\n  const [allTags, setState] = React.useState({\n    currentTags: [],\n    storedUserTags: []\n  })\n\n  const [renderCount, setRenderCount] = React.useState(0);\n\n\n  // only call useEffect if renderCount = 0 (will be updated to 1 if stored data\n  // in firebase is successfully set to state)\n  useEffect(() => {\n    if (renderCount == 0) {\n      return displayStoredData();\n    }\n  }, [allTags]);\n\n  const displayStoredData = () => {\n    // call function to get data from returned props from firebase\n    getStoredData()\n      .then((res) => {\n        // set state\n        console.log(res);\n        let userStored;\n        if (!res[1].addedDoctorTags) {\n          userStored = \"\";\n        } else {\n          console.log()\n          if (!res[1].addedDoctorTags[props.targetDoc.userName]) {\n            userStored = \"\";\n          } else {\n            userStored = res[1].addedDoctorTags[props.targetDoc.userName];\n          }\n        }\n        setState({\n          currentTags: res[0].tags ? res[0].tags : \"\",\n          storedUserTags: userStored\n        })\n        // update renderCount to 1 to stop react from making any more useEffect call\n        setRenderCount(1);\n      }).catch((error) => {\n        console.error(error);\n      })\n  }\n\n  // wait for returned props from firebase to be ready\n  let getStoredData = async () => {\n    // making two asynchronous calls: one from searchInfo and one from user credentials info\n    let [storedSearchInfo, userStoredCredentials] =\n      await Promise.all([props.searchInfo, props.storedCredentials]);\n    return [storedSearchInfo, userStoredCredentials];\n  }\n\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (value) => {\n    setOpen(false);\n  };\n\n\n  // add or remove doctor review tags: make changes to both the current doctor and user stored tags\n  const addRemoveTag = (tag) => {\n    let currentTagsCopy = allTags.currentTags;\n    // if currentTagsCopy doesn't exist (no tags have been selected for this doctor before),\n    // assign index -1 (not found)\n    let currentTagIndex = currentTagsCopy ? currentTagsCopy.findIndex(eachTag => eachTag.tagName == tag) : -1;\n\n    let userStoredTagsCopy = allTags.storedUserTags;\n    // if the userStoredTagsCopy doesn't exist (the user has never selected any tags for this\n    // doctor before), assign index -1\n    let userStoredTagIndex = userStoredTagsCopy ? userStoredTagsCopy.indexOf(tag) : -1;\n\n    // if the tag has been selected by user, which means it should also exist\n    // in the database\n    if (userStoredTagIndex !== -1) {\n      // remove from user selected tag list in the modal\n      userStoredTagsCopy.splice(userStoredTagIndex, 1);\n      // decrease this tag's count for this doctor in database; this tag should\n      // have already existed in the database since the user selected it\n      currentTagsCopy[currentTagIndex].count--;\n      if (currentTagsCopy[currentTagIndex].count == 0) {\n        currentTagsCopy.splice(currentTagIndex, 1);\n      }\n      setState({\n        currentTags: currentTagsCopy,\n        storedUserTags: userStoredTagsCopy\n      })\n      // the tag hasn't been selected by the user\n    } else {\n      // if the tag already exists in the database (other users had selected this\n      //  tag for this doctor)\n      if (currentTagIndex !== -1) {\n        // increase the count for this tag in database by 1\n        currentTagsCopy[currentTagIndex].count++;\n\n        setState(prevState => ({\n          currentTags: currentTagsCopy,\n          // add the new tag to this user's tag list\n          storedUserTags: [\n            ...prevState.storedUserTags, tag\n          ]\n        }))\n        // the tag doesn't exist in the database; this is the first time a user\n        // selects this tag\n      } else {\n        setState(prevState => ({\n          // if currentTags exist (doctor had users added tags for him before), add the new tag to the list\n          // otherwise (no one had added tags for the doctor before), use the new tag to start the list\n          currentTags: allTags.currentTags ? [\n            ...prevState.currentTags, { tagName: tag, count: 1 }\n          ] : [ { tagName: tag, count: 1 } ],\n          // if the user has selected tags for this doctor before, add the new tag to the list\n          // otherwise, use the new tag to start a list\n          storedUserTags: allTags.storedUserTags ? [\n            ...prevState.storedUserTags, tag\n          ] : [ tag ]\n        }))\n      }\n    }\n  }\n\n\n  // create a tag list that contains all tags for this doctor\n  let tagList = (allTags[\"currentTags\"]) ? allTags[\"currentTags\"].map(tag => {\n    return (\n      <Fragment key={tag.tagName}>\n        <li key={tag.tagName}>\n          <Chip\n            label={tag.tagName + ' (' + tag.count + ')'}\n            className={classes.tag}\n            color=\"secondary\"\n            size=\"small\"\n          />\n        </li>\n      </Fragment>\n    )\n  }) : \"\";\n\n  // predefined tags in edit tags diagolue\n  const predefinedTags = [\n    \"Attentive\",\n    \"Bedside Manner\",\n    \"Empathetic\",\n    \"Enthusiastic\",\n    \"Friendly\",\n    \"Honest\",\n    \"Knowledgeable\",\n    \"Passionate\",\n    \"Patient\",\n    \"Respectful\",\n    \"Responsible\",\n    \"Trustworthy\",\n  ]\n\n\n  let predefinedTagList = predefinedTags.map(tag => {\n    let selected;\n    // if the user has selected any tags for this doctor before\n    if (allTags.storedUserTags) {\n      // if the tag exists in the user selected tag list\n      if (allTags.storedUserTags.includes(tag)) {\n        selected = true;\n      } else {\n        selected = false;\n      }\n    // all tags have never been selected before by the user\n    } else {\n      selected = false;\n    }\n    return (\n      <Fragment key={tag}>\n        <PreDefinedTag key={tag} label={tag} selected={selected} addRemoveTag={addRemoveTag} />\n      </Fragment>\n    )\n  });\n\n  const updateSelectedTags = () => {\n    const doctorNewTags = {\n      username: props.targetDoc.userName,\n      tags: allTags[\"storedUserTags\"],\n    };\n    props.updateUserStoredDocTags(doctorNewTags);\n\n    console.log(props.targetDoc);\n    const updateInfo = {\n      specialty:props.targetDoc.Specialty,\n      hospital: props.targetDoc.Hospital,\n      username: props.targetDoc.userName,\n      tags: allTags[\"currentTags\"]\n    };\n    props.updateDoctorTags(updateInfo);\n    setOpen(false);\n  }\n\n  if (renderCount == 0) {\n    // loading spinner if prop data is not yet available\n    return (\n      <div>\n        <CircularProgress color=\"secondary\" style={{ marginLeft: '45%', marginTop: '5%' }} />\n      </div>\n    );\n\n  } else {\n\n\n    return (\n      <div>\n        <Hidden smUp>\n          <hr className={classes.line}></hr>\n          <Box\n            mt={2}\n            mb={2}\n            display=\"flex\"\n            flexDirection=\"column\"\n            className={classes.reviewTagsBox}\n          >\n            <Typography variant=\"h6\" color=\"primary\">\n              Review Tags\n          </Typography>\n            <Divider className={classes.divider} />\n          </Box>\n        </Hidden>\n        {/* 显示这个doctor现在有的tags, 目前是hardcoded的， 麻烦你了 */}\n        <div className={classes.tagDialog}>\n          {tagList}{\" \"}\n          {/* 如果登入了，edit tags的button会出现，否则不会出现 */}\n          {authenticated ? (\n            <Button\n              color=\"primary\"\n              startIcon={<EditOutlinedIcon />}\n              onClick={handleClickOpen}\n              style={{ textTransform: \"none\" }}\n              className={classes.editTagsButton}\n            >\n              Edit Tags\n          </Button>\n          ) : (\n              // michelle 5/16: 这边原来是“”  现在用下面的button替换掉\n              <Button\n              color=\"primary\"\n              startIcon={<EditOutlinedIcon />}\n              onClick={() => props.handleLoginOpen(\"Tag\")}\n              style={{ textTransform: \"none\" }}\n              className={classes.editTagsButton}\n            >\n              Edit Tags\n          </Button>\n            )}\n        </div>\n\n        <Dialog onClose={handleClose} open={open} maxWidth=\"xs\">\n          <Typography variant=\"Body\" style={{ margin: 20 }}>\n            Please select tag(s) that best describe this doctor from the list\n            below:\n        </Typography>\n          {/* 弹窗出现所有tags选项 */}\n          <div className={classes.editTagDialog}>\n            {predefinedTagList}\n          </div>\n\n          {/* Done button， 目前是点了就关掉窗口，没有save user点了什么 */}\n          <DialogActions>\n            <Button\n              onClick={updateSelectedTags}\n              variant=\"outlined\"\n              color=\"primary\"\n              style={{ textTransform: \"none\", margin: 10 }}\n            >\n              Done\n          </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    );\n  }\n}\n\nfunction PreDefinedTag(props) {\n  const classes = useStyles();\n\n  const [selected, selectUnselectTag] = React.useState(props.selected);\n\n  const handleClick = () => {\n    selectUnselectTag(!selected);\n    props.addRemoveTag(props.label);\n  };\n\n  return (\n    <li key={props.key}>\n      <Chip\n        label={props.label}\n        className={classes.tag}\n        color=\"secondary\"\n        variant={selected ? \"default\" : \"secondary\"}\n        onClick={handleClick}\n      />\n    </li>\n  )\n}\n\n\nTags.propTypes = {\n  updateUserStoredDocTags: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  authenticated: state.user.authenticated,\n  storedCredentials: state.user.credentials,\n  searchInfo: state.data.searchInfo\n});\n\nconst mapActionsToProps = {\n  updateUserStoredDocTags,\n  updateDoctorTags\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(Tags);\n\n"]},"metadata":{},"sourceType":"module"}