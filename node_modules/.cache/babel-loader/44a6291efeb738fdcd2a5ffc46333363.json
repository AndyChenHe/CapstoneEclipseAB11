{"ast":null,"code":"var _jsxFileName = \"/Users/Michelle/Downloads/may10_michelle/src/Components/docAccount/LikeHistory.js\";\nimport React, { Fragment, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\nimport DocCard from \"../../Components/results/DocCard\";\nimport HospCard from \"../../Components/results/HospitalCard\"; // import { getAllSearchData } from \"../../redux/actions/dataActions\";\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst useStyles = makeStyles(theme => ({ ...theme.account\n}));\n\nfunction LikeHistory(props) {\n  const classes = useStyles();\n  const [display, setDisplay] = React.useState(\"doctor\"); //display by doctor as default\n\n  const handleDisplay = (event, newDisplay) => {\n    if (newDisplay != null) {\n      setDisplay(newDisplay);\n    }\n  };\n\n  const [renderCount, setRenderCount] = React.useState(0);\n  const [likeHistory, setLikeHistory] = React.useState({\n    doctors: [],\n    hospitals: []\n  });\n  useEffect(() => {\n    // if (renderCount == 0) {\n    return displayStoredData(); // }\n  });\n\n  const displayStoredData = () => {\n    getStoredData().then(res => {\n      let likedDoctors;\n      let likedHospitals; // if the user has not never liked any doctors or hospitals\n\n      if (!res.likeHistory) {\n        likedDoctors = [];\n        likedHospitals = [];\n      } else {\n        likedDoctors = res.likeHistory.doctors ? res.likeHistory.doctors : [];\n        likedHospitals = res.likeHistory.hospitals ? res.likeHistory.hospitals : [];\n      }\n\n      setLikeHistory({\n        doctors: likedDoctors,\n        hospitals: likedHospitals\n      });\n      setRenderCount(1);\n    }).catch(error => {\n      console.error(error);\n    });\n  }; // wait for returned props from firebase to be ready\n\n\n  let getStoredData = async () => {\n    let userStoredCredentials = await axios.get(proxyurl + axios.defaults.baseURL + \"user\");\n    console.log(userStoredCredentials);\n    return userStoredCredentials;\n  }; // axios.get(proxyurl+axios.defaults.baseURL+\"getallsearchdata\", {\n  //   params:{\n  //     specialtyList:[\"Gastroenterology\"]\n  //   }\n  // }).then((res)=>{\n  //   console.log(res);\n  // })\n  // axios.get(proxyurl + axios.defaults.baseURL + \"user\")\n  //   .then((res) => {\n  //     let likedDoctors;\n  //     let likedHospitals;\n  //     // if the user has not never liked any doctors or hospitals\n  //     if (!res.likeHistory) {\n  //       likedDoctors = [];\n  //       likedHospitals = [];\n  //     } else {\n  //       likedDoctors = res.likeHistory.doctors ? res.likeHistory.doctors : [];\n  //       likedHospitals = res.likeHistory.hospitals ? res.likeHistory.hospitals : [];\n  //     }\n  //     setLikeHistory({\n  //       doctors: likedDoctors,\n  //       hospitals: likedHospitals\n  //     });\n  //     setRenderCount(1);\n  //   }).catch((error) => {\n  //     console.error(error);\n  //   })\n\n\n  console.log(likeHistory);\n\n  if (renderCount == 0) {\n    // loading spinner if prop data is not yet available\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(CircularProgress, {\n      color: \"secondary\",\n      style: {\n        marginLeft: '45%',\n        marginTop: '10%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    return /*#__PURE__*/React.createElement(\"a\", {\n      id: \"likehistory\",\n      className: classes.anchor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 10,\n      md: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      mt: 4,\n      mb: 3,\n      flexWrap: \"wrap\",\n      alignItems: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Box, {\n      flexGrow: 1,\n      flexDirection: \"row\",\n      mb: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      variant: \"h5\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Hidden, {\n      mdUp: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"docaccount\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(ArrowBackIosIcon, {\n      className: classes.backIcon,\n      fontSize: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 23\n      }\n    }))), /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 19\n      }\n    }, \"Like History\"))), /*#__PURE__*/React.createElement(Box, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n      value: display,\n      exclusive: true,\n      onChange: handleDisplay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ToggleButton, {\n      value: \"doctor\",\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      color: \"primary\",\n      style: {\n        textTransform: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 21\n      }\n    }, \"Doctor\")), /*#__PURE__*/React.createElement(ToggleButton, {\n      value: \"hospital\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Typography, {\n      color: \"primary\",\n      style: {\n        textTransform: \"none\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 21\n      }\n    }, \"Hospital\")))), \" \"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }\n    }), display === \"doctor\" ? /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 15\n      }\n    }, \"doccard\") : /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }\n    }, \"hospcard\")), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 1,\n      md: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }\n    })));\n  }\n}\n\nLikeHistory.propTypes = {// updateVerification: PropTypes.func.isRequired,\n  // getAllSearchData: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  storedCredentials: state.user.credentials // searchData: state.data.searchData\n\n});\n\nconst mapActionsToProps = {// updateVerification,\n  // getAllSearchData\n};\nexport default connect(mapStateToProps, mapActionsToProps)(LikeHistory);","map":{"version":3,"sources":["/Users/Michelle/Downloads/may10_michelle/src/Components/docAccount/LikeHistory.js"],"names":["React","Fragment","useEffect","makeStyles","Box","Typography","Grid","Hidden","ArrowBackIosIcon","ToggleButton","ToggleButtonGroup","CircularProgress","Link","connect","PropTypes","axios","DocCard","HospCard","proxyurl","useStyles","theme","account","LikeHistory","props","classes","display","setDisplay","useState","handleDisplay","event","newDisplay","renderCount","setRenderCount","likeHistory","setLikeHistory","doctors","hospitals","displayStoredData","getStoredData","then","res","likedDoctors","likedHospitals","catch","error","console","userStoredCredentials","get","defaults","baseURL","log","marginLeft","marginTop","anchor","backIcon","textTransform","propTypes","mapStateToProps","state","storedCredentials","user","credentials","mapActionsToProps"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Link } from \"react-router-dom\";\n\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\n\nimport DocCard from \"../../Components/results/DocCard\";\nimport HospCard from \"../../Components/results/HospitalCard\";\n\n// import { getAllSearchData } from \"../../redux/actions/dataActions\";\n\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n\nconst useStyles = makeStyles((theme) => ({\n  ...theme.account,\n}));\n\nfunction LikeHistory(props) {\n  const classes = useStyles();\n\n  const [display, setDisplay] = React.useState(\"doctor\"); //display by doctor as default\n  const handleDisplay = (event, newDisplay) => {\n    if (newDisplay != null) {\n      setDisplay(newDisplay);\n    }\n  };\n\n  const [renderCount, setRenderCount] = React.useState(0);\n\n  const [likeHistory, setLikeHistory] = React.useState({\n    doctors: [],\n    hospitals: []\n  })\n\n\n  useEffect(() => {\n    // if (renderCount == 0) {\n      return displayStoredData();\n    // }\n  });\n\n\n  const displayStoredData = () => {\n    getStoredData()\n      .then((res) => {\n        let likedDoctors;\n        let likedHospitals;\n\n        // if the user has not never liked any doctors or hospitals\n        if (!res.likeHistory) {\n          likedDoctors = [];\n          likedHospitals = [];\n        } else {\n          likedDoctors = res.likeHistory.doctors ? res.likeHistory.doctors : [];\n          likedHospitals = res.likeHistory.hospitals ? res.likeHistory.hospitals : [];\n        }\n\n        setLikeHistory({\n          doctors: likedDoctors,\n          hospitals: likedHospitals\n        });\n\n        setRenderCount(1);\n      }).catch((error) => {\n        console.error(error);\n      })\n  }\n\n  // wait for returned props from firebase to be ready\n  let getStoredData = async () => {\n    let userStoredCredentials = await axios.get(proxyurl + axios.defaults.baseURL + \"user\");\n    console.log(userStoredCredentials)\n    return userStoredCredentials;\n  }\n\n\n\n\n\n\n\n  // axios.get(proxyurl+axios.defaults.baseURL+\"getallsearchdata\", {\n  //   params:{\n  //     specialtyList:[\"Gastroenterology\"]\n  //   }\n  // }).then((res)=>{\n  //   console.log(res);\n\n  // })\n\n  // axios.get(proxyurl + axios.defaults.baseURL + \"user\")\n  //   .then((res) => {\n  //     let likedDoctors;\n  //     let likedHospitals;\n\n  //     // if the user has not never liked any doctors or hospitals\n  //     if (!res.likeHistory) {\n  //       likedDoctors = [];\n  //       likedHospitals = [];\n  //     } else {\n  //       likedDoctors = res.likeHistory.doctors ? res.likeHistory.doctors : [];\n  //       likedHospitals = res.likeHistory.hospitals ? res.likeHistory.hospitals : [];\n  //     }\n\n  //     setLikeHistory({\n  //       doctors: likedDoctors,\n  //       hospitals: likedHospitals\n  //     });\n\n  //     setRenderCount(1);\n  //   }).catch((error) => {\n  //     console.error(error);\n  //   })\n\n\n\n\n\n\n\n  console.log(likeHistory)\n\n  if (renderCount == 0) {\n    // loading spinner if prop data is not yet available\n    return (\n      <div>\n        <CircularProgress color=\"secondary\" style={{ marginLeft: '45%', marginTop: '10%' }} />\n      </div>\n    );\n\n  } else {\n\n\n\n    return (\n      <a id=\"likehistory\" className={classes.anchor}>\n        <Grid container spacing={0}>\n          <Grid item xs={1}></Grid>\n          <Grid item xs={10} md={8}>\n            <Box display=\"flex\" mt={4} mb={3} flexWrap=\"wrap\" alignItems=\"center\">\n              <Box flexGrow={1} flexDirection=\"row\" mb={1}>\n                <Typography variant=\"h5\" color=\"primary\">\n                  {/* Back button, 手机屏幕才会出现 */}\n                  <Hidden mdUp>\n                    {/* <IconButton> */}\n                    <Link to=\"docaccount\">\n                      <ArrowBackIosIcon\n                        className={classes.backIcon}\n                        fontSize=\"small\"\n                      />\n                    </Link>\n                    {/* </IconButton> */}\n                  </Hidden>\n                  <strong>Like History</strong>\n                </Typography>\n              </Box>\n              {/* Display by Doctor/Hospital buttons */}\n              <Box>\n                <ToggleButtonGroup\n                  value={display}\n                  exclusive\n                  onChange={handleDisplay}\n                >\n                  <ToggleButton value=\"doctor\" color=\"primary\">\n                    <Typography color=\"primary\" style={{ textTransform: \"none\" }}>\n                      Doctor\n                  </Typography>\n                  </ToggleButton>\n                  <ToggleButton value=\"hospital\">\n                    <Typography color=\"primary\" style={{ textTransform: \"none\" }}>\n                      Hospital\n                  </Typography>\n                  </ToggleButton>\n                </ToggleButtonGroup>\n              </Box>{\" \"}\n            </Box>\n\n            <br></br>\n            <br></br>\n\n            {/* if user clicks on display by 'doctor', then render doctor cards */}\n            {display === \"doctor\" ? (\n              <Fragment>doccard</Fragment>\n            ) : (\n                <Fragment>hospcard</Fragment>\n              )}\n          </Grid>\n          <Grid item xs={1} md={3}></Grid>\n        </Grid>\n      </a>\n    );\n  }\n}\n\n\n\n\n\n\n\nLikeHistory.propTypes = {\n  // updateVerification: PropTypes.func.isRequired,\n  // getAllSearchData: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  storedCredentials: state.user.credentials,\n  // searchData: state.data.searchData\n});\n\nconst mapActionsToProps = {\n  // updateVerification,\n  // getAllSearchData\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(LikeHistory);"]},"metadata":{},"sourceType":"module"}