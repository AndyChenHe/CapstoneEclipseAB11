{"ast":null,"code":"import _objectSpread from\"/Users/andychenhe/Desktop/may8-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{SET_USER,SET_AUTHENTICATED,SET_UNAUTHENTICATED,LOADING_USER}from\"../types\";// initial state; when user is not logged in!\nvar initialState={authenticated:false,loading:false,credentials:{}};//depending on the action type we receive, we will do something\nexport default function(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;switch(action.type){/*catch action type */ /* if we get set_authenticated (call from App.js) spread the state we already have, make authenticated: true*/case SET_AUTHENTICATED:return _objectSpread({},state,{authenticated:true});/*when we logout, return to initial state*/case SET_UNAUTHENTICATED:return initialState;case SET_USER:return _objectSpread({authenticated:true,loading:false},action.payload);case LOADING_USER:return _objectSpread({},state,{loading:true});default:return state;}}","map":{"version":3,"sources":["/Users/andychenhe/Desktop/may8-test/src/redux/reducers/userReducer.js"],"names":["SET_USER","SET_AUTHENTICATED","SET_UNAUTHENTICATED","LOADING_USER","initialState","authenticated","loading","credentials","state","action","type","payload"],"mappings":"yJAAA,OACEA,QADF,CAEEC,iBAFF,CAGEC,mBAHF,CAIEC,YAJF,KAKO,UALP,CAOA;AACA,GAAMC,CAAAA,YAAY,CAAG,CACnBC,aAAa,CAAE,KADI,CAEnBC,OAAO,CAAE,KAFU,CAGnBC,WAAW,CAAE,EAHM,CAArB,CAMA;AACA,cAAe,WAAwC,IAA9BC,CAAAA,KAA8B,2DAAtBJ,YAAsB,IAARK,CAAAA,MAAQ,2CACrD,OAAQA,MAAM,CAACC,IAAf,EACE,sBADF,CAEE,8GACA,IAAKT,CAAAA,iBAAL,CACE,wBACKO,KADL,EAEEH,aAAa,CAAE,IAFjB,GAIF,2CACA,IAAKH,CAAAA,mBAAL,CACE,MAAOE,CAAAA,YAAP,CAEF,IAAKJ,CAAAA,QAAL,CACE,sBACEK,aAAa,CAAE,IADjB,CAEEC,OAAO,CAAE,KAFX,EAGKG,MAAM,CAACE,OAHZ,EAKF,IAAKR,CAAAA,YAAL,CACE,wBACKK,KADL,EAEEF,OAAO,CAAE,IAFX,GAIF,QACE,MAAOE,CAAAA,KAAP,CAxBJ,CA0BD","sourcesContent":["import {\n  SET_USER,\n  SET_AUTHENTICATED,\n  SET_UNAUTHENTICATED,\n  LOADING_USER,\n} from \"../types\";\n\n// initial state; when user is not logged in!\nconst initialState = {\n  authenticated: false,\n  loading: false,\n  credentials: {},\n};\n\n//depending on the action type we receive, we will do something\nexport default function (state = initialState, action) {\n  switch (action.type) {\n    /*catch action type */\n    /* if we get set_authenticated (call from App.js) spread the state we already have, make authenticated: true*/\n    case SET_AUTHENTICATED:\n      return {\n        ...state,\n        authenticated: true,\n      };\n    /*when we logout, return to initial state*/\n    case SET_UNAUTHENTICATED:\n      return initialState;\n\n    case SET_USER:\n      return {\n        authenticated: true,\n        loading: false,\n        ...action.payload,\n      };\n    case LOADING_USER:\n      return {\n        ...state,\n        loading: true,\n      };\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}