{"ast":null,"code":"var _jsxFileName = \"/Users/Michelle/Desktop/Capstone/CapstoneEclipseAB11/src/Components/home/Location.js\";\nimport React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport parse from \"autosuggest-highlight/parse\";\nimport throttle from \"lodash/throttle\";\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement(\"script\");\n  script.setAttribute(\"async\", \"\");\n  script.setAttribute(\"id\", id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = {\n  current: null\n};\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2)\n  },\n  inputRoot: {\n    \"& .MuiFilledInput-root\": {\n      backgroundColor: \"rgba(255,255,255)\",\n      borderRadius: 4\n    },\n    flex: 1\n  },\n  autocompelte: {},\n  search: {}\n})); // Autocomplete + Google MAP Api for Location search box\n\nexport default function Location(props) {\n  const classes = useStyles();\n  const [inputValue, setInputValue] = React.useState(props.currentLocation);\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  if (typeof window !== \"undefined\" && !loaded.current) {\n    if (!document.querySelector(\"#google-maps\")) {\n      loadScript(\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDIrcr-B4aW4aiYZDc2_v-egqfKPvpjD_g&libraries=places&region=MY\", document.querySelector(\"head\"), \"google-maps\");\n    }\n\n    loaded.current = true;\n  }\n\n  const handleChange = event => {\n    setInputValue(event.target.value);\n  };\n\n  const handleUserSelection = targetLocation => {\n    let targetValue = '';\n\n    if (targetLocation) {\n      targetValue = targetLocation.description;\n    }\n\n    props.getLocationValue(targetValue);\n  };\n\n  const fetch = React.useMemo(() => throttle((request, callback) => {\n    autocompleteService.current.getPlacePredictions(request, callback);\n  }, 200), []);\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === \"\") {\n      setOptions([]);\n      return undefined;\n    }\n\n    fetch({\n      input: inputValue\n    }, results => {\n      if (active) {\n        setOptions(results || []);\n      }\n    });\n    return () => {\n      active = false;\n    };\n  }, [inputValue, fetch]);\n  let currentAddress = 'Your current location is loading';\n\n  if (props.currentLocation) {\n    currentAddress = props.currentLocation;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    onChange: (event, value) => {\n      handleUserSelection(value);\n    },\n    className: classes.autocomplete,\n    getOptionLabel: option => {\n      return typeof option === \"string\" ? option : option.description;\n    },\n    filterOptions: x => x,\n    options: options,\n    autoComplete: true,\n    includeInputInList: true,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Please add your address\",\n      placeholder: currentAddress,\n      onChange: handleChange,\n      variant: \"filled\",\n      className: classes.inputRoot,\n      InputProps: { ...params.InputProps,\n        disableUnderline: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }\n    })),\n    renderOption: option => {\n      const matches = option.structured_formatting.main_text_matched_substrings;\n      const parts = parse(option.structured_formatting.main_text, matches.map(match => {\n        return [match.offset, match.offset + match.length];\n      }));\n      let allOptions = parts.map((part, index) => {\n        return /*#__PURE__*/React.createElement(\"span\", {\n          key: index,\n          style: {\n            fontWeight: part.highlight ? 700 : 400\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 20\n          }\n        }, part.text);\n      });\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        alignItems: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(LocationOnIcon, {\n        className: classes.icon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 17\n        }\n      }, allOptions, /*#__PURE__*/React.createElement(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 19\n        }\n      }, option.structured_formatting.secondary_text))));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/Michelle/Desktop/Capstone/CapstoneEclipseAB11/src/Components/home/Location.js"],"names":["React","TextField","Autocomplete","LocationOnIcon","Grid","Typography","makeStyles","parse","throttle","loadScript","src","position","id","script","document","createElement","setAttribute","appendChild","autocompleteService","current","useStyles","theme","icon","color","palette","text","secondary","marginRight","spacing","inputRoot","backgroundColor","borderRadius","flex","autocompelte","search","Location","props","classes","inputValue","setInputValue","useState","currentLocation","options","setOptions","loaded","useRef","window","querySelector","handleChange","event","target","value","handleUserSelection","targetLocation","targetValue","description","getLocationValue","fetch","useMemo","request","callback","getPlacePredictions","useEffect","active","google","maps","places","AutocompleteService","undefined","input","results","currentAddress","autocomplete","option","x","params","InputProps","disableUnderline","matches","structured_formatting","main_text_matched_substrings","parts","main_text","map","match","offset","length","allOptions","part","index","fontWeight","highlight","secondary_text"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport parse from \"autosuggest-highlight/parse\";\nimport throttle from \"lodash/throttle\";\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement(\"script\");\n  script.setAttribute(\"async\", \"\");\n  script.setAttribute(\"id\", id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = { current: null };\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2),\n  },\n  inputRoot: {\n    \"& .MuiFilledInput-root\": {\n      backgroundColor: \"rgba(255,255,255)\",\n      borderRadius: 4,\n    },\n    flex: 1,\n  },\n  autocompelte: {},\n\n  search: {},\n}));\n\n// Autocomplete + Google MAP Api for Location search box\nexport default function Location(props) {\n  const classes = useStyles();\n  const [inputValue, setInputValue] = React.useState(props.currentLocation);\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  if (typeof window !== \"undefined\" && !loaded.current) {\n    if (!document.querySelector(\"#google-maps\")) {\n      loadScript(\n        \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDIrcr-B4aW4aiYZDc2_v-egqfKPvpjD_g&libraries=places&region=MY\",\n        document.querySelector(\"head\"),\n        \"google-maps\"\n      );\n    }\n\n    loaded.current = true;\n  }\n\n  const handleChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const handleUserSelection = (targetLocation) => {\n    let targetValue = '';\n    if (targetLocation){\n      targetValue = targetLocation.description;\n    }\n    props.getLocationValue(targetValue);\n  }\n\n  const fetch = React.useMemo(\n    () =>\n      throttle((request, callback) => {\n        autocompleteService.current.getPlacePredictions(request, callback);\n      }, 200),\n    []\n  );\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === \"\") {\n      setOptions([]);\n      return undefined;\n    }\n\n    fetch({ input: inputValue }, (results) => {\n      if (active) {\n        setOptions(results || []);\n      }\n    });\n\n    return () => {\n      active = false;\n    };\n  }, [inputValue, fetch]);\n\n  let currentAddress = 'Your current location is loading'\n  if(props.currentLocation){\n    currentAddress = props.currentLocation;\n  }\n\n  return (\n    <div>\n      <Autocomplete\n        onChange={(event, value) =>{handleUserSelection(value)}}\n        className={classes.autocomplete}\n        getOptionLabel={(option) =>{\n          return typeof option === \"string\" ? option : option.description}\n        }\n        filterOptions={(x) => x}\n        options={options}\n        autoComplete\n        includeInputInList\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label='Please add your address'\n            placeholder={currentAddress}\n            onChange={handleChange}\n            variant=\"filled\"\n            className={classes.inputRoot}\n            InputProps={{ ...params.InputProps, disableUnderline: true }}\n          />\n        )}\n        renderOption={(option) => {\n          const matches =\n            option.structured_formatting.main_text_matched_substrings;\n          const parts = parse(\n            option.structured_formatting.main_text,\n            matches.map((match) => {\n                return [match.offset, match.offset + match.length]\n              }\n            )\n          );\n          let allOptions = parts.map((part, index) => { \n            return <span\n              key={index}\n              style={{ fontWeight: part.highlight ? 700 : 400 }}\n            >\n              {part.text}\n            </span>\n          });\n\n          return (\n            <div>\n              <Grid container alignItems=\"center\">\n                <Grid item>\n                  <LocationOnIcon className={classes.icon} />\n                </Grid>\n                <Grid item xs>\n                  {allOptions}\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    {option.structured_formatting.secondary_text}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </div>\n          );\n        }}\n      ></Autocomplete>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}