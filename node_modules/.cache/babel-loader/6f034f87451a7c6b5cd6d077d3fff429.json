{"ast":null,"code":"var _jsxFileName = \"/Users/Michelle/Downloads/may4_eshin/src/Components/profile/DocTags.js\";\nimport React, { Fragment, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Divider from \"@material-ui/core/Divider\";\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { updateUserStoredDocTags } from \"../../redux/actions/userActions\";\nconst useStyles = makeStyles(theme => ({\n  editTagDialog: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0\n  },\n  tag: {\n    margin: theme.spacing(0.5)\n  },\n  tagDialog: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0,\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: 10\n    },\n    marginBottom: 20\n  },\n  editTagsButton: {\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: 20\n    }\n  },\n  line: {\n    [theme.breakpoints.down(\"xs\")]: {\n      border: \"5px solid rgba(0, 0, 0, 0.05)\"\n    }\n  },\n  reviewTagsBox: {\n    [theme.breakpoints.down(\"xs\")]: {\n      justifyContent: \"left\",\n      alignItems: \"left\",\n      marginLeft: 20\n    }\n  },\n  divider: {\n    height: 2,\n    width: 115,\n    backgroundColor: \"#FF8686\"\n  }\n})); // Edit Tags (用在DocInfo.js)\n// 目前doctor所有的tags and edit tags 都是hardcoded， 麻烦你了\n\nfunction Tags(props) {\n  const classes = useStyles(); // load user authenticate \n\n  const authenticated = props.authenticated; // let doctorTags = [];\n  // props.searchInfo.tags.forEach(tag => {\n  //   doctorTags.push({\n  //     tagName: tag.tagName,\n  //     count: tag.count\n  //   });\n  // });\n  // // const [currentTags, setCurrentTags] = React.useState(doctorTags);\n  // let userTags = [];\n  // props.storedCredentials.addedDoctorTags.verify.map(tag => {\n  //   userTags.push(tag);\n  // });\n\n  const [allTags, setState] = React.useState({\n    currentTags: doctorTags,\n    storedUserTags: userTags\n  });\n  const [renderCount, setRenderCount] = React.useState(0); // only call useEffect if renderCount = 0 (will be updated to 1 if stored data\n  // in firebase is successfully set to state)\n\n  useEffect(() => {\n    if (renderCount == 0) {\n      return displayStoredData();\n    }\n  });\n\n  const displayStoredData = () => {\n    // call function to get data from returned props from firebase\n    getStoredData().then(res => {\n      console.log(res);\n      let userTags = [];\n      props.storedCredentials.addedDoctorTags.verify.map(tag => {\n        userTags.push(tag);\n      }); // set state\n\n      setState({\n        currentTags: res.tags,\n        storedUserTags: res.tags\n      }); // update renderCount to 1 to stop react from making any more useEffect call\n\n      setRenderCount(1);\n    }).catch(error => {\n      console.error(error);\n    });\n  }; // wait for returned props from firebase to be ready\n\n\n  let getStoredData = async () => {\n    let [storedSearchInfo, userStoredDocTags] = await Promise.all([props.searchInfo, props.storedCredentials]);\n    return [storedSearchInfo, userStoredDocTags];\n  };\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = value => {\n    setOpen(false);\n  }; // add or remove doctor review tags: make changes to both the current doctor and user stored tags\n\n\n  const addRemoveTag = tag => {\n    let currentTagsCopy = allTags.currentTags;\n    let currentTagIndex = currentTagsCopy.findIndex(eachTag => eachTag.tagName == tag);\n    let userStoredTagsCopy = allTags.storedUserTags;\n    let userStoredTagIndex = userStoredTagsCopy.indexOf(tag); // if the tag has been selected by user, which means it should also exist\n    // in the database\n\n    if (userStoredTagIndex !== -1) {\n      // remove from user selected tag list in the modal\n      userStoredTagsCopy.splice(userStoredTagIndex, 1); // decrease this tag's count for this doctor in database; this tag should\n      // have already existed in the database since the user selected it\n\n      currentTagsCopy[currentTagIndex].count--;\n\n      if (currentTagsCopy[currentTagIndex].count == 0) {\n        currentTagsCopy.splice(currentTagIndex, 1);\n      }\n\n      setState({\n        currentTags: currentTagsCopy,\n        storedUserTags: userStoredTagsCopy\n      }); // the tag hasn't been selected by the user\n    } else {\n      // if the tag already exists in the database (other users had selected this\n      //  tag for this doctor)\n      if (currentTagIndex !== -1) {\n        // increase the count for this tag in database by 1\n        currentTagsCopy[currentTagIndex].count++;\n        setState(prevState => ({\n          currentTags: currentTagsCopy,\n          // add the new tag to this user's tag list\n          storedUserTags: [...prevState.storedUserTags, tag]\n        })); // the tag doesn't exist in the database; this is the first time a user\n        // selects this tag\n      } else {\n        setState(prevState => ({\n          currentTags: [...prevState.currentTags, {\n            tagName: tag,\n            count: 1\n          }],\n          storedUserTags: [...prevState.storedUserTags, tag]\n        }));\n      }\n    }\n  }; // create a tag list that contains all tags for this doctor\n\n\n  let tagList = allTags.currentTags.map(tag => {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      key: tag.tagName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Chip, {\n      label: tag.tagName + ' (' + tag.count + ')',\n      className: classes.tag,\n      color: \"secondary\",\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }\n    })));\n  });\n  const predefinedTags = [\"Attentive\", \"Bedside manner\", \"Empathetic\", \"Enthusiastic\", \"Friendly\", \"Honest\", \"Knowledgeable\", \"Passionate\", \"Patient\", \"Respectful\", \"Responsible\", \"Trustworthy\"];\n  let predefinedTagList = predefinedTags.map(tag => {\n    let selected; // if the tag exists in the user selected tag list\n\n    if (allTags.storedUserTags.includes(tag)) {\n      selected = true;\n    } else {\n      selected = false;\n    }\n\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(PreDefinedTag, {\n      key: tag,\n      label: tag,\n      selected: selected,\n      addRemoveTag: addRemoveTag,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 9\n      }\n    }));\n  });\n\n  const updateSelectedTags = () => {\n    // if currentUser tags changes\n    // if (allTags[\"storedUserTags\"])\n    // const  = {\n    //   addedDoctorTags: allTags[\"storedUserTags\"],\n    // };\n    props.updateUserStoredDocTags(allTags[\"storedUserTags\"]);\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Hidden, {\n    smUp: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"hr\", {\n    className: classes.line,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    mt: 2,\n    mb: 2,\n    display: \"flex\",\n    flexDirection: \"column\",\n    className: classes.reviewTagsBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 11\n    }\n  }, \"Review Tags\"), /*#__PURE__*/React.createElement(Divider, {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.tagDialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }\n  }, tagList, \" \", authenticated ? /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    startIcon: /*#__PURE__*/React.createElement(EditOutlinedIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 24\n      }\n    }),\n    onClick: handleClickOpen,\n    style: {\n      textTransform: \"none\"\n    },\n    className: classes.editTagsButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 11\n    }\n  }, \"Edit Tags\") : \"\"), /*#__PURE__*/React.createElement(Dialog, {\n    onClose: handleClose,\n    open: open,\n    maxWidth: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"Body\",\n    style: {\n      margin: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 9\n    }\n  }, \"Please select tag(s) that best describe this doctor from the list below:\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.editTagDialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 9\n    }\n  }, predefinedTagList), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: updateSelectedTags,\n    variant: \"outlined\",\n    color: \"primary\",\n    style: {\n      textTransform: \"none\",\n      margin: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 11\n    }\n  }, \"Done\"))));\n}\n\nfunction PreDefinedTag(props) {\n  const classes = useStyles();\n  const [selected, selectUnselectTag] = React.useState(props.selected);\n\n  const handleClick = () => {\n    selectUnselectTag(!selected);\n    props.addRemoveTag(props.label);\n  };\n\n  return /*#__PURE__*/React.createElement(\"li\", {\n    key: props.key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Chip, {\n    label: props.label,\n    className: classes.tag,\n    color: \"secondary\",\n    variant: selected ? \"default\" : \"secondary\",\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 7\n    }\n  }));\n}\n\nTags.propTypes = {\n  updateUserStoredDocTags: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  // user: state.user,\n  authenticated: state.user.authenticated,\n  storedCredentials: state.user.credentials,\n  searchInfo: state.data.searchInfo\n});\n\nconst mapActionsToProps = {\n  updateUserStoredDocTags\n};\nexport default connect(mapStateToProps, mapActionsToProps)(Tags);","map":{"version":3,"sources":["/Users/Michelle/Downloads/may4_eshin/src/Components/profile/DocTags.js"],"names":["React","Fragment","useEffect","makeStyles","Dialog","Chip","Button","Box","Typography","DialogActions","Hidden","Divider","EditOutlinedIcon","connect","PropTypes","updateUserStoredDocTags","useStyles","theme","editTagDialog","display","justifyContent","flexWrap","listStyle","padding","spacing","margin","tag","tagDialog","breakpoints","down","marginLeft","marginBottom","editTagsButton","line","border","reviewTagsBox","alignItems","divider","height","width","backgroundColor","Tags","props","classes","authenticated","allTags","setState","useState","currentTags","doctorTags","storedUserTags","userTags","renderCount","setRenderCount","displayStoredData","getStoredData","then","res","console","log","storedCredentials","addedDoctorTags","verify","map","push","tags","catch","error","storedSearchInfo","userStoredDocTags","Promise","all","searchInfo","open","setOpen","handleClickOpen","handleClose","value","addRemoveTag","currentTagsCopy","currentTagIndex","findIndex","eachTag","tagName","userStoredTagsCopy","userStoredTagIndex","indexOf","splice","count","prevState","tagList","predefinedTags","predefinedTagList","selected","includes","updateSelectedTags","textTransform","PreDefinedTag","selectUnselectTag","handleClick","label","key","propTypes","func","isRequired","mapStateToProps","state","user","credentials","data","mapActionsToProps"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Divider from \"@material-ui/core/Divider\";\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\n\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport { updateUserStoredDocTags } from \"../../redux/actions/userActions\";\n\n\nconst useStyles = makeStyles((theme) => ({\n  editTagDialog: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0,\n  },\n  tag: {\n    margin: theme.spacing(0.5),\n  },\n\n  tagDialog: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0,\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: 10,\n    },\n    marginBottom: 20,\n  },\n\n  editTagsButton: {\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: 20,\n    },\n  },\n\n  line: {\n    [theme.breakpoints.down(\"xs\")]: {\n      border: \"5px solid rgba(0, 0, 0, 0.05)\",\n    },\n  },\n  reviewTagsBox: {\n    [theme.breakpoints.down(\"xs\")]: {\n      justifyContent: \"left\",\n      alignItems: \"left\",\n      marginLeft: 20,\n    },\n  },\n  divider: {\n    height: 2,\n    width: 115,\n    backgroundColor: \"#FF8686\",\n  },\n}));\n\n\n\n\n// Edit Tags (用在DocInfo.js)\n// 目前doctor所有的tags and edit tags 都是hardcoded， 麻烦你了\nfunction Tags(props) {\n\n  const classes = useStyles();\n  // load user authenticate \n  const authenticated = props.authenticated;\n\n  // let doctorTags = [];\n  // props.searchInfo.tags.forEach(tag => {\n  //   doctorTags.push({\n  //     tagName: tag.tagName,\n  //     count: tag.count\n  //   });\n  // });\n\n  // // const [currentTags, setCurrentTags] = React.useState(doctorTags);\n\n  // let userTags = [];\n  // props.storedCredentials.addedDoctorTags.verify.map(tag => {\n  //   userTags.push(tag);\n  // });\n\n\n\n  const [allTags, setState] = React.useState({\n    currentTags: doctorTags,\n    storedUserTags: userTags\n  })\n\n  const [renderCount, setRenderCount] = React.useState(0);\n\n\n  // only call useEffect if renderCount = 0 (will be updated to 1 if stored data\n  // in firebase is successfully set to state)\n  useEffect(() => {\n    if (renderCount == 0) {\n      return displayStoredData();\n    }\n  });\n\n  const displayStoredData = () => {\n    // call function to get data from returned props from firebase\n    getStoredData()\n      .then((res) => {\n        console.log(res)\n        let userTags = [];\n        props.storedCredentials.addedDoctorTags.verify.map(tag => {\n          userTags.push(tag);\n        });\n        // set state\n        setState({\n          currentTags: res.tags,\n          storedUserTags: res.tags\n        })\n        // update renderCount to 1 to stop react from making any more useEffect call\n        setRenderCount(1);\n      }).catch((error) => {\n        console.error(error);\n      })\n  }\n\n  // wait for returned props from firebase to be ready\n  let getStoredData = async () => {\n    let [storedSearchInfo, userStoredDocTags] = \n        await Promise.all([props.searchInfo, props.storedCredentials]);    \n    return [storedSearchInfo, userStoredDocTags];\n  }\n\n\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (value) => {\n    setOpen(false);\n  };\n\n  // add or remove doctor review tags: make changes to both the current doctor and user stored tags\n  const addRemoveTag = (tag) => {\n    let currentTagsCopy = allTags.currentTags;\n    let currentTagIndex = currentTagsCopy.findIndex(eachTag => eachTag.tagName == tag)\n\n    let userStoredTagsCopy = allTags.storedUserTags;\n    let userStoredTagIndex = userStoredTagsCopy.indexOf(tag);\n\n    // if the tag has been selected by user, which means it should also exist\n    // in the database\n    if (userStoredTagIndex !== -1) {\n      // remove from user selected tag list in the modal\n      userStoredTagsCopy.splice(userStoredTagIndex, 1);\n      // decrease this tag's count for this doctor in database; this tag should\n      // have already existed in the database since the user selected it\n      currentTagsCopy[currentTagIndex].count--;\n      if (currentTagsCopy[currentTagIndex].count == 0) {\n        currentTagsCopy.splice(currentTagIndex, 1);\n      }\n      setState({\n        currentTags: currentTagsCopy,\n        storedUserTags: userStoredTagsCopy\n      })\n      // the tag hasn't been selected by the user\n    } else {\n      // if the tag already exists in the database (other users had selected this\n      //  tag for this doctor)\n      if (currentTagIndex !== -1) {\n        // increase the count for this tag in database by 1\n        currentTagsCopy[currentTagIndex].count++;\n\n        setState(prevState => ({\n          currentTags: currentTagsCopy,\n          // add the new tag to this user's tag list\n          storedUserTags: [\n            ...prevState.storedUserTags, tag\n          ]\n        }))\n        // the tag doesn't exist in the database; this is the first time a user\n        // selects this tag\n      } else {\n        setState(prevState => ({\n          currentTags: [\n            ...prevState.currentTags, { tagName: tag, count: 1 }\n          ],\n          storedUserTags: [\n            ...prevState.storedUserTags, tag\n          ]\n        }))\n      }\n    }\n  }\n\n  // create a tag list that contains all tags for this doctor\n  let tagList = allTags.currentTags.map((tag) => {\n    return (\n      <Fragment>\n        <li key={tag.tagName}>\n          <Chip\n            label={tag.tagName + ' (' + tag.count + ')'}\n            className={classes.tag}\n            color=\"secondary\"\n            size=\"small\"\n          />\n        </li>\n      </Fragment>\n    )\n  });\n\n  const predefinedTags = [\n    \"Attentive\",\n    \"Bedside manner\",\n    \"Empathetic\",\n    \"Enthusiastic\",\n    \"Friendly\",\n    \"Honest\",\n    \"Knowledgeable\",\n    \"Passionate\",\n    \"Patient\",\n    \"Respectful\",\n    \"Responsible\",\n    \"Trustworthy\",\n  ]\n\n  let predefinedTagList = predefinedTags.map((tag) => {\n    let selected;\n    // if the tag exists in the user selected tag list\n    if (allTags.storedUserTags.includes(tag)) {\n      selected = true;\n    } else {\n      selected = false;\n    }\n    return (\n      <Fragment>\n        <PreDefinedTag key={tag} label={tag} selected={selected} addRemoveTag={addRemoveTag} />\n      </Fragment>\n    )\n  });\n\n  const updateSelectedTags = () => {\n    // if currentUser tags changes\n    // if (allTags[\"storedUserTags\"])\n\n\n    // const  = {\n    //   addedDoctorTags: allTags[\"storedUserTags\"],\n    // };\n    props.updateUserStoredDocTags(allTags[\"storedUserTags\"]);\n\n\n    \n    setOpen(false);\n  }\n\n\n  return (\n    <div>\n      <Hidden smUp>\n        <hr className={classes.line}></hr>\n        <Box\n          mt={2}\n          mb={2}\n          display=\"flex\"\n          flexDirection=\"column\"\n          className={classes.reviewTagsBox}\n        >\n          <Typography variant=\"h6\" color=\"primary\">\n            Review Tags\n          </Typography>\n          <Divider className={classes.divider} />\n        </Box>\n      </Hidden>\n      {/* 显示这个doctor现在有的tags, 目前是hardcoded的， 麻烦你了 */}\n      <div className={classes.tagDialog}>\n        {tagList}{\" \"}\n        {/* 如果登入了，edit tags的button会出现，否则不会出现 */}\n        {authenticated ? (\n          <Button\n            color=\"primary\"\n            startIcon={<EditOutlinedIcon />}\n            onClick={handleClickOpen}\n            style={{ textTransform: \"none\" }}\n            className={classes.editTagsButton}\n          >\n            Edit Tags\n          </Button>\n        ) : (\n            \"\"\n          )}\n      </div>\n\n      <Dialog onClose={handleClose} open={open} maxWidth=\"xs\">\n        <Typography variant=\"Body\" style={{ margin: 20 }}>\n          Please select tag(s) that best describe this doctor from the list\n          below:\n        </Typography>\n        {/* 弹窗出现所有tags选项 */}\n        <div className={classes.editTagDialog}>\n          {predefinedTagList}\n        </div>\n\n        {/* Done button， 目前是点了就关掉窗口，没有save user点了什么 */}\n        <DialogActions>\n          <Button\n            onClick={updateSelectedTags}\n            variant=\"outlined\"\n            color=\"primary\"\n            style={{ textTransform: \"none\", margin: 10 }}\n          >\n            Done\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nfunction PreDefinedTag(props) {\n  const classes = useStyles();\n\n  const [selected, selectUnselectTag] = React.useState(props.selected);\n\n  const handleClick = () => {\n    selectUnselectTag(!selected);\n    props.addRemoveTag(props.label);\n  };\n\n  return (\n    <li key={props.key}>\n      <Chip\n        label={props.label}\n        className={classes.tag}\n        color=\"secondary\"\n        variant={selected ? \"default\" : \"secondary\"}\n        onClick={handleClick}\n      />\n    </li>\n  )\n}\n\n\nTags.propTypes = {\n  updateUserStoredDocTags: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  // user: state.user,\n  authenticated: state.user.authenticated,\n  storedCredentials: state.user.credentials,\n  searchInfo: state.data.searchInfo\n});\n\nconst mapActionsToProps = {\n  updateUserStoredDocTags\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(Tags);\n\n"]},"metadata":{},"sourceType":"module"}