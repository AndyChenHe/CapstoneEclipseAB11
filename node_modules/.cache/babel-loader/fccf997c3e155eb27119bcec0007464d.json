{"ast":null,"code":"var _jsxFileName = \"/Users/eshinang/Desktop/CapstoneEclipseAB11/mydoc/src/Components/home/Location.js\";\nimport React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport parse from \"autosuggest-highlight/parse\";\nimport throttle from \"lodash/throttle\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Button from \"@material-ui/core/Button\";\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement(\"script\");\n  script.setAttribute(\"async\", \"\");\n  script.setAttribute(\"id\", id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = {\n  current: null\n};\nconst useStyles = makeStyles(theme => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2)\n  },\n  inputRoot: {\n    \"& .MuiFilledInput-root\": {\n      backgroundColor: \"rgba(255,255,255)\",\n      borderRadius: 4\n    },\n    flex: 1\n  },\n  autocompelte: {},\n  search: {}\n}));\nexport default function Location() {\n  const classes = useStyles();\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  if (typeof window !== \"undefined\" && !loaded.current) {\n    if (!document.querySelector(\"#google-maps\")) {\n      loadScript(\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDIrcr-B4aW4aiYZDc2_v-egqfKPvpjD_g&libraries=places&region=MY\", document.querySelector(\"head\"), \"google-maps\");\n    }\n\n    loaded.current = true;\n  }\n\n  const handleChange = event => {\n    setInputValue(event.target.value);\n  };\n\n  const fetch = React.useMemo(() => throttle((request, callback) => {\n    autocompleteService.current.getPlacePredictions(request, callback);\n  }, 200), []);\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === \"\") {\n      setOptions([]);\n      return undefined;\n    }\n\n    fetch({\n      input: inputValue\n    }, results => {\n      if (active) {\n        setOptions(results || []);\n      }\n    });\n    return () => {\n      active = false;\n    };\n  }, [inputValue, fetch]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    style: {\n      width: 430\n    },\n    className: classes.autocomplete,\n    getOptionLabel: option => typeof option === \"string\" ? option : option.description,\n    filterOptions: x => x,\n    options: options,\n    autoComplete: true,\n    includeInputInList: true,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Add city, state, or postal code\",\n      onChange: handleChange,\n      variant: \"filled\",\n      className: classes.inputRoot,\n      InputProps: { ...params.InputProps,\n        disableUnderline: true\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    })),\n    renderOption: option => {\n      const matches = option.structured_formatting.main_text_matched_substrings;\n      const parts = parse(option.structured_formatting.main_text, matches.map(match => [match.offset, match.offset + match.length]));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        container: true,\n        alignItems: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(LocationOnIcon, {\n        className: classes.icon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 19\n        }\n      })), /*#__PURE__*/React.createElement(Grid, {\n        item: true,\n        xs: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 17\n        }\n      }, parts.map((part, index) => /*#__PURE__*/React.createElement(\"span\", {\n        key: index,\n        style: {\n          fontWeight: part.highlight ? 700 : 400\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }\n      }, part.text)), /*#__PURE__*/React.createElement(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 19\n        }\n      }, option.structured_formatting.secondary_text))));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/eshinang/Desktop/CapstoneEclipseAB11/mydoc/src/Components/home/Location.js"],"names":["React","TextField","Autocomplete","LocationOnIcon","Grid","Typography","makeStyles","parse","throttle","SearchIcon","Button","loadScript","src","position","id","script","document","createElement","setAttribute","appendChild","autocompleteService","current","useStyles","theme","icon","color","palette","text","secondary","marginRight","spacing","inputRoot","backgroundColor","borderRadius","flex","autocompelte","search","Location","classes","inputValue","setInputValue","useState","options","setOptions","loaded","useRef","window","querySelector","handleChange","event","target","value","fetch","useMemo","request","callback","getPlacePredictions","useEffect","active","google","maps","places","AutocompleteService","undefined","input","results","width","autocomplete","option","description","x","params","InputProps","disableUnderline","matches","structured_formatting","main_text_matched_substrings","parts","main_text","map","match","offset","length","part","index","fontWeight","highlight","secondary_text"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport LocationOnIcon from \"@material-ui/icons/LocationOn\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport parse from \"autosuggest-highlight/parse\";\nimport throttle from \"lodash/throttle\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport Button from \"@material-ui/core/Button\";\n\nfunction loadScript(src, position, id) {\n  if (!position) {\n    return;\n  }\n\n  const script = document.createElement(\"script\");\n  script.setAttribute(\"async\", \"\");\n  script.setAttribute(\"id\", id);\n  script.src = src;\n  position.appendChild(script);\n}\n\nconst autocompleteService = { current: null };\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    color: theme.palette.text.secondary,\n    marginRight: theme.spacing(2),\n  },\n  inputRoot: {\n    \"& .MuiFilledInput-root\": {\n      backgroundColor: \"rgba(255,255,255)\",\n      borderRadius: 4,\n    },\n    flex: 1,\n  },\n  autocompelte: {},\n\n  search: {},\n}));\n\nexport default function Location() {\n  const classes = useStyles();\n  const [inputValue, setInputValue] = React.useState(\"\");\n  const [options, setOptions] = React.useState([]);\n  const loaded = React.useRef(false);\n\n  if (typeof window !== \"undefined\" && !loaded.current) {\n    if (!document.querySelector(\"#google-maps\")) {\n      loadScript(\n        \"https://maps.googleapis.com/maps/api/js?key=AIzaSyDIrcr-B4aW4aiYZDc2_v-egqfKPvpjD_g&libraries=places&region=MY\",\n        document.querySelector(\"head\"),\n        \"google-maps\"\n      );\n    }\n\n    loaded.current = true;\n  }\n\n  const handleChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const fetch = React.useMemo(\n    () =>\n      throttle((request, callback) => {\n        autocompleteService.current.getPlacePredictions(request, callback);\n      }, 200),\n    []\n  );\n\n  React.useEffect(() => {\n    let active = true;\n\n    if (!autocompleteService.current && window.google) {\n      autocompleteService.current = new window.google.maps.places.AutocompleteService();\n    }\n    if (!autocompleteService.current) {\n      return undefined;\n    }\n\n    if (inputValue === \"\") {\n      setOptions([]);\n      return undefined;\n    }\n\n    fetch({ input: inputValue }, (results) => {\n      if (active) {\n        setOptions(results || []);\n      }\n    });\n\n    return () => {\n      active = false;\n    };\n  }, [inputValue, fetch]);\n\n  return (\n    <div>\n      <Autocomplete\n        style={{ width: 430 }}\n        className={classes.autocomplete}\n        getOptionLabel={(option) =>\n          typeof option === \"string\" ? option : option.description\n        }\n        filterOptions={(x) => x}\n        options={options}\n        autoComplete\n        includeInputInList\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            label=\"Add city, state, or postal code\"\n            onChange={handleChange}\n            variant=\"filled\"\n            className={classes.inputRoot}\n            InputProps={{ ...params.InputProps, disableUnderline: true }}\n          />\n        )}\n        renderOption={(option) => {\n          const matches =\n            option.structured_formatting.main_text_matched_substrings;\n          const parts = parse(\n            option.structured_formatting.main_text,\n            matches.map((match) => [match.offset, match.offset + match.length])\n          );\n\n          return (\n            <div>\n              <Grid container alignItems=\"center\">\n                <Grid item>\n                  <LocationOnIcon className={classes.icon} />\n                </Grid>\n                <Grid item xs>\n                  {parts.map((part, index) => (\n                    <span\n                      key={index}\n                      style={{ fontWeight: part.highlight ? 700 : 400 }}\n                    >\n                      {part.text}\n                    </span>\n                  ))}\n\n                  <Typography variant=\"body2\" color=\"textSecondary\">\n                    {option.structured_formatting.secondary_text}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </div>\n          );\n        }}\n      ></Autocomplete>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}