{"ast":null,"code":"var _jsxFileName = \"/Users/andychenhe/Desktop/may10_michelle 2/src/Components/docAccount/LikeHistorySaved.js\";\nimport React, { Fragment, useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\"; // import DocCard from \"../../Components/results/DocCard\";\n// import HospCard from \"../../Components/results/HospitalCard\";\n\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Chip from \"@material-ui/core/Chip\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport docImg from \"../../img/results/docAlex.png\";\nimport hospImg from \"../../img/results/pantaihospital.png\"; // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// for small cards display, might delete later if naming conventions unify\n\nconst useStyles = makeStyles(theme => ({ ...theme.account,\n  root: {\n    display: \"flex\",\n    margin: 30\n  },\n  img: {\n    width: \"60%\",\n    [theme.breakpoints.only(\"md\")]: {\n      width: \"80%\"\n    },\n    [theme.breakpoints.down(\"xs\")]: {\n      width: \"40%\"\n    }\n  },\n  imageGrid: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    [theme.breakpoints.down(\"xs\")]: {\n      marginTop: 30,\n      marginBottom: 10\n    }\n  },\n  likeBox: {\n    marginTop: 16,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    [theme.breakpoints.down(\"xs\")]: {\n      marginTop: 0,\n      alignItems: \"flex-start\",\n      marginLeft: 20,\n      marginRight: 20,\n      marginBottom: 20\n    }\n  }\n})); // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nfunction LikeHistorySaved(props) {\n  const classes = useStyles(); // decide if the page should render Like History or Saved\n\n  const displayType = props.saveLike;\n  const [display, setDisplay] = React.useState(\"doctor\"); //display by doctor as default\n\n  const [doctorCards, setDoctorCards] = React.useState([]); //display by doctor as default\n\n  const [hospitalCards, setHospitalCards] = React.useState([]); //display by doctor as default\n\n  const handleDisplay = (event, newDisplay) => {\n    if (newDisplay != null) {\n      setDisplay(newDisplay);\n    }\n  };\n\n  const [renderCount, setRenderCount] = React.useState(0);\n  const [saveLike, setSaveLike] = React.useState({\n    doctors: [],\n    hospitals: []\n  });\n  const [databaseInfo, setDatabase] = React.useState({});\n  const indicator = \"\";\n  useEffect(() => {\n    // if (!indicator) {\n    displayStoredCredentials(); // }\n  }, []);\n\n  const displayStoredCredentials = () => {\n    getStoredCredentials().then(res => {\n      // michelle 5/16: 从storedCredentials改成用axios了 所以现在uncomment这句 把原来的let stored = res[displayType]删掉\n      let stored = res[0].data.credentials[displayType];\n      console.log('stored');\n      console.log(stored); // console.log('stored content')\n      // console.log(res.data.credentials)\n      // console.log('displayType')\n      // console.log(displayType)\n\n      let likedDoctors;\n      let likedHospitals; // if the user has not never liked any doctors or hospitals\n\n      if (!stored) {\n        likedDoctors = [];\n        likedHospitals = [];\n      } else {\n        likedDoctors = stored.doctors ? stored.doctors : [];\n        likedHospitals = stored.hospitals ? stored.hospitals : [];\n      }\n\n      console.log('user list:');\n      console.log(likedDoctors);\n      console.log(likedHospitals);\n      let docCardsList = likedDoctors.map(doctor => {\n        console.log('loading doc cards');\n        let specialty = doctor.specialty;\n        let hospital = doctor.hospital.replace(/\\s+/g, \"\");\n        let username = doctor.username.replace(/\\s+/g, \"\");\n        console.log('doctor');\n        console.log(doctor);\n        console.log(res[1].data);\n        console.log(specialty);\n        let targetDoc = res[1].data[specialty]['hospitals'][hospital]['doctors'][username];\n        return /*#__PURE__*/React.createElement(DocCard, Object.assign({}, props, {\n          key: doctor.username,\n          targetDoc: targetDoc,\n          targetDocUserName: username,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }\n        }));\n      }); // list of liked hospitals cards on hospital tab\n\n      let hosCardsList = likedHospitals.map(hospital => {\n        console.log('loading hos cards');\n        let specialty = hospital.specialty;\n        let hospitalUserName = hospital.name.replace(/\\s+/g, \"\");\n        console.log(specialty);\n        console.log(res[1].data);\n        let targetHos = res[1].data[specialty]['hospitals'][hospitalUserName];\n        return /*#__PURE__*/React.createElement(HospitalCard, Object.assign({}, props, {\n          key: hospital.name,\n          targetHos: targetHos,\n          targetHosUserName: hospitalUserName,\n          hospitalInfo: hospital,\n          getSpecialtyData: getSpecialtyData,\n          database: databaseInfo,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 13\n          }\n        }));\n      });\n      setDoctorCards(docCardsList);\n      setHospitalCards(hosCardsList);\n      setSaveLike({\n        doctors: likedDoctors,\n        hospitals: likedHospitals\n      }); // setDatabase(res[1].data);\n      // setRenderCount(1);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  let getStoredCredentials = async () => {\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    let userStoredCredentials = await axios.get(axios.defaults.baseURL + \"user\");\n    let databaseInfo = await axios.get(proxyurl + 'https://us-central1-mydoc-f3cd9.cloudfunctions.net/apiForSearch/getDatabase'); // console.log(userStoredCredentials)\n\n    return [userStoredCredentials, databaseInfo];\n  };\n\n  let getSpecialtyData = async searchSpecialty => {\n    let data = await axios.get(axios.defaults.baseURL + \"getallsearchdata\", {\n      params: {\n        specialty: searchSpecialty\n      }\n    });\n    return data;\n  }; // // list of liked doctor cards on doctor tab\n  // let doctorCards = saveLike.doctors.map(doctor => {\n  //   let specialty = doctor.specialty;\n  //   let hospital = doctor.hospital.replace(/\\s+/g, \"\");\n  //   let username = doctor.username.replace(/\\s+/g, \"\");\n  //   console.log('databaseinf');\n  //   console.log(databaseInfo);\n  //   let targetDoc = databaseInfo[specialty]['hospitals'][hospital]['doctors'][username];\n  //   return (\n  //     <DocCard {...props} key={doctor.username} targetDoc={targetDoc} targetDocUserName={username}/>\n  //   )\n  // })\n  // // list of liked hospitals cards on hospital tab\n  // let hospitalCards = saveLike.hospitals.map(hospital => {\n  //   console.log('hi');\n  //   let specialty = hospital.specialty;\n  //   let hospitalUserName = hospital.name.replace(/\\s+/g, \"\");\n  //   let targetHos = databaseInfo[specialty]['hospitals'][hospitalUserName];\n  //   return (\n  //     <HospitalCard {...props} key={hospital.name} targetHos={targetHos} targetHosUserName={hospitalUserName} hospitalInfo={hospital} getSpecialtyData={getSpecialtyData} database = {databaseInfo} />\n  //   )\n  // })\n\n\n  return /*#__PURE__*/React.createElement(\"a\", {\n    id: \"likehistory\",\n    className: classes.anchor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 10,\n    md: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    display: \"flex\",\n    mt: 4,\n    mb: 3,\n    flexWrap: \"wrap\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    flexGrow: 1,\n    flexDirection: \"row\",\n    mb: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h5\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Hidden, {\n    mdUp: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"docaccount\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ArrowBackIosIcon, {\n    className: classes.backIcon,\n    fontSize: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 23\n    }\n  }))), /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 19\n    }\n  }, displayType === \"likeHistory\" ? \"Like History\" : \"Saved\"))), /*#__PURE__*/React.createElement(Box, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButtonGroup, {\n    value: display,\n    exclusive: true,\n    onChange: handleDisplay,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"doctor\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    color: \"primary\",\n    style: {\n      textTransform: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 21\n    }\n  }, \"Doctor\")), /*#__PURE__*/React.createElement(ToggleButton, {\n    value: \"hospital\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    color: \"primary\",\n    style: {\n      textTransform: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 21\n    }\n  }, \"Hospital\")))), \" \"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }\n  }), display === \"doctor\" ? /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 15\n    }\n  }, doctorCards) : /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 17\n    }\n  }, hospitalCards)), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 1,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 11\n    }\n  })));\n} // }\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// might be deleted later if naming conventions unify\n// Each indiivdual doctor card\n\n\nfunction DocCard(props) {\n  const classes = useStyles(); // const handleClick = () => {\n  //   props.updateTargetDoc(props.resultData);\n  //   if (props.history != null) {\n  //     props.history.push(\"/docprofile\");\n  //   }\n  // };\n\n  const clickDoctorCard = () => {\n    console.log(props.targetDoc);\n    let newestTargetDoc = props.targetDoc;\n    newestTargetDoc[\"Address\"] = newestTargetDoc.address;\n    newestTargetDoc[\"Language\"] = newestTargetDoc.languages;\n    newestTargetDoc['Phone'] = newestTargetDoc.phone;\n    newestTargetDoc['Hospital'] = newestTargetDoc.hospital;\n    newestTargetDoc['Conditions'] = newestTargetDoc.conditions;\n    newestTargetDoc['DocName'] = newestTargetDoc.name;\n    newestTargetDoc['Specialty'] = newestTargetDoc.specialty;\n    newestTargetDoc['YearsofPractice'] = newestTargetDoc.yearsOfPractice;\n    newestTargetDoc['Procedures'] = newestTargetDoc.procedures;\n    newestTargetDoc['NumberOfLikes'] = newestTargetDoc.likes;\n    newestTargetDoc['Qualifications'] = newestTargetDoc.qualifications;\n    newestTargetDoc['Type'] = newestTargetDoc.type;\n    newestTargetDoc['userName'] = props.targetDocUserName;\n    console.log('doc likes'); // console.log(newestTargetDoc['NumberOfLikes'])\n\n    console.log(newestTargetDoc);\n    props.updateTargetDoc(newestTargetDoc);\n    props.setProfileBackToDestination(\"likehistory\");\n\n    if (props.history != null) {\n      props.history.push(\"/docprofile\");\n    }\n  }; // const handleClick = () => {\n  //   props.updateTargetDoc(props.resultData);\n  //   if (props.history != null) {\n  //     props.history.push(\"/docprofile\");\n  //   }\n  // };\n\n\n  return /*#__PURE__*/React.createElement(Card, {\n    className: classes.root,\n    onClick: clickDoctorCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 3,\n    className: classes.imageGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CardMedia, {\n    component: \"img\",\n    className: classes.img // image={docImg}\n    ,\n    src: props.targetDoc.imgSrc,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 17\n    }\n  }, \"Dr.\" + props.targetDoc.name), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 19\n    }\n  }, \"Specialty: \"), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 19\n    }\n  }, props.targetDoc.hospital)), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 19\n    }\n  }, \"Hospital: \"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 19\n    }\n  }, props.targetDoc[\"hospital\"])), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Chip, {\n    color: \"secondary\",\n    size: \"small\",\n    label: props.targetDoc.type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    className: classes.likeBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FavoriteIcon, {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 375,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 376,\n      columnNumber: 17\n    }\n  }, props.targetDoc[\"likes\"])))));\n}\n\nfunction HospitalCard(props) {\n  const classes = useStyles(); // const clickHospitalCard = () => {\n  //   const specialty = props.hospitalInfo.relatedSpecialty;\n  //   const hospital = props.hospitalInfo.name.replace(/\\s+/g, \"\");\n  //   props.getSpecialtyData(specialty)\n  //     .then((res) => {\n  //       let targetHospital = res.data[specialty].hospitals[hospital];\n  //     }).catch((error) => {\n  //       console.error(error);\n  //     })\n  // }\n\n  const clickHospitalCard = () => {\n    let newestTargetHos = props.targetHos; // newestTargetHos[\"Address\"] = newestTargetHos.address;\n    // newestTargetHos[\"Language\"] = newestTargetHos.languages;\n    // newestTargetHos['Phone'] = newestTargetHos.phone;\n    // newestTargetHos['Hospital'] = newestTargetHos.hospital;\n    // newestTargetHos['Conditions'] = newestTargetHos.conditions;\n    // newestTargetHos['DocName'] = newestTargetHos.name;\n    // newestTargetHos['Specialty'] = newestTargetHos.specialty;\n    // newestTargetHos['YearsofPractice'] = newestTargetHos.yearsOfPractice;\n    // newestTargetHos['Procedures'] = newestTargetHos.procedures;\n    // newestTargetHos['NumberOfLikes'] = newestTargetHos.likes;\n    // newestTargetHos['Qualifications'] = newestTargetHos.qualifications;\n    // newestTargetHos['Type'] = newestTargetHos.type;\n    // newestTargetHos['userName'] = props.targetDocUserName;\n\n    console.log('doc likes');\n    newestTargetHos[\"Address\"] = newestTargetHos.address;\n    newestTargetHos[\"HospitalType\"] = newestTargetHos.type;\n    newestTargetHos['Insurance'] = newestTargetHos.insurance;\n    newestTargetHos['Language'] = newestTargetHos.languages;\n    newestTargetHos['Phone'] = newestTargetHos.phone;\n    newestTargetHos['HospitalName'] = newestTargetHos.name;\n    newestTargetHos['RelateSpecialty'] = newestTargetHos.relatedSpecialty;\n    newestTargetHos['Tags'] = newestTargetHos.tags;\n    newestTargetHos['Web'] = newestTargetHos.website;\n    let conditionList = [];\n\n    for (let doctor in newestTargetHos['doctors']) {\n      let targetDoc = newestTargetHos['doctors'][doctor];\n      targetDoc.conditions = targetDoc.conditions.map(item => {\n        let newItem = item.toLowerCase();\n        newItem = newItem.replace(newItem[0], newItem[0].toUpperCase());\n        return newItem;\n      });\n      targetDoc.conditions.forEach(condition => {\n        if (conditionList.indexOf(condition) == -1) {\n          conditionList.push(condition);\n        }\n      });\n    }\n\n    newestTargetHos['Conditions'] = conditionList; // console.log(newestTargetDoc['NumberOfLikes'])\n\n    console.log(newestTargetHos);\n    props.updateTargetDoc(newestTargetHos);\n    props.setProfileBackToDestination(\"likehistory\");\n\n    if (props.history != null) {\n      props.history.push(\"/hospprofile\");\n    }\n  }; // const handleClick = () => {\n  //   props.updateTargetHos(props.resultData);\n  //   if (props.history != null) {\n  //     props.history.push(\"/hospprofile\");\n  //   }\n  // };\n\n\n  console.log('target hos');\n  console.log(props.targetHos);\n  return /*#__PURE__*/React.createElement(Card, {\n    className: classes.root,\n    onClick: clickHospitalCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 3,\n    className: classes.imageGrid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardMedia, {\n    component: \"img\",\n    className: classes.img,\n    image: hospImg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 469,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 476,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 13\n    }\n  }, props.targetHos[\"name\"]), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 482,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 15\n    }\n  }, \"Address: \"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 15\n    }\n  }, props.targetHos[\"address\"])), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 15\n    }\n  }, \"Related Specialty: \"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 15\n    }\n  }, props.targetHos[\"relatedSpecialty\"])), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle1\",\n    color: \"textSecondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 15\n    }\n  }, \"Phone: \"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 15\n    }\n  }, props.targetHos[\"phone\"])), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Chip, {\n    color: \"secondary\",\n    size: \"small\",\n    label: props.targetHos.type,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    className: classes.likeBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(FavoriteIcon, {\n    style: {\n      color: \"red\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 503,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 13\n    }\n  }, props.hospitalInfo[\"likes\"])))));\n}\n\nLikeHistorySaved.propTypes = {// updateVerification: PropTypes.func.isRequired,\n  // getAllSearchData: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  storedCredentials: state.user.credentials // searchData: state.data.searchData\n\n});\n\nconst mapActionsToProps = {// updateVerification,\n  // getAllSearchData\n};\nexport default connect(mapStateToProps, mapActionsToProps)(LikeHistorySaved);","map":{"version":3,"sources":["/Users/andychenhe/Desktop/may10_michelle 2/src/Components/docAccount/LikeHistorySaved.js"],"names":["React","Fragment","useEffect","useState","makeStyles","Box","Typography","Grid","Hidden","ArrowBackIosIcon","ToggleButton","ToggleButtonGroup","CircularProgress","Link","connect","PropTypes","axios","Card","CardContent","CardMedia","Chip","FavoriteIcon","docImg","hospImg","useStyles","theme","account","root","display","margin","img","width","breakpoints","only","down","imageGrid","flexDirection","justifyContent","alignItems","marginTop","marginBottom","likeBox","marginLeft","marginRight","LikeHistorySaved","props","classes","displayType","saveLike","setDisplay","doctorCards","setDoctorCards","hospitalCards","setHospitalCards","handleDisplay","event","newDisplay","renderCount","setRenderCount","setSaveLike","doctors","hospitals","databaseInfo","setDatabase","indicator","displayStoredCredentials","getStoredCredentials","then","res","stored","data","credentials","console","log","likedDoctors","likedHospitals","docCardsList","map","doctor","specialty","hospital","replace","username","targetDoc","hosCardsList","hospitalUserName","name","targetHos","getSpecialtyData","catch","error","proxyurl","userStoredCredentials","get","defaults","baseURL","searchSpecialty","params","anchor","backIcon","textTransform","DocCard","clickDoctorCard","newestTargetDoc","address","languages","phone","conditions","yearsOfPractice","procedures","likes","qualifications","type","targetDocUserName","updateTargetDoc","setProfileBackToDestination","history","push","imgSrc","color","HospitalCard","clickHospitalCard","newestTargetHos","insurance","relatedSpecialty","tags","website","conditionList","item","newItem","toLowerCase","toUpperCase","forEach","condition","indexOf","hospitalInfo","propTypes","mapStateToProps","state","storedCredentials","user","mapActionsToProps"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect,useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport ArrowBackIosIcon from \"@material-ui/icons/ArrowBackIos\";\nimport ToggleButton from \"@material-ui/lab/ToggleButton\";\nimport ToggleButtonGroup from \"@material-ui/lab/ToggleButtonGroup\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { Link } from \"react-router-dom\";\n\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport axios from \"axios\";\n\n// import DocCard from \"../../Components/results/DocCard\";\n// import HospCard from \"../../Components/results/HospitalCard\";\n\n\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport Chip from \"@material-ui/core/Chip\";\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\nimport docImg from \"../../img/results/docAlex.png\";\nimport hospImg from \"../../img/results/pantaihospital.png\";\n\n\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// for small cards display, might delete later if naming conventions unify\n\n\nconst useStyles = makeStyles((theme) => ({\n  ...theme.account,\n\n  root: {\n    display: \"flex\",\n    margin: 30,\n  },\n\n  img: {\n    width: \"60%\",\n    [theme.breakpoints.only(\"md\")]: {\n      width: \"80%\",\n    },\n    [theme.breakpoints.down(\"xs\")]: {\n      width: \"40%\",\n    },\n  },\n\n  imageGrid: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    [theme.breakpoints.down(\"xs\")]: {\n      marginTop: 30,\n      marginBottom: 10,\n    },\n  },\n  likeBox: {\n    marginTop: 16,\n    display: \"flex\",\n    flexDirection: \"column\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    [theme.breakpoints.down(\"xs\")]: {\n      marginTop: 0,\n      alignItems: \"flex-start\",\n      marginLeft: 20,\n      marginRight: 20,\n      marginBottom: 20,\n    },\n  },\n}));\n\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nfunction LikeHistorySaved(props) {\n  const classes = useStyles();\n\n  // decide if the page should render Like History or Saved\n  const displayType = props.saveLike;\n\n  const [display, setDisplay] = React.useState(\"doctor\"); //display by doctor as default\n  const [doctorCards, setDoctorCards] = React.useState([]); //display by doctor as default\n  const [hospitalCards, setHospitalCards] = React.useState([]); //display by doctor as default\n  const handleDisplay = (event, newDisplay) => {\n    if (newDisplay != null) {\n      setDisplay(newDisplay);\n    }\n  };\n\n  const [renderCount, setRenderCount] = React.useState(0);\n\n  const [saveLike, setSaveLike] = React.useState({\n    doctors: [],\n    hospitals: []\n  })\n\n  const [databaseInfo, setDatabase] = React.useState({})\n\n  const indicator = \"\";\n\n  useEffect(() => {\n    // if (!indicator) {\n    displayStoredCredentials();\n    // }\n  }, []);\n\n\n  const displayStoredCredentials = () => {\n    getStoredCredentials()\n      .then((res) => {\n        // michelle 5/16: 从storedCredentials改成用axios了 所以现在uncomment这句 把原来的let stored = res[displayType]删掉\n        \n        let stored = res[0].data.credentials[displayType];\n        console.log('stored');\n        console.log(stored);\n        // console.log('stored content')\n        // console.log(res.data.credentials)\n        // console.log('displayType')\n        // console.log(displayType)\n        let likedDoctors;\n        let likedHospitals;\n\n        // if the user has not never liked any doctors or hospitals\n        if (!stored) {\n          likedDoctors = [];\n          likedHospitals = [];\n        } else {\n          likedDoctors = stored.doctors ? stored.doctors : [];\n          likedHospitals = stored.hospitals ? stored.hospitals : [];\n        }\n        console.log('user list:')\n        console.log(likedDoctors);\n        console.log(likedHospitals);\n        let docCardsList = likedDoctors.map(doctor => {\n          console.log('loading doc cards')\n          let specialty = doctor.specialty;\n          let hospital = doctor.hospital.replace(/\\s+/g, \"\");\n          let username = doctor.username.replace(/\\s+/g, \"\");\n          console.log('doctor');\n          console.log(doctor);\n          console.log(res[1].data);\n          console.log(specialty);\n          let targetDoc = res[1].data[specialty]['hospitals'][hospital]['doctors'][username];\n          \n          return (\n            <DocCard {...props} key={doctor.username} targetDoc={targetDoc} targetDocUserName={username}/>\n          )\n        })\n\n\n        // list of liked hospitals cards on hospital tab\n        let hosCardsList = likedHospitals.map(hospital => {\n          console.log('loading hos cards')\n          let specialty = hospital.specialty;\n          let hospitalUserName = hospital.name.replace(/\\s+/g, \"\");\n          console.log(specialty);\n          console.log(res[1].data);\n          let targetHos = res[1].data[specialty]['hospitals'][hospitalUserName];\n          return (\n            <HospitalCard {...props} key={hospital.name} targetHos={targetHos} targetHosUserName={hospitalUserName} hospitalInfo={hospital} getSpecialtyData={getSpecialtyData} database = {databaseInfo} />\n          )\n        })\n        setDoctorCards(docCardsList);\n        setHospitalCards(hosCardsList);\n        setSaveLike({\n          doctors: likedDoctors,\n          hospitals: likedHospitals\n        });\n\n        // setDatabase(res[1].data);\n        // setRenderCount(1);\n      })\n      .catch((error) => {\n        console.error(error);\n      })\n  }\n\n  let getStoredCredentials = async () => {\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    let userStoredCredentials = await axios.get( axios.defaults.baseURL + \"user\");\n    let databaseInfo = await axios.get(proxyurl+'https://us-central1-mydoc-f3cd9.cloudfunctions.net/apiForSearch/getDatabase')\n    // console.log(userStoredCredentials)\n    return [userStoredCredentials,databaseInfo];\n  }\n\n\n  let getSpecialtyData = async (searchSpecialty) => {\n    let data =\n      await axios.get(axios.defaults.baseURL + \"getallsearchdata\",\n        {\n          params: {\n            specialty: searchSpecialty\n          }\n        })\n    return data;\n  }\n\n  // // list of liked doctor cards on doctor tab\n  // let doctorCards = saveLike.doctors.map(doctor => {\n  //   let specialty = doctor.specialty;\n  //   let hospital = doctor.hospital.replace(/\\s+/g, \"\");\n  //   let username = doctor.username.replace(/\\s+/g, \"\");\n  //   console.log('databaseinf');\n  //   console.log(databaseInfo);\n  //   let targetDoc = databaseInfo[specialty]['hospitals'][hospital]['doctors'][username];\n  //   return (\n  //     <DocCard {...props} key={doctor.username} targetDoc={targetDoc} targetDocUserName={username}/>\n  //   )\n  // })\n\n  // // list of liked hospitals cards on hospital tab\n  // let hospitalCards = saveLike.hospitals.map(hospital => {\n  //   console.log('hi');\n  //   let specialty = hospital.specialty;\n  //   let hospitalUserName = hospital.name.replace(/\\s+/g, \"\");\n  //   let targetHos = databaseInfo[specialty]['hospitals'][hospitalUserName];\n  //   return (\n  //     <HospitalCard {...props} key={hospital.name} targetHos={targetHos} targetHosUserName={hospitalUserName} hospitalInfo={hospital} getSpecialtyData={getSpecialtyData} database = {databaseInfo} />\n  //   )\n  // })\n\n    return (\n      <a id=\"likehistory\" className={classes.anchor}>\n        <Grid container spacing={0}>\n          <Grid item xs={1}></Grid>\n          <Grid item xs={10} md={8}>\n            <Box display=\"flex\" mt={4} mb={3} flexWrap=\"wrap\" alignItems=\"center\">\n              <Box flexGrow={1} flexDirection=\"row\" mb={1}>\n                <Typography variant=\"h5\" color=\"primary\">\n                  {/* Back button, 手机屏幕才会出现 */}\n                  <Hidden mdUp>\n                    {/* <IconButton> */}\n                    <Link to=\"docaccount\">\n                      <ArrowBackIosIcon\n                        className={classes.backIcon}\n                        fontSize=\"small\"\n                      />\n                    </Link>\n                    {/* </IconButton> */}\n                  </Hidden>\n                  <strong>\n                    {displayType === \"likeHistory\" ? \"Like History\" : \"Saved\"}\n                  </strong>\n                </Typography>\n              </Box>\n              {/* Display by Doctor/Hospital buttons */}\n              <Box>\n                <ToggleButtonGroup\n                  value={display}\n                  exclusive\n                  onChange={handleDisplay}\n                >\n                  <ToggleButton value=\"doctor\" color=\"primary\">\n                    <Typography color=\"primary\" style={{ textTransform: \"none\" }}>\n                      Doctor\n                  </Typography>\n                  </ToggleButton>\n                  <ToggleButton value=\"hospital\">\n                    <Typography color=\"primary\" style={{ textTransform: \"none\" }}>\n                      Hospital\n                  </Typography>\n                  </ToggleButton>\n                </ToggleButtonGroup>\n              </Box>{\" \"}\n            </Box>\n\n            <br></br>\n            <br></br>\n\n            {/* if user clicks on display by 'doctor', then render doctor cards */}\n            {display === \"doctor\" ? (\n              <Fragment>{doctorCards}</Fragment>\n            ) : (\n                <Fragment>{hospitalCards}</Fragment>\n              )}\n          </Grid>\n          <Grid item xs={1} md={3}></Grid>\n        </Grid>\n      </a>\n    );\n  }\n// }\n\n// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n// might be deleted later if naming conventions unify\n\n\n\n// Each indiivdual doctor card\nfunction DocCard(props) {\n  const classes = useStyles();\n\n  // const handleClick = () => {\n  //   props.updateTargetDoc(props.resultData);\n  //   if (props.history != null) {\n  //     props.history.push(\"/docprofile\");\n  //   }\n  // };\n\n  const clickDoctorCard = () => {\n    console.log(props.targetDoc);\n    let newestTargetDoc = props.targetDoc;\n    newestTargetDoc[\"Address\"] = newestTargetDoc.address;\n    newestTargetDoc[\"Language\"] = newestTargetDoc.languages;\n    newestTargetDoc['Phone'] = newestTargetDoc.phone;\n    newestTargetDoc['Hospital'] = newestTargetDoc.hospital;\n    newestTargetDoc['Conditions'] = newestTargetDoc.conditions;\n    newestTargetDoc['DocName'] = newestTargetDoc.name;\n    newestTargetDoc['Specialty'] = newestTargetDoc.specialty;\n    newestTargetDoc['YearsofPractice'] = newestTargetDoc.yearsOfPractice;\n    newestTargetDoc['Procedures'] = newestTargetDoc.procedures;\n    newestTargetDoc['NumberOfLikes'] = newestTargetDoc.likes;\n    newestTargetDoc['Qualifications'] = newestTargetDoc.qualifications;\n    newestTargetDoc['Type'] = newestTargetDoc.type;\n    newestTargetDoc['userName'] = props.targetDocUserName;\n    console.log('doc likes')\n    // console.log(newestTargetDoc['NumberOfLikes'])\n    console.log(newestTargetDoc);\n    props.updateTargetDoc(newestTargetDoc);\n    props.setProfileBackToDestination(\"likehistory\");\n    if (props.history != null) {\n      props.history.push(\"/docprofile\");\n    }\n  }\n\n\n  // const handleClick = () => {\n  //   props.updateTargetDoc(props.resultData);\n  //   if (props.history != null) {\n  //     props.history.push(\"/docprofile\");\n  //   }\n  // };\n\n\n  return (\n         <Card className={classes.root} onClick={clickDoctorCard}>\n          <Grid container spacing={0}>\n            <Grid item xs={12} sm={3}  className={classes.imageGrid}>\n              {/* doctor image */}\n              <CardMedia\n                component=\"img\"\n                className={classes.img}\n                // image={docImg}\n                src = {props.targetDoc.imgSrc}\n              ></CardMedia>\n            </Grid>\n            <Grid item xs={12} sm={7}>\n              <CardContent>\n                {/* doctor details */}\n                <Typography variant=\"h6\" color=\"primary\">\n                  {\"Dr.\" + props.targetDoc.name}\n                </Typography>\n                <br></br>\n                <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                  <strong>Specialty: </strong>{\" \"}\n                  <span>{props.targetDoc.hospital}</span>\n                </Typography>\n                <Typography variant=\"subtitle1\" color=\"textSecondary\">\n                  <strong>Hospital: </strong>\n                  <span>{props.targetDoc[\"hospital\"]}</span>\n                </Typography>\n                <br></br>\n                {/* private tag */}\n                <Chip color=\"secondary\" size=\"small\" label={props.targetDoc.type}></Chip>\n              </CardContent>\n            </Grid>\n            <Grid item xs={12} sm={2}>\n              {/* Like icon + number of likes */}\n              <Box className={classes.likeBox}>\n                <FavoriteIcon style={{ color: \"red\" }} />\n                <Typography variant=\"body2\" color=\"primary\">\n                  {props.targetDoc[\"likes\"]}\n                </Typography>\n              </Box>\n            </Grid>\n          </Grid>\n        </Card>\n  );\n \n}\n\n\nfunction HospitalCard(props) {\n  const classes = useStyles();\n\n  // const clickHospitalCard = () => {\n  //   const specialty = props.hospitalInfo.relatedSpecialty;\n  //   const hospital = props.hospitalInfo.name.replace(/\\s+/g, \"\");\n\n  //   props.getSpecialtyData(specialty)\n  //     .then((res) => {\n  //       let targetHospital = res.data[specialty].hospitals[hospital];\n  //     }).catch((error) => {\n  //       console.error(error);\n  //     })\n  // }\n\n  const clickHospitalCard = () => {\n    let newestTargetHos = props.targetHos;\n    // newestTargetHos[\"Address\"] = newestTargetHos.address;\n    // newestTargetHos[\"Language\"] = newestTargetHos.languages;\n    // newestTargetHos['Phone'] = newestTargetHos.phone;\n    // newestTargetHos['Hospital'] = newestTargetHos.hospital;\n    // newestTargetHos['Conditions'] = newestTargetHos.conditions;\n    // newestTargetHos['DocName'] = newestTargetHos.name;\n    // newestTargetHos['Specialty'] = newestTargetHos.specialty;\n    // newestTargetHos['YearsofPractice'] = newestTargetHos.yearsOfPractice;\n    // newestTargetHos['Procedures'] = newestTargetHos.procedures;\n    // newestTargetHos['NumberOfLikes'] = newestTargetHos.likes;\n    // newestTargetHos['Qualifications'] = newestTargetHos.qualifications;\n    // newestTargetHos['Type'] = newestTargetHos.type;\n    // newestTargetHos['userName'] = props.targetDocUserName;\n    console.log('doc likes')\n\n\n    newestTargetHos[\"Address\"] = newestTargetHos.address;\n    newestTargetHos[\"HospitalType\"] = newestTargetHos.type;\n    newestTargetHos['Insurance'] = newestTargetHos.insurance;\n    newestTargetHos['Language'] = newestTargetHos.languages;\n    newestTargetHos['Phone'] = newestTargetHos.phone;\n    newestTargetHos['HospitalName'] = newestTargetHos.name;\n    newestTargetHos['RelateSpecialty'] = newestTargetHos.relatedSpecialty;\n    newestTargetHos['Tags'] = newestTargetHos.tags;\n    newestTargetHos['Web'] = newestTargetHos.website;\n    let conditionList = [];\n    for (let doctor in newestTargetHos['doctors']){\n      let targetDoc = newestTargetHos['doctors'][doctor];\n      targetDoc.conditions = targetDoc.conditions.map((item)=>{\n        let newItem = item.toLowerCase();\n          newItem = newItem.replace(newItem[0],newItem[0].toUpperCase())\n        return newItem\n      });\n      targetDoc.conditions.forEach((condition) => {\n        if (conditionList.indexOf(condition) == -1){\n          conditionList.push(condition)\n        }\n      });\n    }\n    newestTargetHos['Conditions'] = conditionList;\n    // console.log(newestTargetDoc['NumberOfLikes'])\n    console.log(newestTargetHos);\n    props.updateTargetDoc(newestTargetHos);\n    props.setProfileBackToDestination(\"likehistory\");\n    if (props.history != null) {\n      props.history.push(\"/hospprofile\");\n    }\n  }\n\n  // const handleClick = () => {\n  //   props.updateTargetHos(props.resultData);\n  //   if (props.history != null) {\n  //     props.history.push(\"/hospprofile\");\n  //   }\n  // };\n\n\nconsole.log('target hos');\nconsole.log(props.targetHos);\n  return (\n    <Card className={classes.root} onClick={clickHospitalCard}>\n      <Grid container spacing={0}>\n        <Grid item xs={12} sm={3} className={classes.imageGrid}>\n          {/* hospital logo image */}\n          <CardMedia\n            component=\"img\"\n            className={classes.img}\n            image={hospImg}\n          ></CardMedia>\n        </Grid>\n\n        <Grid item xs={12} sm={7}>\n          <CardContent>\n            {/* hospital details */}\n            <Typography variant=\"h6\" color=\"primary\">\n              {props.targetHos[\"name\"]}\n            </Typography>\n            <br></br>\n            <Typography variant=\"subtitle1\" color=\"textSecondary\">\n              <strong>Address: </strong>\n              <span>{props.targetHos[\"address\"]}</span>\n            </Typography>\n            <Typography variant=\"subtitle1\" color=\"textSecondary\">\n              <strong>Related Specialty: </strong>\n              <span>{props.targetHos[\"relatedSpecialty\"]}</span>\n            </Typography>\n            <Typography variant=\"subtitle1\" color=\"textSecondary\">\n              <strong>Phone: </strong>\n              <span>{props.targetHos[\"phone\"]}</span>\n            </Typography>\n\n            <br></br>\n            <Chip color=\"secondary\" size=\"small\" label={props.targetHos.type}></Chip>\n          </CardContent>\n        </Grid>\n        <Grid item xs={12} sm={2}>\n          {/* like icon + number of likes */}\n          <Box className={classes.likeBox}>\n            <FavoriteIcon style={{ color: \"red\" }} />\n            <Typography variant=\"body2\" color=\"primary\">\n              {props.hospitalInfo[\"likes\"]}\n            </Typography>\n          </Box>\n        </Grid>\n      </Grid>\n    </Card>\n  );\n}\n\n\n\n\n\n\n\n\nLikeHistorySaved.propTypes = {\n  // updateVerification: PropTypes.func.isRequired,\n  // getAllSearchData: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = (state) => ({\n  storedCredentials: state.user.credentials,\n  // searchData: state.data.searchData\n});\n\nconst mapActionsToProps = {\n  // updateVerification,\n  // getAllSearchData\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(LikeHistorySaved);"]},"metadata":{},"sourceType":"module"}