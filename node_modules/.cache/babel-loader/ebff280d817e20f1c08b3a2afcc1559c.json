{"ast":null,"code":"var _jsxFileName = \"/Users/Michelle/Downloads/may4_eshin/src/Components/profile/DocTags.js\";\nimport React, { Fragment } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Divider from \"@material-ui/core/Divider\";\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nconst useStyles = makeStyles(theme => ({\n  editTagDialog: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0\n  },\n  tag: {\n    margin: theme.spacing(0.5)\n  },\n  tagDialog: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0,\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: 10\n    },\n    marginBottom: 20\n  },\n  editTagsButton: {\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: 20\n    }\n  },\n  line: {\n    [theme.breakpoints.down(\"xs\")]: {\n      border: \"5px solid rgba(0, 0, 0, 0.05)\"\n    }\n  },\n  reviewTagsBox: {\n    [theme.breakpoints.down(\"xs\")]: {\n      justifyContent: \"left\",\n      alignItems: \"left\",\n      marginLeft: 20\n    }\n  },\n  divider: {\n    height: 2,\n    width: 115,\n    backgroundColor: \"#FF8686\"\n  }\n})); // Edit Tags (用在DocInfo.js)\n// 目前doctor所有的tags and edit tags 都是hardcoded， 麻烦你了\n\nfunction Tags(props) {\n  const classes = useStyles(); // load user authenticate \n\n  const authenticated = props.authenticated;\n  let doctorTags = [];\n  props.searchInfo.tags.forEach(tag => {\n    doctorTags.push({\n      tagName: tag.tagName,\n      count: tag.count\n    });\n  });\n  const [currentTags, setCurrentTags] = React.useState(doctorTags);\n  let userTags = [];\n  props.storedCredentials.addedDoctorTags.verify.map(tag => {\n    userTags.push(tag);\n  });\n  const [storedUserTags, setStoredUserTags] = React.useState(userTags); // 这是点进去edit tags 会出现的tags选项\n\n  const [editTags, displayEditedTags] = React.useState([{\n    key: 0,\n    label: \"Attentive\"\n  }, {\n    key: 1,\n    label: \"Bedside manner\"\n  }, {\n    key: 2,\n    label: \"Empathetic\"\n  }, {\n    key: 3,\n    label: \"Enthusiastic\"\n  }, {\n    key: 4,\n    label: \"Friendly\"\n  }, {\n    key: 5,\n    label: \"Honest\"\n  }, {\n    key: 6,\n    label: \"Knowledgeable\"\n  }, {\n    key: 7,\n    label: \"Passionate\"\n  }, {\n    key: 8,\n    label: \"Patient\"\n  }, {\n    key: 9,\n    label: \"Respectful\"\n  }, {\n    key: 10,\n    label: \"Responsible\"\n  }, {\n    key: 11,\n    label: \"Trustworthy\"\n  }]);\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = value => {\n    setOpen(false);\n  }; // 这里我想说点了一个tag，就会换色（从outlined 换成default)\n  // 但是我不会写那个logic,所以目前是点了一个tag,所有tag都一起换色了。。麻烦你了\n  // 还有需要弄一个logic是 user再点一次又会换成原来outlined的style,麻烦你了\n  // const [color, setColor] = React.useState(\"outlined\");\n  // const handleClick = () => {\n  //   setColor(\"default\");\n  // };\n\n\n  const addRemoveTags = tag => {\n    let currentTagsCopy = [currentTags];\n    let currentTagIndex = currentTagsCopy.findIndex(eachTag => eachTag.tagName == tag);\n    let userStoredTagsCopy = [storedUserTags];\n    let userStoredTagIndex = userStoredTagsCopy.indexOf(tag); // if the tag has been selected by user, which means it should also exist\n    // in the database\n\n    if (userStoredTagIndex !== -1) {\n      // remove from user selected tag list in the modal\n      userStoredTagsCopy.splice(userStoredTagIndex, 1); // decrease this tag's count for this doctor in database; this tag should\n      // already exist in the database since the user selected it\n\n      doctorTagsCopy[doctorIndex].number--;\n\n      if (doctorTagsCopy[doctorIndex].number == 0) {\n        doctorTagsCopy.splice(doctorIndex, 1);\n      }\n\n      this.setState({\n        doctorTags: doctorTagsCopy,\n        userSelectedTags: userTagsCopy\n      }); // the tag hasn't been selected by the user\n    } else {\n      // if the tag already exists in the database (other users had selected this\n      //  tag for this doctor)\n      if (doctorIndex !== -1) {\n        // increase the count for this tag in database by 1\n        doctorTagsCopy[doctorIndex].number++;\n        this.setState(prevState => ({\n          doctorTags: doctorTagsCopy,\n          // add the new tag to this user's tag list\n          userSelectedTags: [...prevState.userSelectedTags, tag]\n        })); // the tag doesn't exist in the database; this is the first time a user\n        // selects this tag\n      } else {\n        this.setState(prevState => ({\n          doctorTags: [...prevState.doctorTags, {\n            tagName: tag,\n            number: 1\n          }],\n          userSelectedTags: [...prevState.userSelectedTags, tag]\n        }));\n      }\n    }\n  }; // create a tag list that contains all tags for this doctor\n\n\n  let tagList = currentTags.map(tag => {\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      key: tag.tagName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Chip, {\n      label: tag.tagName + ' (' + tag.count + ')',\n      className: classes.tag,\n      color: \"secondary\",\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }\n    })));\n  }); // if (props.searchInfo) {\n  //   console.log(props.searchInfo.tags)\n  // }\n\n  console.log(authenticated);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Hidden, {\n    smUp: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"hr\", {\n    className: classes.line,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Box, {\n    mt: 2,\n    mb: 2,\n    display: \"flex\",\n    flexDirection: \"column\",\n    className: classes.reviewTagsBox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  }, \"Review Tags\"), /*#__PURE__*/React.createElement(Divider, {\n    className: classes.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.tagDialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }\n  }, tagList, \" \", authenticated ? /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    startIcon: /*#__PURE__*/React.createElement(EditOutlinedIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 24\n      }\n    }),\n    onClick: handleClickOpen,\n    style: {\n      textTransform: \"none\"\n    },\n    className: classes.editTagsButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 11\n    }\n  }, \"Edit Tags\") : \"\"), /*#__PURE__*/React.createElement(Dialog, {\n    onClose: handleClose,\n    open: open,\n    maxWidth: \"xs\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"Body\",\n    style: {\n      margin: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 9\n    }\n  }, \"Please select tag(s) that best describe this doctor from the list below:\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.editTagDialog,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }\n  }, editTags.map(tag => {\n    // let index = props.tagInfo.findIndex(eachTag => eachTag.tagName == tag)\n    // // if the \n    // let selected = (index > -1)? \"true\" : \"false\";\n    return /*#__PURE__*/React.createElement(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(PreDefinedTag, {\n      tag: tag,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }\n    }));\n  })), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleClose,\n    variant: \"outlined\",\n    color: \"primary\",\n    style: {\n      textTransform: \"none\",\n      margin: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 11\n    }\n  }, \"Done\"))));\n}\n\nfunction PreDefinedTag(props) {\n  const classes = useStyles();\n  const [selected, selectUnselectTag] = React.useState(false);\n\n  const handleClick = () => {\n    selectUnselectTag(!selected);\n    props.addRemoveTags(props.tag.label);\n  };\n\n  return /*#__PURE__*/React.createElement(\"li\", {\n    key: props.tag.key,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Chip, {\n    label: props.tag.label,\n    className: classes.tag,\n    color: \"secondary\",\n    variant: selected ? \"default\" : \"secondary\",\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }\n  }));\n}\n\nTags.propTypes = {\n  changeProfilePic: PropTypes.func.isRequired\n};\n\nconst mapStateToProps = state => ({\n  // user: state.user,\n  authenticated: state.user.authenticated,\n  storedCredentials: state.user.credentials,\n  searchInfo: state.data.searchInfo\n});\n\nconst mapActionsToProps = {// changeProfilePic,\n};\nexport default connect(mapStateToProps, mapActionsToProps)(Tags);","map":{"version":3,"sources":["/Users/Michelle/Downloads/may4_eshin/src/Components/profile/DocTags.js"],"names":["React","Fragment","makeStyles","Dialog","Chip","Button","Box","Typography","DialogActions","Hidden","Divider","EditOutlinedIcon","connect","PropTypes","useStyles","theme","editTagDialog","display","justifyContent","flexWrap","listStyle","padding","spacing","margin","tag","tagDialog","breakpoints","down","marginLeft","marginBottom","editTagsButton","line","border","reviewTagsBox","alignItems","divider","height","width","backgroundColor","Tags","props","classes","authenticated","doctorTags","searchInfo","tags","forEach","push","tagName","count","currentTags","setCurrentTags","useState","userTags","storedCredentials","addedDoctorTags","verify","map","storedUserTags","setStoredUserTags","editTags","displayEditedTags","key","label","open","setOpen","handleClickOpen","handleClose","value","addRemoveTags","currentTagsCopy","currentTagIndex","findIndex","eachTag","userStoredTagsCopy","userStoredTagIndex","indexOf","splice","doctorTagsCopy","doctorIndex","number","setState","userSelectedTags","userTagsCopy","prevState","tagList","console","log","textTransform","PreDefinedTag","selected","selectUnselectTag","handleClick","propTypes","changeProfilePic","func","isRequired","mapStateToProps","state","user","credentials","data","mapActionsToProps"],"mappings":"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","sourcesContent":["import React, { Fragment } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport Typography from \"@material-ui/core/Typography\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport Divider from \"@material-ui/core/Divider\";\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\n\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => ({\n  editTagDialog: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0,\n  },\n  tag: {\n    margin: theme.spacing(0.5),\n  },\n\n  tagDialog: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    listStyle: \"none\",\n    padding: theme.spacing(0.5),\n    margin: 0,\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: 10,\n    },\n    marginBottom: 20,\n  },\n\n  editTagsButton: {\n    [theme.breakpoints.down(\"xs\")]: {\n      marginLeft: 20,\n    },\n  },\n\n  line: {\n    [theme.breakpoints.down(\"xs\")]: {\n      border: \"5px solid rgba(0, 0, 0, 0.05)\",\n    },\n  },\n  reviewTagsBox: {\n    [theme.breakpoints.down(\"xs\")]: {\n      justifyContent: \"left\",\n      alignItems: \"left\",\n      marginLeft: 20,\n    },\n  },\n  divider: {\n    height: 2,\n    width: 115,\n    backgroundColor: \"#FF8686\",\n  },\n}));\n\n\n\n\n// Edit Tags (用在DocInfo.js)\n// 目前doctor所有的tags and edit tags 都是hardcoded， 麻烦你了\nfunction Tags(props) {\n\n  const classes = useStyles();\n  // load user authenticate \n  const authenticated = props.authenticated;\n\n  let doctorTags = [];\n  props.searchInfo.tags.forEach(tag => {\n    doctorTags.push({\n      tagName: tag.tagName,\n      count: tag.count\n    });\n  });\n\n  const [currentTags, setCurrentTags] = React.useState(doctorTags);\n\n  let userTags = [];\n  props.storedCredentials.addedDoctorTags.verify.map(tag => {\n    userTags.push(tag);\n  });\n\n\n  const [storedUserTags, setStoredUserTags] = React.useState(userTags);\n\n\n\n  // 这是点进去edit tags 会出现的tags选项\n  const [editTags, displayEditedTags] = React.useState([\n    { key: 0, label: \"Attentive\" },\n    { key: 1, label: \"Bedside manner\" },\n    { key: 2, label: \"Empathetic\" },\n    { key: 3, label: \"Enthusiastic\" },\n    { key: 4, label: \"Friendly\" },\n    { key: 5, label: \"Honest\" },\n    { key: 6, label: \"Knowledgeable\" },\n    { key: 7, label: \"Passionate\" },\n    { key: 8, label: \"Patient\" },\n    { key: 9, label: \"Respectful\" },\n    { key: 10, label: \"Responsible\" },\n    { key: 11, label: \"Trustworthy\" },\n  ]);\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (value) => {\n    setOpen(false);\n  };\n\n  // 这里我想说点了一个tag，就会换色（从outlined 换成default)\n  // 但是我不会写那个logic,所以目前是点了一个tag,所有tag都一起换色了。。麻烦你了\n  // 还有需要弄一个logic是 user再点一次又会换成原来outlined的style,麻烦你了\n  // const [color, setColor] = React.useState(\"outlined\");\n  // const handleClick = () => {\n  //   setColor(\"default\");\n  // };\n\n  const addRemoveTags = (tag) => {\n    let currentTagsCopy = [currentTags];\n    let currentTagIndex = currentTagsCopy.findIndex(eachTag => eachTag.tagName == tag)\n\n    let userStoredTagsCopy = [storedUserTags];\n    let userStoredTagIndex = userStoredTagsCopy.indexOf(tag);\n\n    // if the tag has been selected by user, which means it should also exist\n    // in the database\n    if (userStoredTagIndex !== -1) {\n      // remove from user selected tag list in the modal\n      userStoredTagsCopy.splice(userStoredTagIndex, 1);\n      // decrease this tag's count for this doctor in database; this tag should\n      // already exist in the database since the user selected it\n      doctorTagsCopy[doctorIndex].number--;\n      if (doctorTagsCopy[doctorIndex].number == 0) {\n        doctorTagsCopy.splice(doctorIndex, 1);\n      }\n      this.setState({\n        doctorTags: doctorTagsCopy,\n        userSelectedTags: userTagsCopy\n      })\n      // the tag hasn't been selected by the user\n    } else {\n      // if the tag already exists in the database (other users had selected this\n      //  tag for this doctor)\n      if (doctorIndex !== -1) {\n        // increase the count for this tag in database by 1\n        doctorTagsCopy[doctorIndex].number++;\n        this.setState(prevState => ({\n          doctorTags: doctorTagsCopy,\n          // add the new tag to this user's tag list\n          userSelectedTags: [\n            ...prevState.userSelectedTags, tag\n          ]\n        }))\n        // the tag doesn't exist in the database; this is the first time a user\n        // selects this tag\n      } else {\n        this.setState(prevState => ({\n          doctorTags: [\n            ...prevState.doctorTags, { tagName: tag, number: 1 }\n          ],\n          userSelectedTags: [\n            ...prevState.userSelectedTags, tag\n          ]\n        }))\n      }\n    }\n  }\n\n\n\n  // create a tag list that contains all tags for this doctor\n  let tagList = currentTags.map((tag) => {\n    return (\n      <Fragment>\n        <li key={tag.tagName}>\n          <Chip\n            label={tag.tagName + ' (' + tag.count + ')'}\n            className={classes.tag}\n            color=\"secondary\"\n            size=\"small\"\n          />\n        </li>\n      </Fragment>\n    )\n  });\n\n  // if (props.searchInfo) {\n  //   console.log(props.searchInfo.tags)\n  // }\n\n  console.log(authenticated)\n\n  return (\n    <div>\n      <Hidden smUp>\n        <hr className={classes.line}></hr>\n        <Box\n          mt={2}\n          mb={2}\n          display=\"flex\"\n          flexDirection=\"column\"\n          className={classes.reviewTagsBox}\n        >\n          <Typography variant=\"h6\" color=\"primary\">\n            Review Tags\n          </Typography>\n          <Divider className={classes.divider} />\n        </Box>\n      </Hidden>\n      {/* 显示这个doctor现在有的tags, 目前是hardcoded的， 麻烦你了 */}\n      <div className={classes.tagDialog}>\n        {tagList}{\" \"}\n        {/* 如果登入了，edit tags的button会出现，否则不会出现 */}\n        {authenticated ? (\n          <Button\n            color=\"primary\"\n            startIcon={<EditOutlinedIcon />}\n            onClick={handleClickOpen}\n            style={{ textTransform: \"none\" }}\n            className={classes.editTagsButton}\n          >\n            Edit Tags\n          </Button>\n        ) : (\n            \"\"\n          )}\n      </div>\n\n      <Dialog onClose={handleClose} open={open} maxWidth=\"xs\">\n        <Typography variant=\"Body\" style={{ margin: 20 }}>\n          Please select tag(s) that best describe this doctor from the list\n          below:\n        </Typography>\n        {/* 弹窗出现所有tags选项 */}\n        <div className={classes.editTagDialog}>\n          {editTags.map((tag) => {\n\n            // let index = props.tagInfo.findIndex(eachTag => eachTag.tagName == tag)\n            // // if the \n            // let selected = (index > -1)? \"true\" : \"false\";\n\n\n\n            return (\n              <Fragment>\n                <PreDefinedTag tag={tag} />\n              </Fragment>\n            );\n          })}\n        </div>\n\n        {/* Done button， 目前是点了就关掉窗口，没有save user点了什么 */}\n        <DialogActions>\n          <Button\n            onClick={handleClose}\n            variant=\"outlined\"\n            color=\"primary\"\n            style={{ textTransform: \"none\", margin: 10 }}\n          >\n            Done\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n}\n\nfunction PreDefinedTag(props) {\n  const classes = useStyles();\n\n  const [selected, selectUnselectTag] = React.useState(false);\n\n  const handleClick = () => {\n    selectUnselectTag(!selected);\n    props.addRemoveTags(props.tag.label);\n  };\n\n  return (\n    <li key={props.tag.key}>\n      <Chip\n        label={props.tag.label}\n        className={classes.tag}\n        color=\"secondary\"\n        variant={selected ? \"default\" : \"secondary\"}\n        onClick={handleClick}\n      />\n    </li>\n  )\n}\n\n\nTags.propTypes = {\n  changeProfilePic: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  // user: state.user,\n  authenticated: state.user.authenticated,\n  storedCredentials: state.user.credentials,\n  searchInfo: state.data.searchInfo\n});\n\nconst mapActionsToProps = {\n  // changeProfilePic,\n};\n\nexport default connect(mapStateToProps, mapActionsToProps)(Tags);\n\n"]},"metadata":{},"sourceType":"module"}